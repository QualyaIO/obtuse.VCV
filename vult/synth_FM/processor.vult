
// Util.change for 4 values at once, to make sure we update inner states with ADSR setter
fun change4(a:real, b:real, c:real, d:real):bool {
    mem pre_a, pre_b, pre_c, pre_d;
    val v:bool = pre_a <> a || pre_b <> b || pre_c <> c || pre_d <> d;
    pre_a = a;
    pre_b = b;
    pre_c = c;
    pre_d = d;
    return v;
}

// from vult utils, convert input voltage normalized from -10..10v to -1..1 to pitch
// output will be limited to 0..127, corresponding to -5v .. +5.583v
fun cvToPitch(cv) : int {
   val pitch = cv * 120.0 + 60.0;
   // round
   if (pitch % 1.0 >= 0.5) {
      pitch = floor(pitch + 1.0);
   } else {
      pitch = floor(pitch);
   }
   pitch = clip(pitch, 0.0, 127.0);
   return int(pitch);
}

fun process() {
   return voice:Voice.process();
}
// gate and pitch from CV
// input 1: gate (should normalized -1..1 , gate if >= 0.1, i.e. 1v)
// input 2: v/oct (should normalized -1..1 for -10..10v)
// input 3: velocity (linear, should normalized -1..1 for -10..10v). If 0 velocity (<= 0v) will be set to 127.
// cable which polyphonic cable is used
// Note: only take into account voct upon new gate
and setNote(gate:real, voct:real, vel: real, cable:int) {
   // keep track of note and gate per channel (max 16 as per VCV)
   mem last_pitches: array(int, 16);
   mem last_gates: array(bool, 16);
   // 0 velocity (e.g. cable not connected) will be set to max
   val velocity = clip(vel, 0.0, 1.0) * 127.0;
   if (velocity == 0.0) {
      velocity = 127.0;
   } 
   // note on
   if (not(last_gates[cable]) && gate >= 0.1) {
      last_gates[cable] = true;
      last_pitches[cable] = cvToPitch(voct);
      _ = voice:Voice.noteOn(last_pitches[cable], int(velocity), 0);
   }
   // note off
   else if(last_gates[cable] && gate < 0.1) {
      if (last_pitches[cable] >= 0) {
         _ = voice:Voice.noteOff(last_pitches[cable], 0);
      }
      last_gates[cable] = false;
      last_pitches[cable] = -1;
   }
}
// pass information about max number of connected cables. Will reset all extra notes upon change to avoid stuck notes
and nbCables(nbcables: int) {
   mem last_nbcables;
   if (nbcables <> last_nbcables) {
      last_nbcables = nbcables;
      val c = nbcables;
      while (c < size(last_gates) && c < size(last_pitches)) {
         if (last_gates[c] && last_pitches[c] >= 0) {
            _ = voice:Voice.noteOff(last_pitches[c], 0);
         }
         last_gates[c] = false;
         last_pitches[c] = -1;
         c = c + 1;
      }
   }
}
and setSamplerate(newFs:real) {
   mem fs;
   if (newFs > 0.0 && newFs <> fs) {
      fs = newFs;
      _ = voice:Voice.setSamplerate(fs);
   }
}

// specific to FM
// "force" flags: if true, pass down parameter even if not changed -- useful for init, so we don't deal with default state here
and setModulatorWavetable(wavetableIdx: real, force: bool) {
   // counting on lazy evaluation to update Util.change state no matter what
  if (Util.change(wavetableIdx) || force) {
     _ = voice:Voice.synthSetModulatorWavetable(wavetableIdx);
  }
}
and setCarrierWavetable(wavetableIdx: real, force: bool) {
  if (Util.change(wavetableIdx) || force) {
    _ = voice:Voice.synthSetCarrierWavetable(wavetableIdx);
  }
}
and setModulatorRatio(ratio: real, force: bool) {
  if (Util.change(ratio) || force) {
    _ = voice:Voice.synthSetModulatorRatio(ratio);
  }
}
and setCarrierRatio(ratio: real, force: bool) {
  if (Util.change(ratio) || force) {
    _ = voice:Voice.synthSetCarrierRatio(ratio);
  }
}
and setModulatorLevel(level: real, force: bool) {
  if (Util.change(level) || force) {
    _ = voice:Voice.synthSetModulatorLevel(level);
  }
}
and setModulatorADSR(a:real , d: real, s: real, r: real, force: bool) {
  if (change4(a,d,s,r) || force) {
     _ = voice:Voice.synthSetModulatorADSR(a,d,s,r);
  }
}
and setCarrierADSR(a:real , d: real, s: real, r: real, force: bool) {
  if (change4(a,d,s,r) || force) {
     _ = voice:Voice.synthSetCarrierADSR(a,d,s,r);
  }
}

and default() @[init] {
   _ = voice:Voice.default();
   _ = setSamplerate(44.1);
}
