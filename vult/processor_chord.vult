
// from a midi note to cv -1..1
fun pitchToCv(pitch) {
    return (pitch - 60.0) / 120.0;
}

// from vult utils, convert input voltage normalized from -10..10v to -1..1 to pitch
// output will be limited to 0..127, corresponding to -5v .. +5.583v
fun cvToPitch(cv: real) : int {
   val pitch = cv * 120.0 + 60.0;
   // round
   if (pitch % 1.0 >= 0.5) {
      pitch = floor(pitch + 1.0);
   } else {
      pitch = floor(pitch);
   }
   pitch = clip(pitch, 0.0, 127.0);
   return int(pitch);
}

// generate new chord upon trigger, returning the three notes
// also process reset switch
fun process(trig: real, reset: real) {
  mem n1, n2, n3;

  
  if (Util.edge(reset >= 0.1)) {
    _ = ton:Tonnetz.reset();
  }

  // detecting new trigger
  if (Util.edge(trig >= 0.1)) {
    n1, n2, n3 = ton:Tonnetz.process();
  }
  return pitchToCv(real(n1)), pitchToCv(real(n2)), pitchToCv(real(n3));
}

and setScale(param: int, force: bool) {
  if (Util.change(real(param)) || force) {
    _ = ton:Tonnetz.setScale(param);
  }
}

// takes cv in input, v/oct (should normalized -1..1 for -10..10v)
and setRoot(param: real, force: bool) {
  if (Util.change(param) || force) {
    _ = ton:Tonnetz.setRoot(cvToPitch(param));
  }
}

and setChord(param: int, force: bool) {
  if (Util.change(real(param)) || force) {
    _ = ton:Tonnetz.setChord(param);
  }
}

and setChordSpread(param: real, force: bool) {
  if (Util.change(param) || force) {
    _ = ton:Tonnetz.setChordSpread(param);
  }
}

and setInversionSpread(param: real, force: bool) {
  if (Util.change(param) || force) {
    _ = ton:Tonnetz.setInversionSpread(param);
  }
}

and setJump(param: real, force: bool) {
  if (Util.change(param) || force) {
    _ = ton:Tonnetz.setJump(param);
  }
}

// getter for some information
and getNbChords(): int {
  return ton:Tonnetz.getNbChords();
}
and getNbScales(): int {
  return ton:Tonnetz.getNbScales();
}

// get current scale in cv/oct. Fill array passed in parameters, return the number of values to take into account.
and getScale(scale: array(real, 12)): int {
  val rawScale = Tonnetz.getScale(ton:Tonnetz.getScaleId());
  // easiest way to turn down unwanted disparities at this time
  if (size(rawScale) <> size(scale)) {
    return 0;
  }
  // compute scale from root
  val root = ton:Tonnetz.getRoot();
  val i = 0;
  val s = 0;
  // FIXME: might go beyond 127 for highest root (our should deal with than when going back from CV to MIDI, but might cause issue elsewhere or outside?)
  while(i < size(rawScale)) {
    if (rawScale[i]) {
      scale[s] = pitchToCv(real(root + i));
      s = s + 1;
    }
    i = i + 1;
  }
  return s;
}

