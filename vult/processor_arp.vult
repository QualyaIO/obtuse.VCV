
// from a midi note to cv -1..1
fun pitchToCv(pitch) {
    return (pitch - 60.0) / 120.0;
}

// from vult utils, convert input voltage normalized from -10..10v to -1..1 to pitch
// output will be limited to 0..127, corresponding to -5v .. +5.583v
fun cvToPitch(cv: real) : int {
   val pitch = cv * 120.0 + 60.0;
   // round
   if (pitch % 1.0 >= 0.5) {
      pitch = floor(pitch + 1.0);
   } else {
      pitch = floor(pitch);
   }
   pitch = clip(pitch, 0.0, 127.0);
   return int(pitch);
}

// from vult examples
fun edge(x:bool) : bool {
   mem pre;
   val ret = x && not(pre);
   pre = x;
   return ret;
}

// generate new chord upon trigger, returning the three notes
// also process reset switch
fun process(trig: real, reset: real): real {
  mem note;
  
  if (Util.edge(reset >= 0.1)) {
    _ = arpe:Arp.reset();
  }

  // detecting new trigger
  if (Util.edge(trig >= 0.1)) {
    note = arpe:Arp.process();
  }
  if (note >= 0) {
    return pitchToCv(real(note));
  } else {
    return 0.0;
  }
}

and setMode(param: int, force: bool) {
  if (Util.change(real(param)) || force) {
    _ = arpe:Arp.setMode(param);
  }
}

and setPRandomNotes(param: real, force: bool) {
  if (Util.change(param) || force) {
    _ = arpe:Arp.setPRandomNotes(param);
  }
}

and setPRandomize(param: real, force: bool) {
  if (Util.change(param) || force) {
    _ = arpe:Arp.setPRandomize(param);
  }
}

// WARNING: notes passed by ref down to arp
and setNotes(newNotes: array(int, 16)) {
  _ = arpe:Arp.setNotes(newNotes);
}

// getter for some information
and getNbModes(): int {
  return arpe:Arp.getNbModes();
}

// getter for some information
and getMaxNbNotes(): int {
  return arpe:Arp.getMaxNbNotes();
}

// passing seed to DSP
and setSeed(seed: int) {
  _ = arpe:Arp.setSeed(seed);
}
