

// expect input normed to 0..1 from 0..10v
// clock (new pulse from clock) or reset if >= 0.1, i.e. 1v
// reset applied before clock
fun process(clock: real, reset: real) : int {
   // returned value
   val trigger = 0;
   // new reset and clock to pass (we are only interested in raising front)
   if (Util.edge(reset >= 0.1)) {
     _ = trigg:Trigg.reset();
   }
   // new clock is actually calling the underlying code
   if (Util.edge(clock >= 0.1)) {
     trigger = trigg:Trigg.process();
   }
   return trigger;
}


and setLength(param: int, force: bool) {
  if (Util.change(real(param)) || force) {
    _ = trigg:Trigg.setLength(param);
  }
}
and setDivider(param: int, force: bool) {
  if (Util.change(real(param)) || force) {
    _ = trigg:Trigg.setDivider(param);
  }
}
and setShift(param: int, force: bool) {
  if (Util.change(real(param)) || force) {
    _ = trigg:Trigg.setShift(param);
  }
}
and setPosition(param: int, force: bool) {
  if (Util.change(real(param)) || force) {
    _ = trigg:Trigg.setPosition(param);
  }
}
and setEvolve(param: real, force: bool) {
  if (Util.change(param) || force) {
    _ = trigg:Trigg.setEvolve(param);
  }
}
and setMagnitude(param: real, force: bool) {
  if (Util.change(param) || force) {
    _ = trigg:Trigg.setMagnitude(param);
  }
}
and setBalance(param: real, force: bool) {
  if (Util.change(param) || force) {
    _ = trigg:Trigg.setBalance(param);
  }
}
and setDensity(param: real, force: bool) {
  if (Util.change(param) || force) {
    _ = trigg:Trigg.setDensity(param);
  }
}
