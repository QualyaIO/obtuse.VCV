
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef ENGINE_EFFECTS_H
#define ENGINE_EFFECTS_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "engine_effects.tables.h"

static_inline fix16_t Util_noteToFrequency(int note){
   return fix_mul(0x217 /* 0.008176 */,fix_exp(fix_mul(0xec9 /* 0.057762 */,int_to_fix(note))));
};

static_inline fix16_t Util_tonesToCoeff(fix16_t semitones){
   fix16_t log_base;
   log_base = 0xb172 /* 0.693147 */;
   return fix_exp(fix_mul(fix_mul(0x1555 /* 0.083333 */,log_base),semitones));
}

typedef struct Util__ctx_type_2 {
   uint8_t pre;
} Util__ctx_type_2;

typedef Util__ctx_type_2 Util_edge_type;

static_inline void Util__ctx_type_2_init(Util__ctx_type_2 &_output_){
   Util__ctx_type_2 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

static_inline void Util_edge_init(Util__ctx_type_2 &_output_){
   Util__ctx_type_2_init(_output_);
   return ;
}

static_inline uint8_t Util_edge(Util__ctx_type_2 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

static_inline fix16_t Util_cubic_clipper(fix16_t x){
   if(x <= -0xaaaa /* -0.666667 */){
      return -0xaaaa /* -0.666667 */;
   }
   else
   {
      if(x >= 0xaaaa /* 0.666667 */){
         return 0xaaaa /* 0.666667 */;
      }
      else
      {
         return (x + fix_mul(fix_mul(fix_mul(-0x5555 /* -0.333333 */,x),x),x));
      }
   }
};

typedef struct Util__ctx_type_4 {
   fix16_t pre_x;
} Util__ctx_type_4;

typedef Util__ctx_type_4 Util_change_type;

static_inline void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Util_change_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

static_inline uint8_t Util_change(Util__ctx_type_4 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

typedef struct Util__ctx_type_5 {
   fix16_t x;
} Util__ctx_type_5;

typedef Util__ctx_type_5 Util_smooth_type;

static_inline void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Util_smooth_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

static_inline fix16_t Util_smooth(Util__ctx_type_5 &_ctx, fix16_t input, fix16_t coeff){
   _ctx.x = (_ctx.x + fix_mul(coeff,(input + (- _ctx.x))));
   return _ctx.x;
}

static_inline fix16_t Util_velocityToLevel(int velocity){
   velocity = int_clip(velocity,0,127);
   return fix_mul(0x204 /* 0.007874 */,int_to_fix(velocity));
}

static_inline void Buffer_buffer(fix16_t (&oBuff)[128]){
}

void Buffer_buffer_large(fix16_t (&oBuff)[2048]);

static_inline int Buffer_bufferSize(){
   return 128;
};

static_inline int Buffer_bufferLargeSize(){
   return 2048;
};

typedef struct SVF__ctx_type_0 {
   fix16_t z2;
   fix16_t z1;
   fix16_t targetFreq;
   int sel;
   fix16_t rsize;
   fix16_t q;
   fix16_t inv_den;
   fix16_t g_table[1024];
   fix16_t gRatio;
   fix16_t g;
   fix16_t fs_nyquist;
   fix16_t fs;
   fix16_t freq;
   Util__ctx_type_5 _inst955;
   Util__ctx_type_4 _inst173b;
   Util__ctx_type_5 _inst1655;
   Util__ctx_type_4 _inst103b;
   fix16_t R;
} SVF__ctx_type_0;

typedef SVF__ctx_type_0 SVF_updateGTable_type;

void SVF__ctx_type_0_init(SVF__ctx_type_0 &_output_);

static_inline void SVF_updateGTable_init(SVF__ctx_type_0 &_output_){
   SVF__ctx_type_0_init(_output_);
   return ;
}

void SVF_updateGTable(SVF__ctx_type_0 &_ctx);

typedef SVF__ctx_type_0 SVF_updateG_type;

static_inline void SVF_updateG_init(SVF__ctx_type_0 &_output_){
   SVF__ctx_type_0_init(_output_);
   return ;
}

void SVF_updateG(SVF__ctx_type_0 &_ctx);

typedef SVF__ctx_type_0 SVF_updateCoeffs_type;

static_inline void SVF_updateCoeffs_init(SVF__ctx_type_0 &_output_){
   SVF__ctx_type_0_init(_output_);
   return ;
}

static_inline void SVF_updateCoeffs(SVF__ctx_type_0 &_ctx){
   _ctx.R = fix_div(0x10000 /* 1.000000 */,((0x0 /* 0.000000 */ + _ctx.q) << 1));
   _ctx.inv_den = fix_div(0x10000 /* 1.000000 */,(0x10000 /* 1.000000 */ + fix_mul(_ctx.g,_ctx.g) + (fix_mul(_ctx.R,_ctx.g) << 1)));
}

typedef SVF__ctx_type_0 SVF_setFreq_type;

static_inline void SVF_setFreq_init(SVF__ctx_type_0 &_output_){
   SVF__ctx_type_0_init(_output_);
   return ;
}

static_inline void SVF_setFreq(SVF__ctx_type_0 &_ctx, fix16_t newFreq){
   _ctx.targetFreq = fix_clip(newFreq,0x0 /* 0.000000 */,_ctx.fs_nyquist);
   SVF_updateG(_ctx);
   SVF_updateCoeffs(_ctx);
}

typedef SVF__ctx_type_0 SVF_setQ_type;

static_inline void SVF_setQ_init(SVF__ctx_type_0 &_output_){
   SVF__ctx_type_0_init(_output_);
   return ;
}

static_inline void SVF_setQ(SVF__ctx_type_0 &_ctx, fix16_t newQ){
   if(newQ >= 0x0 /* 0.000000 */){
      _ctx.q = newQ;
   }
   SVF_updateCoeffs(_ctx);
}

typedef SVF__ctx_type_0 SVF_setType_type;

static_inline void SVF_setType_init(SVF__ctx_type_0 &_output_){
   SVF__ctx_type_0_init(_output_);
   return ;
}

static_inline void SVF_setType(SVF__ctx_type_0 &_ctx, int newSel){
   _ctx.sel = int_clip(newSel,0,4);
};

typedef SVF__ctx_type_0 SVF_process_type;

static_inline void SVF_process_init(SVF__ctx_type_0 &_output_){
   SVF__ctx_type_0_init(_output_);
   return ;
}

fix16_t SVF_process(SVF__ctx_type_0 &_ctx, fix16_t input);

typedef SVF__ctx_type_0 SVF_process_bufferTo_type;

static_inline void SVF_process_bufferTo_init(SVF__ctx_type_0 &_output_){
   SVF__ctx_type_0_init(_output_);
   return ;
}

void SVF_process_bufferTo(SVF__ctx_type_0 &_ctx, int nb, fix16_t (&input)[128], fix16_t (&oBuffer)[128]);

typedef SVF__ctx_type_0 SVF_setSamplerate_type;

static_inline void SVF_setSamplerate_init(SVF__ctx_type_0 &_output_){
   SVF__ctx_type_0_init(_output_);
   return ;
}

void SVF_setSamplerate(SVF__ctx_type_0 &_ctx, fix16_t newFs);

typedef SVF__ctx_type_0 SVF_default_type;

static_inline void SVF_default_init(SVF__ctx_type_0 &_output_){
   SVF__ctx_type_0_init(_output_);
   return ;
}

static_inline void SVF_default(SVF__ctx_type_0 &_ctx){
   _ctx.rsize = 0x4000000 /* 1024.000000 */;
   _ctx.freq = 0x0 /* 0.000000 */;
   _ctx.q = 0x1999 /* 0.100000 */;
   SVF_setSamplerate(_ctx,0x2c1999 /* 44.100000 */);
}

typedef struct SVF__ctx_type_1 {
   SVF__ctx_type_0 _inst1f;
} SVF__ctx_type_1;

typedef SVF__ctx_type_1 SVF_dummy_type;

static_inline void SVF__ctx_type_1_init(SVF__ctx_type_1 &_output_){
   SVF__ctx_type_1 _ctx;
   SVF__ctx_type_0_init(_ctx._inst1f);
   _output_ = _ctx;
   return ;
}

static_inline void SVF_dummy_init(SVF__ctx_type_1 &_output_){
   SVF__ctx_type_1_init(_output_);
   return ;
}

static_inline void SVF_dummy(SVF__ctx_type_1 &_ctx){
   fix16_t buff[128];
   Buffer_buffer(buff);
   SVF_process_bufferTo(_ctx._inst1f,0,buff,buff);
}

typedef struct Processor_svf__ctx_type_0 {
   SVF__ctx_type_0 svf;
   fix16_t qval;
   fix16_t fs;
   fix16_t freq;
   Util__ctx_type_4 _inst93b;
   Util__ctx_type_4 _inst63b;
   Util__ctx_type_4 _inst23b;
} Processor_svf__ctx_type_0;

typedef Processor_svf__ctx_type_0 Processor_svf_process_type;

void Processor_svf__ctx_type_0_init(Processor_svf__ctx_type_0 &_output_);

static_inline void Processor_svf_process_init(Processor_svf__ctx_type_0 &_output_){
   Processor_svf__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t Processor_svf_process(Processor_svf__ctx_type_0 &_ctx, fix16_t in){
   return SVF_process(_ctx.svf,in);
};

typedef Processor_svf__ctx_type_0 Processor_svf_applyFreq_type;

static_inline void Processor_svf_applyFreq_init(Processor_svf__ctx_type_0 &_output_){
   Processor_svf__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_svf_applyFreq(Processor_svf__ctx_type_0 &_ctx){
   SVF_setFreq(_ctx.svf,_ctx.freq);
};

typedef Processor_svf__ctx_type_0 Processor_svf_setFreq_type;

static_inline void Processor_svf_setFreq_init(Processor_svf__ctx_type_0 &_output_){
   Processor_svf__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_svf_setFreq(Processor_svf__ctx_type_0 &_ctx, fix16_t newFreq, uint8_t force){
   if(Util_change(_ctx._inst23b,newFreq) || force){
      _ctx.freq = newFreq;
      Processor_svf_applyFreq(_ctx);
   }
};

typedef Processor_svf__ctx_type_0 Processor_svf_applyQ_type;

static_inline void Processor_svf_applyQ_init(Processor_svf__ctx_type_0 &_output_){
   Processor_svf__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_svf_applyQ(Processor_svf__ctx_type_0 &_ctx){
   SVF_setQ(_ctx.svf,_ctx.qval);
};

typedef Processor_svf__ctx_type_0 Processor_svf_setQ_type;

static_inline void Processor_svf_setQ_init(Processor_svf__ctx_type_0 &_output_){
   Processor_svf__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_svf_setQ(Processor_svf__ctx_type_0 &_ctx, fix16_t newQ, uint8_t force){
   if(Util_change(_ctx._inst63b,newQ) || force){
      _ctx.qval = newQ;
      Processor_svf_applyQ(_ctx);
   }
};

typedef Processor_svf__ctx_type_0 Processor_svf_setType_type;

static_inline void Processor_svf_setType_init(Processor_svf__ctx_type_0 &_output_){
   Processor_svf__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_svf_setType(Processor_svf__ctx_type_0 &_ctx, fix16_t newType, uint8_t force){
   if(Util_change(_ctx._inst93b,newType) || force){
      SVF_setType(_ctx.svf,fix_to_int(newType));
   }
};

typedef Processor_svf__ctx_type_0 Processor_svf_setSamplerate_type;

static_inline void Processor_svf_setSamplerate_init(Processor_svf__ctx_type_0 &_output_){
   Processor_svf__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_svf_setSamplerate(Processor_svf__ctx_type_0 &_ctx, fix16_t newFs){
   if((newFs > 0x0 /* 0.000000 */) && (newFs != _ctx.fs)){
      _ctx.fs = newFs;
      SVF_setSamplerate(_ctx.svf,_ctx.fs);
   }
};

typedef Processor_svf__ctx_type_0 Processor_svf_default_type;

static_inline void Processor_svf_default_init(Processor_svf__ctx_type_0 &_output_){
   Processor_svf__ctx_type_0_init(_output_);
   return ;
}

void Processor_svf_default(Processor_svf__ctx_type_0 &_ctx);

typedef struct CombFB__ctx_type_0 {
   fix16_t scale;
   int pos;
   fix16_t fs;
   int delay;
   fix16_t decay;
   fix16_t buffer[2048];
} CombFB__ctx_type_0;

typedef CombFB__ctx_type_0 CombFB_process_type;

void CombFB__ctx_type_0_init(CombFB__ctx_type_0 &_output_);

static_inline void CombFB_process_init(CombFB__ctx_type_0 &_output_){
   CombFB__ctx_type_0_init(_output_);
   return ;
}

fix16_t CombFB_process(CombFB__ctx_type_0 &_ctx, fix16_t sample);

typedef CombFB__ctx_type_0 CombFB_process_bufferTo_type;

static_inline void CombFB_process_bufferTo_init(CombFB__ctx_type_0 &_output_){
   CombFB__ctx_type_0_init(_output_);
   return ;
}

void CombFB_process_bufferTo(CombFB__ctx_type_0 &_ctx, int nb, fix16_t (&input)[128], fix16_t (&oBuffer)[128]);

typedef CombFB__ctx_type_0 CombFB_setDecay_type;

static_inline void CombFB_setDecay_init(CombFB__ctx_type_0 &_output_){
   CombFB__ctx_type_0_init(_output_);
   return ;
}

static_inline void CombFB_setDecay(CombFB__ctx_type_0 &_ctx, fix16_t newDecay){
   _ctx.decay = fix_clip(newDecay,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   _ctx.scale = fix_div(0x10000 /* 1.000000 */,(0x10000 /* 1.000000 */ + _ctx.decay));
}

typedef CombFB__ctx_type_0 CombFB_getMaxDelay_type;

static_inline void CombFB_getMaxDelay_init(CombFB__ctx_type_0 &_output_){
   CombFB__ctx_type_0_init(_output_);
   return ;
}

static_inline int CombFB_getMaxDelay(CombFB__ctx_type_0 &_ctx){
   return 2048;
};

typedef CombFB__ctx_type_0 CombFB_getMaxDelayms_type;

static_inline void CombFB_getMaxDelayms_init(CombFB__ctx_type_0 &_output_){
   CombFB__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t CombFB_getMaxDelayms(CombFB__ctx_type_0 &_ctx){
   if(_ctx.fs <= 0x0 /* 0.000000 */){
      return 0x0 /* 0.000000 */;
   }
   return fix_div(0x8000000 /* 2048.000000 */,_ctx.fs);
}

typedef CombFB__ctx_type_0 CombFB_setDelay_type;

static_inline void CombFB_setDelay_init(CombFB__ctx_type_0 &_output_){
   CombFB__ctx_type_0_init(_output_);
   return ;
}

static_inline void CombFB_setDelay(CombFB__ctx_type_0 &_ctx, int newDelay){
   _ctx.delay = int_clip(newDelay,1,CombFB_getMaxDelay(_ctx));
   _ctx.pos = (_ctx.pos % _ctx.delay);
}

typedef CombFB__ctx_type_0 CombFB_setDelayms_type;

static_inline void CombFB_setDelayms_init(CombFB__ctx_type_0 &_output_){
   CombFB__ctx_type_0_init(_output_);
   return ;
}

static_inline void CombFB_setDelayms(CombFB__ctx_type_0 &_ctx, fix16_t delayms){
   CombFB_setDelay(_ctx,fix_to_int(fix_mul(_ctx.fs,delayms)));
};

typedef CombFB__ctx_type_0 CombFB_setSamplerate_type;

static_inline void CombFB_setSamplerate_init(CombFB__ctx_type_0 &_output_){
   CombFB__ctx_type_0_init(_output_);
   return ;
}

static_inline void CombFB_setSamplerate(CombFB__ctx_type_0 &_ctx, fix16_t newFs){
   if(newFs > 0x0 /* 0.000000 */){
      _ctx.fs = newFs;
   }
};

typedef CombFB__ctx_type_0 CombFB_default_type;

static_inline void CombFB_default_init(CombFB__ctx_type_0 &_output_){
   CombFB__ctx_type_0_init(_output_);
   return ;
}

static_inline void CombFB_default(CombFB__ctx_type_0 &_ctx){
   Buffer_buffer_large(_ctx.buffer);
   CombFB_setSamplerate(_ctx,0x2c1999 /* 44.100000 */);
   CombFB_setDelayms(_ctx,0x320000 /* 50.000000 */);
   CombFB_setDecay(_ctx,0x8000 /* 0.500000 */);
}

typedef struct CombFB__ctx_type_1 {
   CombFB__ctx_type_0 _inst13c;
} CombFB__ctx_type_1;

typedef CombFB__ctx_type_1 CombFB_dummy_type;

static_inline void CombFB__ctx_type_1_init(CombFB__ctx_type_1 &_output_){
   CombFB__ctx_type_1 _ctx;
   CombFB__ctx_type_0_init(_ctx._inst13c);
   _output_ = _ctx;
   return ;
}

static_inline void CombFB_dummy_init(CombFB__ctx_type_1 &_output_){
   CombFB__ctx_type_1_init(_output_);
   return ;
}

static_inline void CombFB_dummy(CombFB__ctx_type_1 &_ctx){
   fix16_t buff[128];
   Buffer_buffer(buff);
   CombFB_process_bufferTo(_ctx._inst13c,0,buff,buff);
}

typedef struct Allpass__ctx_type_0 {
   fix16_t scale;
   int pos;
   fix16_t fs;
   int delay;
   fix16_t decay;
   fix16_t buffer_allpassed[2048];
   fix16_t buffer[2048];
} Allpass__ctx_type_0;

typedef Allpass__ctx_type_0 Allpass_process_type;

void Allpass__ctx_type_0_init(Allpass__ctx_type_0 &_output_);

static_inline void Allpass_process_init(Allpass__ctx_type_0 &_output_){
   Allpass__ctx_type_0_init(_output_);
   return ;
}

fix16_t Allpass_process(Allpass__ctx_type_0 &_ctx, fix16_t sample);

typedef Allpass__ctx_type_0 Allpass_process_bufferTo_type;

static_inline void Allpass_process_bufferTo_init(Allpass__ctx_type_0 &_output_){
   Allpass__ctx_type_0_init(_output_);
   return ;
}

void Allpass_process_bufferTo(Allpass__ctx_type_0 &_ctx, int nb, fix16_t (&input)[128], fix16_t (&oBuffer)[128]);

typedef Allpass__ctx_type_0 Allpass_setDecay_type;

static_inline void Allpass_setDecay_init(Allpass__ctx_type_0 &_output_){
   Allpass__ctx_type_0_init(_output_);
   return ;
}

static_inline void Allpass_setDecay(Allpass__ctx_type_0 &_ctx, fix16_t newDecay){
   _ctx.decay = fix_clip(newDecay,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   _ctx.scale = fix_div(0x10000 /* 1.000000 */,(0x10000 /* 1.000000 */ + (_ctx.decay << 1)));
}

typedef Allpass__ctx_type_0 Allpass_getMaxDelay_type;

static_inline void Allpass_getMaxDelay_init(Allpass__ctx_type_0 &_output_){
   Allpass__ctx_type_0_init(_output_);
   return ;
}

static_inline int Allpass_getMaxDelay(Allpass__ctx_type_0 &_ctx){
   return 2048;
};

typedef Allpass__ctx_type_0 Allpass_getMaxDelayms_type;

static_inline void Allpass_getMaxDelayms_init(Allpass__ctx_type_0 &_output_){
   Allpass__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t Allpass_getMaxDelayms(Allpass__ctx_type_0 &_ctx){
   if(_ctx.fs <= 0x0 /* 0.000000 */){
      return 0x0 /* 0.000000 */;
   }
   return fix_div(0x8000000 /* 2048.000000 */,_ctx.fs);
}

typedef Allpass__ctx_type_0 Allpass_setDelay_type;

static_inline void Allpass_setDelay_init(Allpass__ctx_type_0 &_output_){
   Allpass__ctx_type_0_init(_output_);
   return ;
}

static_inline void Allpass_setDelay(Allpass__ctx_type_0 &_ctx, int newDelay){
   _ctx.delay = int_clip(newDelay,1,Allpass_getMaxDelay(_ctx));
   _ctx.pos = (_ctx.pos % _ctx.delay);
}

typedef Allpass__ctx_type_0 Allpass_setDelayms_type;

static_inline void Allpass_setDelayms_init(Allpass__ctx_type_0 &_output_){
   Allpass__ctx_type_0_init(_output_);
   return ;
}

static_inline void Allpass_setDelayms(Allpass__ctx_type_0 &_ctx, fix16_t delayms){
   Allpass_setDelay(_ctx,fix_to_int(fix_mul(_ctx.fs,delayms)));
};

typedef Allpass__ctx_type_0 Allpass_setSamplerate_type;

static_inline void Allpass_setSamplerate_init(Allpass__ctx_type_0 &_output_){
   Allpass__ctx_type_0_init(_output_);
   return ;
}

static_inline void Allpass_setSamplerate(Allpass__ctx_type_0 &_ctx, fix16_t newFs){
   if(newFs > 0x0 /* 0.000000 */){
      _ctx.fs = newFs;
   }
};

typedef Allpass__ctx_type_0 Allpass_default_type;

static_inline void Allpass_default_init(Allpass__ctx_type_0 &_output_){
   Allpass__ctx_type_0_init(_output_);
   return ;
}

void Allpass_default(Allpass__ctx_type_0 &_ctx);

typedef struct Allpass__ctx_type_1 {
   Allpass__ctx_type_0 _inst156;
} Allpass__ctx_type_1;

typedef Allpass__ctx_type_1 Allpass_dummy_type;

static_inline void Allpass__ctx_type_1_init(Allpass__ctx_type_1 &_output_){
   Allpass__ctx_type_1 _ctx;
   Allpass__ctx_type_0_init(_ctx._inst156);
   _output_ = _ctx;
   return ;
}

static_inline void Allpass_dummy_init(Allpass__ctx_type_1 &_output_){
   Allpass__ctx_type_1_init(_output_);
   return ;
}

static_inline void Allpass_dummy(Allpass__ctx_type_1 &_ctx){
   fix16_t buff[128];
   Buffer_buffer(buff);
   Allpass_process_bufferTo(_ctx._inst156,0,buff,buff);
}

typedef struct Reverb__ctx_type_0 {
   fix16_t reverbtime;
   fix16_t fs;
   int comb3delay;
   CombFB__ctx_type_0 comb3;
   int comb2delay;
   CombFB__ctx_type_0 comb2;
   int comb1delay;
   CombFB__ctx_type_0 comb1;
   int comb0delay;
   CombFB__ctx_type_0 comb0;
   fix16_t buffer_c3[128];
   fix16_t buffer_c2[128];
   fix16_t buffer_c1[128];
   fix16_t buffer_c0[128];
   fix16_t buffer_a1[128];
   fix16_t buffer_a0[128];
   Allpass__ctx_type_0 allpass1;
   Allpass__ctx_type_0 allpass0;
} Reverb__ctx_type_0;

typedef Reverb__ctx_type_0 Reverb_process_type;

void Reverb__ctx_type_0_init(Reverb__ctx_type_0 &_output_);

static_inline void Reverb_process_init(Reverb__ctx_type_0 &_output_){
   Reverb__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t Reverb_process(Reverb__ctx_type_0 &_ctx, fix16_t sample){
   fix16_t combs_filter;
   combs_filter = ((CombFB_process(_ctx.comb0,sample) + CombFB_process(_ctx.comb1,sample) + CombFB_process(_ctx.comb2,sample) + CombFB_process(_ctx.comb3,sample)) >> 2);
   return Allpass_process(_ctx.allpass1,Allpass_process(_ctx.allpass0,combs_filter));
}

typedef Reverb__ctx_type_0 Reverb_process_bufferTo_type;

static_inline void Reverb_process_bufferTo_init(Reverb__ctx_type_0 &_output_){
   Reverb__ctx_type_0_init(_output_);
   return ;
}

void Reverb_process_bufferTo(Reverb__ctx_type_0 &_ctx, int nb, fix16_t (&input)[128], fix16_t (&oBuffer)[128]);

typedef Reverb__ctx_type_0 Reverb_setSamplerate_type;

static_inline void Reverb_setSamplerate_init(Reverb__ctx_type_0 &_output_){
   Reverb__ctx_type_0_init(_output_);
   return ;
}

void Reverb_setSamplerate(Reverb__ctx_type_0 &_ctx, fix16_t newFs);

typedef Reverb__ctx_type_0 Reverb_setReverbTime_type;

static_inline void Reverb_setReverbTime_init(Reverb__ctx_type_0 &_output_){
   Reverb__ctx_type_0_init(_output_);
   return ;
}

void Reverb_setReverbTime(Reverb__ctx_type_0 &_ctx, fix16_t newReverbtime);

typedef Reverb__ctx_type_0 Reverb_setDelayms_type;

static_inline void Reverb_setDelayms_init(Reverb__ctx_type_0 &_output_){
   Reverb__ctx_type_0_init(_output_);
   return ;
}

void Reverb_setDelayms(Reverb__ctx_type_0 &_ctx, fix16_t delayms);

typedef Reverb__ctx_type_0 Reverb_default_type;

static_inline void Reverb_default_init(Reverb__ctx_type_0 &_output_){
   Reverb__ctx_type_0_init(_output_);
   return ;
}

void Reverb_default(Reverb__ctx_type_0 &_ctx);

typedef struct Reverb__ctx_type_1 {
   Reverb__ctx_type_0 _inst1f2;
} Reverb__ctx_type_1;

typedef Reverb__ctx_type_1 Reverb_dummy_type;

static_inline void Reverb__ctx_type_1_init(Reverb__ctx_type_1 &_output_){
   Reverb__ctx_type_1 _ctx;
   Reverb__ctx_type_0_init(_ctx._inst1f2);
   _output_ = _ctx;
   return ;
}

static_inline void Reverb_dummy_init(Reverb__ctx_type_1 &_output_){
   Reverb__ctx_type_1_init(_output_);
   return ;
}

static_inline void Reverb_dummy(Reverb__ctx_type_1 &_ctx){
   fix16_t buff[128];
   Buffer_buffer(buff);
   Reverb_process_bufferTo(_ctx._inst1f2,0,buff,buff);
}

static_inline fix16_t Saturator_tanh_table_raw_c0(int index){
   return Saturator_tanh_table_c0[index];
};

static_inline fix16_t Saturator_tanh_table_raw_c1(int index){
   return Saturator_tanh_table_c1[index];
};

static_inline fix16_t Saturator_tanh_table_raw_c2(int index){
   return Saturator_tanh_table_c2[index];
};

static_inline fix16_t Saturator_tanh_table(fix16_t x){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3fe000 /* 63.875000 */,(0x40000 /* 4.000000 */ + x))),0,511);
   return (fix_wrap_array(Saturator_tanh_table_c0)[index] + fix_mul(x,(fix_wrap_array(Saturator_tanh_table_c1)[index] + fix_mul(x,fix_wrap_array(Saturator_tanh_table_c2)[index]))));
}

fix16_t Saturator_tanh_wrapper(fix16_t x);

static_inline fix16_t Saturator_getMinCoeff(){
   return -0x3e80000 /* -1000.000000 */;
};

static_inline fix16_t Saturator_getMaxCoeff(){
   return 0x3e80000 /* 1000.000000 */;
};

typedef struct Saturator__ctx_type_7 {
   fix16_t threshopp;
   fix16_t threshinv;
   fix16_t thresh;
   fix16_t coeff;
} Saturator__ctx_type_7;

typedef Saturator__ctx_type_7 Saturator_process_type;

void Saturator__ctx_type_7_init(Saturator__ctx_type_7 &_output_);

static_inline void Saturator_process_init(Saturator__ctx_type_7 &_output_){
   Saturator__ctx_type_7_init(_output_);
   return ;
}

fix16_t Saturator_process(Saturator__ctx_type_7 &_ctx, fix16_t x);

typedef Saturator__ctx_type_7 Saturator_process_bufferTo_type;

static_inline void Saturator_process_bufferTo_init(Saturator__ctx_type_7 &_output_){
   Saturator__ctx_type_7_init(_output_);
   return ;
}

void Saturator_process_bufferTo(Saturator__ctx_type_7 &_ctx, int nb, fix16_t (&input)[128], fix16_t (&oBuffer)[128]);

typedef Saturator__ctx_type_7 Saturator_setThreshold_type;

static_inline void Saturator_setThreshold_init(Saturator__ctx_type_7 &_output_){
   Saturator__ctx_type_7_init(_output_);
   return ;
}

static_inline void Saturator_setThreshold(Saturator__ctx_type_7 &_ctx, fix16_t t){
   _ctx.thresh = fix_clip(t,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   _ctx.threshopp = (0x10000 /* 1.000000 */ + (- _ctx.thresh));
   if(_ctx.thresh < 0x10000 /* 1.000000 */){
      _ctx.threshinv = fix_div(0x10000 /* 1.000000 */,(0x10000 /* 1.000000 */ + (- _ctx.thresh)));
   }
}

typedef Saturator__ctx_type_7 Saturator_setCoeff_type;

static_inline void Saturator_setCoeff_init(Saturator__ctx_type_7 &_output_){
   Saturator__ctx_type_7_init(_output_);
   return ;
}

static_inline void Saturator_setCoeff(Saturator__ctx_type_7 &_ctx, fix16_t c){
   _ctx.coeff = fix_clip(c,-0x3e80000 /* -1000.000000 */,0x3e80000 /* 1000.000000 */);
};

typedef Saturator__ctx_type_7 Saturator_default_type;

static_inline void Saturator_default_init(Saturator__ctx_type_7 &_output_){
   Saturator__ctx_type_7_init(_output_);
   return ;
}

static_inline void Saturator_default(Saturator__ctx_type_7 &_ctx){
   Saturator_setCoeff(_ctx,0x10000 /* 1.000000 */);
   Saturator_setThreshold(_ctx,0xcccc /* 0.800000 */);
}

typedef struct Saturator__ctx_type_8 {
   Saturator__ctx_type_7 _inst15c;
} Saturator__ctx_type_8;

typedef Saturator__ctx_type_8 Saturator_dummy_type;

static_inline void Saturator__ctx_type_8_init(Saturator__ctx_type_8 &_output_){
   Saturator__ctx_type_8 _ctx;
   Saturator__ctx_type_7_init(_ctx._inst15c);
   _output_ = _ctx;
   return ;
}

static_inline void Saturator_dummy_init(Saturator__ctx_type_8 &_output_){
   Saturator__ctx_type_8_init(_output_);
   return ;
}

static_inline void Saturator_dummy(Saturator__ctx_type_8 &_ctx){
   fix16_t buff[128];
   Buffer_buffer(buff);
   Saturator_process_bufferTo(_ctx._inst15c,0,buff,buff);
}

typedef struct Processor_saturator__ctx_type_0 {
   Saturator__ctx_type_7 clippy;
   Util__ctx_type_4 _inst43b;
   Util__ctx_type_4 _inst13b;
} Processor_saturator__ctx_type_0;

typedef Processor_saturator__ctx_type_0 Processor_saturator_process_type;

void Processor_saturator__ctx_type_0_init(Processor_saturator__ctx_type_0 &_output_);

static_inline void Processor_saturator_process_init(Processor_saturator__ctx_type_0 &_output_){
   Processor_saturator__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t Processor_saturator_process(Processor_saturator__ctx_type_0 &_ctx, fix16_t in){
   return Saturator_process(_ctx.clippy,in);
};

typedef Processor_saturator__ctx_type_0 Processor_saturator_setThreshold_type;

static_inline void Processor_saturator_setThreshold_init(Processor_saturator__ctx_type_0 &_output_){
   Processor_saturator__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_saturator_setThreshold(Processor_saturator__ctx_type_0 &_ctx, fix16_t value, uint8_t force){
   if(Util_change(_ctx._inst13b,value) || force){
      Saturator_setThreshold(_ctx.clippy,value);
   }
};

typedef Processor_saturator__ctx_type_0 Processor_saturator_setCoeff_type;

static_inline void Processor_saturator_setCoeff_init(Processor_saturator__ctx_type_0 &_output_){
   Processor_saturator__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_saturator_setCoeff(Processor_saturator__ctx_type_0 &_ctx, fix16_t value, uint8_t force){
   if(Util_change(_ctx._inst43b,value) || force){
      Saturator_setCoeff(_ctx.clippy,value);
   }
};

typedef Processor_saturator__ctx_type_0 Processor_saturator_default_type;

static_inline void Processor_saturator_default_init(Processor_saturator__ctx_type_0 &_output_){
   Processor_saturator__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_saturator_default(Processor_saturator__ctx_type_0 &_ctx){
   Saturator_default(_ctx.clippy);
};

static_inline fix16_t Processor_saturator_getMinCoeff(){
   return -0x3e80000 /* -1000.000000 */;
};

static_inline fix16_t Processor_saturator_getMaxCoeff(){
   return 0x3e80000 /* 1000.000000 */;
};

typedef struct Processor_reverb__ctx_type_0 {
   fix16_t reverbTime;
   Reverb__ctx_type_0 reverb;
   fix16_t fs;
   fix16_t delayms;
   Util__ctx_type_4 _inst63b;
   Util__ctx_type_4 _inst23b;
} Processor_reverb__ctx_type_0;

typedef Processor_reverb__ctx_type_0 Processor_reverb_process_type;

void Processor_reverb__ctx_type_0_init(Processor_reverb__ctx_type_0 &_output_);

static_inline void Processor_reverb_process_init(Processor_reverb__ctx_type_0 &_output_){
   Processor_reverb__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t Processor_reverb_process(Processor_reverb__ctx_type_0 &_ctx, fix16_t in){
   return Reverb_process(_ctx.reverb,in);
};

typedef Processor_reverb__ctx_type_0 Processor_reverb_applyDelay_type;

static_inline void Processor_reverb_applyDelay_init(Processor_reverb__ctx_type_0 &_output_){
   Processor_reverb__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_reverb_applyDelay(Processor_reverb__ctx_type_0 &_ctx){
   Reverb_setDelayms(_ctx.reverb,_ctx.delayms);
};

typedef Processor_reverb__ctx_type_0 Processor_reverb_setDelay_type;

static_inline void Processor_reverb_setDelay_init(Processor_reverb__ctx_type_0 &_output_){
   Processor_reverb__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_reverb_setDelay(Processor_reverb__ctx_type_0 &_ctx, fix16_t newDelay, uint8_t force){
   if(Util_change(_ctx._inst23b,newDelay) || force){
      _ctx.delayms = newDelay;
      Processor_reverb_applyDelay(_ctx);
   }
};

typedef Processor_reverb__ctx_type_0 Processor_reverb_applyReverb_type;

static_inline void Processor_reverb_applyReverb_init(Processor_reverb__ctx_type_0 &_output_){
   Processor_reverb__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_reverb_applyReverb(Processor_reverb__ctx_type_0 &_ctx){
   Reverb_setReverbTime(_ctx.reverb,_ctx.reverbTime);
};

typedef Processor_reverb__ctx_type_0 Processor_reverb_setReverb_type;

static_inline void Processor_reverb_setReverb_init(Processor_reverb__ctx_type_0 &_output_){
   Processor_reverb__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_reverb_setReverb(Processor_reverb__ctx_type_0 &_ctx, fix16_t newReverb, uint8_t force){
   if(Util_change(_ctx._inst63b,newReverb) || force){
      _ctx.reverbTime = newReverb;
      Processor_reverb_applyReverb(_ctx);
   }
};

typedef Processor_reverb__ctx_type_0 Processor_reverb_updateConfig_type;

static_inline void Processor_reverb_updateConfig_init(Processor_reverb__ctx_type_0 &_output_){
   Processor_reverb__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_reverb_updateConfig(Processor_reverb__ctx_type_0 &_ctx){
   Processor_reverb_applyDelay(_ctx);
   Processor_reverb_applyReverb(_ctx);
}

typedef Processor_reverb__ctx_type_0 Processor_reverb_setSamplerate_type;

static_inline void Processor_reverb_setSamplerate_init(Processor_reverb__ctx_type_0 &_output_){
   Processor_reverb__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_reverb_setSamplerate(Processor_reverb__ctx_type_0 &_ctx, fix16_t newFs){
   if((newFs > 0x0 /* 0.000000 */) && (newFs != _ctx.fs)){
      _ctx.fs = newFs;
      Reverb_setSamplerate(_ctx.reverb,_ctx.fs);
      Processor_reverb_updateConfig(_ctx);
   }
};

typedef Processor_reverb__ctx_type_0 Processor_reverb_default_type;

static_inline void Processor_reverb_default_init(Processor_reverb__ctx_type_0 &_output_){
   Processor_reverb__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_reverb_default(Processor_reverb__ctx_type_0 &_ctx){
   Reverb_default(_ctx.reverb);
   Processor_reverb_setReverb(_ctx,0xa0000 /* 10.000000 */,true);
   Processor_reverb_setDelay(_ctx,0x320000 /* 50.000000 */,true);
   Processor_reverb_setSamplerate(_ctx,0x2c1999 /* 44.100000 */);
}



#endif // ENGINE_EFFECTS_H
