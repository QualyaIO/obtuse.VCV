
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "engine_effects.h"

void Buffer_buffer_large(fix16_t (&oBuff)[2048]){
   int i;
   i = 0;
   while(i < 2048){
      oBuff[i] = 0x0 /* 0.000000 */;
      i = (1 + i);
   }
}

void SVF__ctx_type_0_init(SVF__ctx_type_0 &_output_){
   SVF__ctx_type_0 _ctx;
   _ctx.z2 = 0x0 /* 0.000000 */;
   _ctx.z1 = 0x0 /* 0.000000 */;
   _ctx.targetFreq = 0x0 /* 0.000000 */;
   _ctx.sel = 0;
   _ctx.rsize = 0x0 /* 0.000000 */;
   _ctx.q = 0x0 /* 0.000000 */;
   _ctx.inv_den = 0x0 /* 0.000000 */;
   ;
   _ctx.gRatio = 0x0 /* 0.000000 */;
   _ctx.g = 0x0 /* 0.000000 */;
   _ctx.fs_nyquist = 0x0 /* 0.000000 */;
   _ctx.fs = 0x0 /* 0.000000 */;
   _ctx.freq = 0x0 /* 0.000000 */;
   Util__ctx_type_4_init(_ctx._inst955);
   Util__ctx_type_3_init(_ctx._inst173b);
   Util__ctx_type_4_init(_ctx._inst1655);
   Util__ctx_type_3_init(_ctx._inst103b);
   _ctx.R = 0x0 /* 0.000000 */;
   SVF_default(_ctx);
   _output_ = _ctx;
   return ;
}

void SVF_updateGTable(SVF__ctx_type_0 &_ctx){
   fix16_t wd;
   fix16_t T;
   fix16_t wa;
   fix16_t fi;
   int i;
   i = 0;
   while(i < 1024){
      fi = fix_div(fix_mul(_ctx.fs_nyquist,int_to_fix(i)),_ctx.rsize);
      wd = fix_mul(0x6487e /* 6.283185 */,fi);
      T = fix_div(0x10000 /* 1.000000 */,_ctx.fs);
      wa = fix_mul(fix_tan((fix_mul(T,wd) >> 1)),fix_div(0x20000 /* 2.000000 */,T));
      _ctx.g_table[i] = (fix_mul(T,wa) >> 1);
      i = (1 + i);
   }
}

void SVF_updateG(SVF__ctx_type_0 &_ctx){
   _ctx.freq = fix_clip(_ctx.freq,0x0 /* 0.000000 */,_ctx.fs_nyquist);
   fix16_t idx;
   idx = fix_mul(_ctx.freq,_ctx.gRatio);
   int iIdx;
   iIdx = fix_to_int(idx);
   if(iIdx < 1023){
      _ctx.g = (_ctx.g_table[iIdx] + fix_mul((idx % 0x10000 /* 1.000000 */),(_ctx.g_table[(1 + iIdx)] + (- _ctx.g_table[iIdx]))));
   }
   else
   {
      _ctx.g = _ctx.g_table[1023];
   }
}

fix16_t SVF_process(SVF__ctx_type_0 &_ctx, fix16_t input){
   _ctx.freq = Util_smooth(_ctx._inst955,_ctx.targetFreq,0x1999 /* 0.100000 */);
   if(Util_change(_ctx._inst103b,_ctx.freq)){
      SVF_updateG(_ctx);
      SVF_updateCoeffs(_ctx);
   }
   fix16_t high;
   high = fix_mul(_ctx.inv_den,(input + (- _ctx.z2) + (- fix_mul(_ctx.z1,(_ctx.g + (_ctx.R << 1))))));
   fix16_t band;
   band = (_ctx.z1 + fix_mul(_ctx.g,high));
   fix16_t low;
   low = (_ctx.z2 + fix_mul(_ctx.g,band));
   _ctx.z1 = (band + fix_mul(_ctx.g,high));
   _ctx.z2 = (low + fix_mul(_ctx.g,band));
   fix16_t output;
   switch(_ctx.sel) {
      case 1:
         output = low;
      break;
      case 2:
         output = high;
      break;
      case 3:
         output = band;
      break;
      case 4:
         output = (high + low);
      break;
    default: 
      output = input;
   }
   return output;
}

void SVF_process_bufferTo(SVF__ctx_type_0 &_ctx, int nb, fix16_t (&input)[256], fix16_t (&oBuffer)[256]){
   int min_nb;
   min_nb = 256;
   if(256 < min_nb){
      min_nb = 256;
   }
   nb = int_clip(nb,0,min_nb);
   if(nb == 0){
      nb = min_nb;
   }
   int i;
   i = 0;
   while(i < nb){
      _ctx.freq = Util_smooth(_ctx._inst1655,_ctx.targetFreq,0x1999 /* 0.100000 */);
      if(Util_change(_ctx._inst173b,_ctx.freq)){
         SVF_updateG(_ctx);
         SVF_updateCoeffs(_ctx);
      }
      fix16_t high;
      high = fix_mul(_ctx.inv_den,(input[i] + (- _ctx.z2) + (- fix_mul(_ctx.z1,(_ctx.g + (_ctx.R << 1))))));
      fix16_t band;
      band = (_ctx.z1 + fix_mul(_ctx.g,high));
      fix16_t low;
      low = (_ctx.z2 + fix_mul(_ctx.g,band));
      _ctx.z1 = (band + fix_mul(_ctx.g,high));
      _ctx.z2 = (low + fix_mul(_ctx.g,band));
      switch(_ctx.sel) {
         case 1:
            oBuffer[i] = low;
         break;
         case 2:
            oBuffer[i] = high;
         break;
         case 3:
            oBuffer[i] = band;
         break;
         case 4:
            oBuffer[i] = (high + low);
         break;
       default: 
         oBuffer[i] = input[i];
      }
      i = (1 + i);
   }
}

void SVF_setSamplerate(SVF__ctx_type_0 &_ctx, fix16_t newFs){
   if(newFs > 0x0 /* 0.000000 */){
      _ctx.fs = newFs;
      _ctx.fs_nyquist = fix_mul(0x7333 /* 0.450000 */,_ctx.fs);
      _ctx.gRatio = fix_div(_ctx.rsize,_ctx.fs_nyquist);
      SVF_updateGTable(_ctx);
      SVF_updateG(_ctx);
      SVF_updateCoeffs(_ctx);
   }
}

void Processor_svf__ctx_type_0_init(Processor_svf__ctx_type_0 &_output_){
   Processor_svf__ctx_type_0 _ctx;
   SVF__ctx_type_0_init(_ctx.svf);
   _ctx.qval = 0x0 /* 0.000000 */;
   _ctx.fs = 0x0 /* 0.000000 */;
   _ctx.freq = 0x0 /* 0.000000 */;
   Util__ctx_type_3_init(_ctx._inst93b);
   Util__ctx_type_3_init(_ctx._inst63b);
   Util__ctx_type_3_init(_ctx._inst23b);
   Processor_svf_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Processor_svf_default(Processor_svf__ctx_type_0 &_ctx){
   SVF_default(_ctx.svf);
   Processor_svf_setFreq(_ctx,0x50000 /* 5.000000 */,true);
   Processor_svf_setQ(_ctx,0x0 /* 0.000000 */,true);
   Processor_svf_setType(_ctx,0x10000 /* 1.000000 */,true);
   Processor_svf_setSamplerate(_ctx,0x2c1999 /* 44.100000 */);
}

void CombFB__ctx_type_0_init(CombFB__ctx_type_0 &_output_){
   CombFB__ctx_type_0 _ctx;
   _ctx.scale = 0x0 /* 0.000000 */;
   _ctx.pos = 0;
   _ctx.fs = 0x0 /* 0.000000 */;
   _ctx.delay = 0;
   _ctx.decay = 0x0 /* 0.000000 */;
   ;
   CombFB_default(_ctx);
   _output_ = _ctx;
   return ;
}

fix16_t CombFB_process(CombFB__ctx_type_0 &_ctx, fix16_t sample){
   fix16_t out;
   out = (sample + fix_mul(_ctx.decay,_ctx.buffer[_ctx.pos]));
   _ctx.buffer[_ctx.pos] = out;
   _ctx.pos = (1 + _ctx.pos);
   _ctx.pos = (_ctx.pos % _ctx.delay);
   return fix_mul(_ctx.scale,out);
}

void CombFB_process_bufferTo(CombFB__ctx_type_0 &_ctx, int nb, fix16_t (&input)[256], fix16_t (&oBuffer)[256]){
   nb = int_clip(nb,0,256);
   if(nb == 0){
      nb = 256;
   }
   fix16_t out;
   int i;
   i = 0;
   while(i < nb){
      out = (input[i] + fix_mul(_ctx.decay,_ctx.buffer[_ctx.pos]));
      _ctx.buffer[_ctx.pos] = out;
      oBuffer[i] = fix_mul(_ctx.scale,out);
      _ctx.pos = (1 + _ctx.pos);
      _ctx.pos = (_ctx.pos % _ctx.delay);
      i = (1 + i);
   }
}

void Allpass__ctx_type_0_init(Allpass__ctx_type_0 &_output_){
   Allpass__ctx_type_0 _ctx;
   _ctx.scale = 0x0 /* 0.000000 */;
   _ctx.pos = 0;
   _ctx.fs = 0x0 /* 0.000000 */;
   _ctx.delay = 0;
   _ctx.decay = 0x0 /* 0.000000 */;
   ;
   ;
   Allpass_default(_ctx);
   _output_ = _ctx;
   return ;
}

fix16_t Allpass_process(Allpass__ctx_type_0 &_ctx, fix16_t sample){
   fix16_t out;
   out = (_ctx.buffer[_ctx.pos] + fix_mul(_ctx.decay,(sample + (- _ctx.buffer_allpassed[_ctx.pos]))));
   _ctx.buffer[_ctx.pos] = sample;
   _ctx.buffer_allpassed[_ctx.pos] = out;
   _ctx.pos = (1 + _ctx.pos);
   _ctx.pos = (_ctx.pos % _ctx.delay);
   return fix_mul(_ctx.scale,out);
}

void Allpass_process_bufferTo(Allpass__ctx_type_0 &_ctx, int nb, fix16_t (&input)[256], fix16_t (&oBuffer)[256]){
   nb = int_clip(nb,0,256);
   if(nb == 0){
      nb = 256;
   }
   fix16_t out;
   int i;
   i = 0;
   while(i < nb){
      out = (_ctx.buffer[_ctx.pos] + fix_mul(_ctx.decay,(input[i] + (- _ctx.buffer_allpassed[_ctx.pos]))));
      _ctx.buffer[_ctx.pos] = input[i];
      _ctx.buffer_allpassed[_ctx.pos] = out;
      oBuffer[i] = fix_mul(_ctx.scale,out);
      _ctx.pos = (1 + _ctx.pos);
      _ctx.pos = (_ctx.pos % _ctx.delay);
      i = (1 + i);
   }
}

void Allpass_default(Allpass__ctx_type_0 &_ctx){
   Buffer_buffer_large(_ctx.buffer);
   Buffer_buffer_large(_ctx.buffer_allpassed);
   Allpass_setSamplerate(_ctx,0x2c1999 /* 44.100000 */);
   Allpass_setDelayms(_ctx,0x320000 /* 50.000000 */);
   Allpass_setDecay(_ctx,0x8000 /* 0.500000 */);
}

void Reverb__ctx_type_0_init(Reverb__ctx_type_0 &_output_){
   Reverb__ctx_type_0 _ctx;
   _ctx.reverbtime = 0x0 /* 0.000000 */;
   _ctx.fs = 0x0 /* 0.000000 */;
   _ctx.comb3delay = 0;
   CombFB__ctx_type_0_init(_ctx.comb3);
   _ctx.comb2delay = 0;
   CombFB__ctx_type_0_init(_ctx.comb2);
   _ctx.comb1delay = 0;
   CombFB__ctx_type_0_init(_ctx.comb1);
   _ctx.comb0delay = 0;
   CombFB__ctx_type_0_init(_ctx.comb0);
   fix_init_array(256,0x0 /* 0.000000 */,_ctx.buffer_c3);
   fix_init_array(256,0x0 /* 0.000000 */,_ctx.buffer_c2);
   fix_init_array(256,0x0 /* 0.000000 */,_ctx.buffer_c1);
   fix_init_array(256,0x0 /* 0.000000 */,_ctx.buffer_c0);
   fix_init_array(256,0x0 /* 0.000000 */,_ctx.buffer_a1);
   fix_init_array(256,0x0 /* 0.000000 */,_ctx.buffer_a0);
   Allpass__ctx_type_0_init(_ctx.allpass1);
   Allpass__ctx_type_0_init(_ctx.allpass0);
   Reverb_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Reverb_process_bufferTo(Reverb__ctx_type_0 &_ctx, int nb, fix16_t (&input)[256], fix16_t (&oBuffer)[256]){
   nb = int_clip(nb,0,256);
   if(nb == 0){
      nb = 256;
   }
   CombFB_process_bufferTo(_ctx.comb0,nb,input,_ctx.buffer_c0);
   CombFB_process_bufferTo(_ctx.comb1,nb,input,_ctx.buffer_c1);
   CombFB_process_bufferTo(_ctx.comb2,nb,input,_ctx.buffer_c2);
   CombFB_process_bufferTo(_ctx.comb3,nb,input,_ctx.buffer_c3);
   int i;
   i = 0;
   while(i < nb){
      oBuffer[i] = ((_ctx.buffer_c0[i] + _ctx.buffer_c1[i] + _ctx.buffer_c2[i] + _ctx.buffer_c3[i]) >> 2);
      i = (1 + i);
   }
   Allpass_process_bufferTo(_ctx.allpass0,nb,oBuffer,oBuffer);
   Allpass_process_bufferTo(_ctx.allpass1,nb,oBuffer,oBuffer);
}

void Reverb_setSamplerate(Reverb__ctx_type_0 &_ctx, fix16_t newFs){
   if(newFs > 0x0 /* 0.000000 */){
      _ctx.fs = newFs;
   }
   else
   {
      _ctx.fs = 0x2c1999 /* 44.100000 */;
   }
   CombFB_setSamplerate(_ctx.comb0,newFs);
   CombFB_setSamplerate(_ctx.comb1,newFs);
   CombFB_setSamplerate(_ctx.comb2,newFs);
   CombFB_setSamplerate(_ctx.comb3,newFs);
   Allpass_setSamplerate(_ctx.allpass0,newFs);
   Allpass_setSamplerate(_ctx.allpass1,newFs);
}

void Reverb_setReverbTime(Reverb__ctx_type_0 &_ctx, fix16_t newReverbtime){
   if(newReverbtime > 0x0 /* 0.000000 */){
      _ctx.reverbtime = newReverbtime;
      fix16_t log_base;
      log_base = 0x24d76 /* 2.302585 */;
      fix16_t comb0decay;
      comb0decay = fix_exp(fix_div(fix_mul(fix_mul(-0xc4 /* -0.003000 */,log_base),int_to_fix(_ctx.comb0delay)),fix_mul(_ctx.fs,_ctx.reverbtime)));
      fix16_t comb1decay;
      comb1decay = fix_exp(fix_div(fix_mul(fix_mul(-0xc4 /* -0.003000 */,log_base),int_to_fix(_ctx.comb1delay)),fix_mul(_ctx.fs,_ctx.reverbtime)));
      fix16_t comb2decay;
      comb2decay = fix_exp(fix_div(fix_mul(fix_mul(-0xc4 /* -0.003000 */,log_base),int_to_fix(_ctx.comb2delay)),fix_mul(_ctx.fs,_ctx.reverbtime)));
      fix16_t comb3decay;
      comb3decay = fix_exp(fix_div(fix_mul(fix_mul(-0xc4 /* -0.003000 */,log_base),int_to_fix(_ctx.comb3delay)),fix_mul(_ctx.fs,_ctx.reverbtime)));
      CombFB_setDecay(_ctx.comb0,comb0decay);
      CombFB_setDecay(_ctx.comb1,comb1decay);
      CombFB_setDecay(_ctx.comb2,comb2decay);
      CombFB_setDecay(_ctx.comb3,comb3decay);
   }
}

void Reverb_setDelayms(Reverb__ctx_type_0 &_ctx, fix16_t delayms){
   int delay;
   delay = fix_to_int(fix_mul(_ctx.fs,delayms));
   _ctx.comb3delay = int_clip(delay,1,CombFB_getMaxDelay(_ctx.comb3));
   _ctx.comb0delay = int_clip(((-345) + _ctx.comb3delay),1,CombFB_getMaxDelay(_ctx.comb0));
   _ctx.comb1delay = int_clip(((-222) + _ctx.comb3delay),1,CombFB_getMaxDelay(_ctx.comb1));
   _ctx.comb2delay = int_clip(((-112) + _ctx.comb3delay),1,CombFB_getMaxDelay(_ctx.comb2));
   CombFB_setDelay(_ctx.comb0,_ctx.comb0delay);
   CombFB_setDelay(_ctx.comb1,_ctx.comb1delay);
   CombFB_setDelay(_ctx.comb2,_ctx.comb2delay);
   CombFB_setDelay(_ctx.comb3,_ctx.comb3delay);
   Reverb_setReverbTime(_ctx,_ctx.reverbtime);
}

void Reverb_default(Reverb__ctx_type_0 &_ctx){
   Buffer_buffer(_ctx.buffer_c0);
   Buffer_buffer(_ctx.buffer_c1);
   Buffer_buffer(_ctx.buffer_c2);
   Buffer_buffer(_ctx.buffer_c3);
   Buffer_buffer(_ctx.buffer_a0);
   Buffer_buffer(_ctx.buffer_a1);
   Reverb_setSamplerate(_ctx,0x2c1999 /* 44.100000 */);
   _ctx.reverbtime = 0xa666 /* 0.650000 */;
   Reverb_setDelayms(_ctx,0x197700 /* 25.464853 */);
   Allpass_setDecay(_ctx.allpass0,0xb333 /* 0.700000 */);
   Allpass_setDecay(_ctx.allpass1,0xb333 /* 0.700000 */);
   Allpass_setDelay(_ctx.allpass0,125);
   Allpass_setDelay(_ctx.allpass1,42);
}

void Processor_reverb__ctx_type_0_init(Processor_reverb__ctx_type_0 &_output_){
   Processor_reverb__ctx_type_0 _ctx;
   _ctx.reverbTime = 0x0 /* 0.000000 */;
   Reverb__ctx_type_0_init(_ctx.reverb);
   _ctx.fs = 0x0 /* 0.000000 */;
   _ctx.delayms = 0x0 /* 0.000000 */;
   Util__ctx_type_3_init(_ctx._inst63b);
   Util__ctx_type_3_init(_ctx._inst23b);
   Processor_reverb_default(_ctx);
   _output_ = _ctx;
   return ;
}


