
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef ENGINE_SYNTHSAMPLERGLASSMARIMBASOFT_H
#define ENGINE_SYNTHSAMPLERGLASSMARIMBASOFT_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "engine_synthSamplerGlassMarimbaSoft.tables.h"

static_inline fix16_t synthSamplerGlassMarimbaSoft_Util_noteToFrequency(int note){
   return fix_mul(0x217 /* 0.008176 */,fix_exp(fix_mul(0xec9 /* 0.057762 */,int_to_fix(note))));
};

static_inline fix16_t synthSamplerGlassMarimbaSoft_Util_tonesToCoeff(fix16_t semitones){
   fix16_t log_base;
   log_base = 0xb172 /* 0.693147 */;
   return fix_exp(fix_mul(fix_mul(0x1555 /* 0.083333 */,log_base),semitones));
}

typedef struct synthSamplerGlassMarimbaSoft_Util__ctx_type_2 {
   uint8_t pre;
} synthSamplerGlassMarimbaSoft_Util__ctx_type_2;

typedef synthSamplerGlassMarimbaSoft_Util__ctx_type_2 synthSamplerGlassMarimbaSoft_Util_edge_type;

static_inline void synthSamplerGlassMarimbaSoft_Util__ctx_type_2_init(synthSamplerGlassMarimbaSoft_Util__ctx_type_2 &_output_){
   synthSamplerGlassMarimbaSoft_Util__ctx_type_2 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Util_edge_init(synthSamplerGlassMarimbaSoft_Util__ctx_type_2 &_output_){
   synthSamplerGlassMarimbaSoft_Util__ctx_type_2_init(_output_);
   return ;
}

static_inline uint8_t synthSamplerGlassMarimbaSoft_Util_edge(synthSamplerGlassMarimbaSoft_Util__ctx_type_2 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

static_inline fix16_t synthSamplerGlassMarimbaSoft_Util_cubic_clipper(fix16_t x){
   if(x <= -0xaaaa /* -0.666667 */){
      return -0xaaaa /* -0.666667 */;
   }
   else
   {
      if(x >= 0xaaaa /* 0.666667 */){
         return 0xaaaa /* 0.666667 */;
      }
      else
      {
         return (x + fix_mul(fix_mul(fix_mul(-0x5555 /* -0.333333 */,x),x),x));
      }
   }
};

typedef struct synthSamplerGlassMarimbaSoft_Util__ctx_type_4 {
   fix16_t pre_x;
} synthSamplerGlassMarimbaSoft_Util__ctx_type_4;

typedef synthSamplerGlassMarimbaSoft_Util__ctx_type_4 synthSamplerGlassMarimbaSoft_Util_change_type;

static_inline void synthSamplerGlassMarimbaSoft_Util__ctx_type_4_init(synthSamplerGlassMarimbaSoft_Util__ctx_type_4 &_output_){
   synthSamplerGlassMarimbaSoft_Util__ctx_type_4 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Util_change_init(synthSamplerGlassMarimbaSoft_Util__ctx_type_4 &_output_){
   synthSamplerGlassMarimbaSoft_Util__ctx_type_4_init(_output_);
   return ;
}

static_inline uint8_t synthSamplerGlassMarimbaSoft_Util_change(synthSamplerGlassMarimbaSoft_Util__ctx_type_4 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

typedef struct synthSamplerGlassMarimbaSoft_Util__ctx_type_5 {
   fix16_t x;
} synthSamplerGlassMarimbaSoft_Util__ctx_type_5;

typedef synthSamplerGlassMarimbaSoft_Util__ctx_type_5 synthSamplerGlassMarimbaSoft_Util_smooth_type;

static_inline void synthSamplerGlassMarimbaSoft_Util__ctx_type_5_init(synthSamplerGlassMarimbaSoft_Util__ctx_type_5 &_output_){
   synthSamplerGlassMarimbaSoft_Util__ctx_type_5 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Util_smooth_init(synthSamplerGlassMarimbaSoft_Util__ctx_type_5 &_output_){
   synthSamplerGlassMarimbaSoft_Util__ctx_type_5_init(_output_);
   return ;
}

static_inline fix16_t synthSamplerGlassMarimbaSoft_Util_smooth(synthSamplerGlassMarimbaSoft_Util__ctx_type_5 &_ctx, fix16_t input, fix16_t coeff){
   _ctx.x = (_ctx.x + fix_mul(coeff,(input + (- _ctx.x))));
   return _ctx.x;
}

static_inline fix16_t synthSamplerGlassMarimbaSoft_Util_velocityToLevel(int velocity){
   velocity = int_clip(velocity,0,127);
   return fix_mul(0x204 /* 0.007874 */,int_to_fix(velocity));
}

static_inline int synthSamplerGlassMarimbaSoft_SampleWrapper_sample_samples(){
   return 45018;
};

static_inline fix16_t synthSamplerGlassMarimbaSoft_SampleWrapper_sample(int channel, int index){
   if(channel == 0){
      return fix_wrap_array(synthSamplerGlassMarimbaSoft_SampleWrapper_sample_chan_0)[(index % 45018)];
   }
   return 0x0 /* 0.000000 */;
}

static_inline fix16_t synthSamplerGlassMarimbaSoft_SampleWrapper_getSample(int index){
   return synthSamplerGlassMarimbaSoft_SampleWrapper_sample(0,index);
};

static_inline int synthSamplerGlassMarimbaSoft_SampleWrapper_getSampleSize(){
   return synthSamplerGlassMarimbaSoft_SampleWrapper_sample_samples();
};

static_inline fix16_t synthSamplerGlassMarimbaSoft_SampleWrapper_getSampleFs(){
   return 0x1e0000 /* 30.000000 */;
};

static_inline int synthSamplerGlassMarimbaSoft_SampleWrapper_getSampleNote(){
   return 60;
};

static_inline uint8_t synthSamplerGlassMarimbaSoft_SampleWrapper_isSampleLoop(){
   return false;
};

static_inline int synthSamplerGlassMarimbaSoft_SampleWrapper_getSampleLoopStart(){
   return (-1);
};

static_inline int synthSamplerGlassMarimbaSoft_SampleWrapper_getSampleLoopEnd(){
   return (-1);
};

typedef struct synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 {
   uint8_t poly;
   int notes[128];
   int nb_notes;
   int last_notes[128];
   uint8_t allowDuplicates;
} synthSamplerGlassMarimbaSoft_Notes__ctx_type_0;

typedef synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 synthSamplerGlassMarimbaSoft_Notes_setPoly_type;

void synthSamplerGlassMarimbaSoft_Notes__ctx_type_0_init(synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 &_output_);

static_inline void synthSamplerGlassMarimbaSoft_Notes_setPoly_init(synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Notes__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Notes_setPoly(synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 &_ctx, uint8_t flag){
   _ctx.poly = flag;
};

typedef synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 synthSamplerGlassMarimbaSoft_Notes_getPoly_type;

static_inline void synthSamplerGlassMarimbaSoft_Notes_getPoly_init(synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Notes__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t synthSamplerGlassMarimbaSoft_Notes_getPoly(synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 &_ctx){
   return _ctx.poly;
};

typedef synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 synthSamplerGlassMarimbaSoft_Notes_setAllowDuplicates_type;

static_inline void synthSamplerGlassMarimbaSoft_Notes_setAllowDuplicates_init(synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Notes__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Notes_setAllowDuplicates(synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 &_ctx, uint8_t flag){
   _ctx.allowDuplicates = flag;
};

typedef synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 synthSamplerGlassMarimbaSoft_Notes_default_type;

static_inline void synthSamplerGlassMarimbaSoft_Notes_default_init(synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Notes__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Notes_default(synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 &_ctx){
   synthSamplerGlassMarimbaSoft_Notes_setPoly(_ctx,false);
   synthSamplerGlassMarimbaSoft_Notes_setAllowDuplicates(_ctx,false);
}

typedef synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 synthSamplerGlassMarimbaSoft_Notes_nbNotes_type;

static_inline void synthSamplerGlassMarimbaSoft_Notes_nbNotes_init(synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Notes__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthSamplerGlassMarimbaSoft_Notes_nbNotes(synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 &_ctx){
   return _ctx.nb_notes;
};

typedef synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 synthSamplerGlassMarimbaSoft_Notes_firstNote_type;

static_inline void synthSamplerGlassMarimbaSoft_Notes_firstNote_init(synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Notes__ctx_type_0_init(_output_);
   return ;
}

int synthSamplerGlassMarimbaSoft_Notes_firstNote(synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 &_ctx);

typedef synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 synthSamplerGlassMarimbaSoft_Notes_lastNote_type;

static_inline void synthSamplerGlassMarimbaSoft_Notes_lastNote_init(synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Notes__ctx_type_0_init(_output_);
   return ;
}

int synthSamplerGlassMarimbaSoft_Notes_lastNote(synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 &_ctx);

typedef synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 synthSamplerGlassMarimbaSoft_Notes_noteOff_type;

static_inline void synthSamplerGlassMarimbaSoft_Notes_noteOff_init(synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Notes__ctx_type_0_init(_output_);
   return ;
}

uint8_t synthSamplerGlassMarimbaSoft_Notes_noteOff(synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 &_ctx, int note, int channel);

typedef synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 synthSamplerGlassMarimbaSoft_Notes_noteOn_type;

static_inline void synthSamplerGlassMarimbaSoft_Notes_noteOn_init(synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Notes__ctx_type_0_init(_output_);
   return ;
}

uint8_t synthSamplerGlassMarimbaSoft_Notes_noteOn(synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 &_ctx, int note, int velocity, int channel);

static_inline void synthSamplerGlassMarimbaSoft_Buffer_buffer(fix16_t (&oBuff)[256]){
}

void synthSamplerGlassMarimbaSoft_Buffer_buffer_large(fix16_t (&oBuff)[2048]);

typedef struct synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 {
   uint8_t sustaining;
   uint8_t sustain;
   fix16_t step;
   int state;
   int size;
   int sampleNote;
   fix16_t sampleFs;
   uint8_t quickKill;
   fix16_t qkStep;
   int posBase;
   fix16_t pos;
   synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 playingnotes;
   fix16_t noteRatio;
   int nextVelocity;
   int nextNote;
   uint8_t loopy;
   int loopS;
   int loopE;
   fix16_t level;
   uint8_t gate;
   fix16_t fsRatio;
   fix16_t fs;
   uint8_t crossfade;
   fix16_t buffer_o[256];
   fix16_t buffer_cross[256];
   fix16_t bend;
} synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0;

typedef synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 synthSamplerGlassMarimbaSoft_Sampler_updateStep_type;

void synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0_init(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_output_);

static_inline void synthSamplerGlassMarimbaSoft_Sampler_updateStep_init(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Sampler_updateStep(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_ctx){
   _ctx.step = fix_mul(_ctx.fsRatio,_ctx.noteRatio);
   if(_ctx.bend != 0x0 /* 0.000000 */){
      _ctx.step = fix_mul(_ctx.step,synthSamplerGlassMarimbaSoft_Util_tonesToCoeff(_ctx.bend));
   }
}

typedef synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 synthSamplerGlassMarimbaSoft_Sampler_pitchBend_type;

static_inline void synthSamplerGlassMarimbaSoft_Sampler_pitchBend_init(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Sampler_pitchBend(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_ctx, fix16_t semitones){
   if(semitones != _ctx.bend){
      _ctx.bend = semitones;
      synthSamplerGlassMarimbaSoft_Sampler_updateStep(_ctx);
   }
};

typedef synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 synthSamplerGlassMarimbaSoft_Sampler_setNote_type;

static_inline void synthSamplerGlassMarimbaSoft_Sampler_setNote_init(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0_init(_output_);
   return ;
}

void synthSamplerGlassMarimbaSoft_Sampler_setNote(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_ctx, int note);

typedef synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 synthSamplerGlassMarimbaSoft_Sampler_setLevel_type;

static_inline void synthSamplerGlassMarimbaSoft_Sampler_setLevel_init(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Sampler_setLevel(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_ctx, fix16_t newLevel){
   _ctx.level = newLevel;
};

typedef synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 synthSamplerGlassMarimbaSoft_Sampler_process_type;

static_inline void synthSamplerGlassMarimbaSoft_Sampler_process_init(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0_init(_output_);
   return ;
}

fix16_t synthSamplerGlassMarimbaSoft_Sampler_process(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_ctx);

typedef synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 synthSamplerGlassMarimbaSoft_Sampler_process_bufferTo_type;

static_inline void synthSamplerGlassMarimbaSoft_Sampler_process_bufferTo_init(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0_init(_output_);
   return ;
}

void synthSamplerGlassMarimbaSoft_Sampler_process_bufferTo(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_ctx, int nb, fix16_t (&oBuffer)[256]);

typedef synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 synthSamplerGlassMarimbaSoft_Sampler_process_buffer_type;

static_inline void synthSamplerGlassMarimbaSoft_Sampler_process_buffer_init(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Sampler_process_buffer(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_ctx, int nb){
   synthSamplerGlassMarimbaSoft_Sampler_process_bufferTo(_ctx,nb,_ctx.buffer_o);
};

typedef synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 synthSamplerGlassMarimbaSoft_Sampler_setSamplerate_type;

static_inline void synthSamplerGlassMarimbaSoft_Sampler_setSamplerate_init(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0_init(_output_);
   return ;
}

void synthSamplerGlassMarimbaSoft_Sampler_setSamplerate(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_ctx, fix16_t newFs);

typedef synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 synthSamplerGlassMarimbaSoft_Sampler_updateCrossFade_type;

static_inline void synthSamplerGlassMarimbaSoft_Sampler_updateCrossFade_init(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0_init(_output_);
   return ;
}

void synthSamplerGlassMarimbaSoft_Sampler_updateCrossFade(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_ctx);

typedef synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 synthSamplerGlassMarimbaSoft_Sampler_setLoop_type;

static_inline void synthSamplerGlassMarimbaSoft_Sampler_setLoop_init(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Sampler_setLoop(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_ctx, uint8_t loop){
   _ctx.loopy = loop;
};

typedef synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 synthSamplerGlassMarimbaSoft_Sampler_setLoopStart_type;

static_inline void synthSamplerGlassMarimbaSoft_Sampler_setLoopStart_init(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Sampler_setLoopStart(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_ctx, int newLoopS){
   _ctx.loopS = int_clip(newLoopS,0,_ctx.size);
   synthSamplerGlassMarimbaSoft_Sampler_updateCrossFade(_ctx);
}

typedef synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 synthSamplerGlassMarimbaSoft_Sampler_setLoopEnd_type;

static_inline void synthSamplerGlassMarimbaSoft_Sampler_setLoopEnd_init(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Sampler_setLoopEnd(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_ctx, int newLoopE){
   _ctx.loopE = int_clip(newLoopE,0,_ctx.size);
   synthSamplerGlassMarimbaSoft_Sampler_updateCrossFade(_ctx);
}

typedef synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 synthSamplerGlassMarimbaSoft_Sampler_getLoop_type;

static_inline void synthSamplerGlassMarimbaSoft_Sampler_getLoop_init(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t synthSamplerGlassMarimbaSoft_Sampler_getLoop(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_ctx){
   return _ctx.loopy;
};

typedef synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 synthSamplerGlassMarimbaSoft_Sampler_getLoopStart_type;

static_inline void synthSamplerGlassMarimbaSoft_Sampler_getLoopStart_init(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthSamplerGlassMarimbaSoft_Sampler_getLoopStart(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_ctx){
   return _ctx.loopS;
};

typedef synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 synthSamplerGlassMarimbaSoft_Sampler_getLoopEnd_type;

static_inline void synthSamplerGlassMarimbaSoft_Sampler_getLoopEnd_init(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthSamplerGlassMarimbaSoft_Sampler_getLoopEnd(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_ctx){
   return _ctx.loopE;
};

typedef synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 synthSamplerGlassMarimbaSoft_Sampler_getSampleSize_type;

static_inline void synthSamplerGlassMarimbaSoft_Sampler_getSampleSize_init(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthSamplerGlassMarimbaSoft_Sampler_getSampleSize(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_ctx){
   return _ctx.size;
};

typedef synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 synthSamplerGlassMarimbaSoft_Sampler_setSustain_type;

static_inline void synthSamplerGlassMarimbaSoft_Sampler_setSustain_init(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0_init(_output_);
   return ;
}

void synthSamplerGlassMarimbaSoft_Sampler_setSustain(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_ctx, uint8_t flag);

typedef synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 synthSamplerGlassMarimbaSoft_Sampler_noteOn_type;

static_inline void synthSamplerGlassMarimbaSoft_Sampler_noteOn_init(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0_init(_output_);
   return ;
}

uint8_t synthSamplerGlassMarimbaSoft_Sampler_noteOn(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 synthSamplerGlassMarimbaSoft_Sampler_setPoly_type;

static_inline void synthSamplerGlassMarimbaSoft_Sampler_setPoly_init(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Sampler_setPoly(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_ctx, uint8_t flag){
   synthSamplerGlassMarimbaSoft_Notes_setPoly(_ctx.playingnotes,flag);
};

typedef synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 synthSamplerGlassMarimbaSoft_Sampler_noteOff_type;

static_inline void synthSamplerGlassMarimbaSoft_Sampler_noteOff_init(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0_init(_output_);
   return ;
}

void synthSamplerGlassMarimbaSoft_Sampler_noteOff(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_ctx, int note, int channel);

typedef synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 synthSamplerGlassMarimbaSoft_Sampler_default_type;

static_inline void synthSamplerGlassMarimbaSoft_Sampler_default_init(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0_init(_output_);
   return ;
}

void synthSamplerGlassMarimbaSoft_Sampler_default(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 &_ctx);

typedef struct synthSamplerGlassMarimbaSoft_Sampler__ctx_type_1 {
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 _inst1fd;
} synthSamplerGlassMarimbaSoft_Sampler__ctx_type_1;

typedef synthSamplerGlassMarimbaSoft_Sampler__ctx_type_1 synthSamplerGlassMarimbaSoft_Sampler_dummy_type;

static_inline void synthSamplerGlassMarimbaSoft_Sampler__ctx_type_1_init(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_1 &_output_){
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_1 _ctx;
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0_init(_ctx._inst1fd);
   _output_ = _ctx;
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Sampler_dummy_init(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_1 &_output_){
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_1_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Sampler_dummy(synthSamplerGlassMarimbaSoft_Sampler__ctx_type_1 &_ctx){
   fix16_t buff[256];
   synthSamplerGlassMarimbaSoft_Buffer_buffer(buff);
   synthSamplerGlassMarimbaSoft_Sampler_process_bufferTo(_ctx._inst1fd,0,buff);
}

typedef struct synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 {
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 voice3;
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 voice2;
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 voice1;
   synthSamplerGlassMarimbaSoft_Sampler__ctx_type_0 voice0;
   uint8_t should_leftovers;
} synthSamplerGlassMarimbaSoft_Poly__ctx_type_0;

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_getSample_type;

void synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_);

static_inline void synthSamplerGlassMarimbaSoft_Poly_getSample_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

fix16_t synthSamplerGlassMarimbaSoft_Poly_getSample(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx, int voice);

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_runVoice_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly_runVoice_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Poly_runVoice(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx, int voice, int nb, fix16_t (&buff)[256]){
   switch(voice) {
      case 0:
         synthSamplerGlassMarimbaSoft_Sampler_process_bufferTo(_ctx.voice0,nb,buff);
      break;
      case 1:
         synthSamplerGlassMarimbaSoft_Sampler_process_bufferTo(_ctx.voice1,nb,buff);
      break;
      case 2:
         synthSamplerGlassMarimbaSoft_Sampler_process_bufferTo(_ctx.voice2,nb,buff);
      break;
      case 3:
         synthSamplerGlassMarimbaSoft_Sampler_process_bufferTo(_ctx.voice3,nb,buff);
      break;
    
   }
};

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_sendNoteOn_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly_sendNoteOn_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Poly_sendNoteOn(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx, int voice, int note, int velocity, int channel){
   switch(voice) {
      case 0:
         synthSamplerGlassMarimbaSoft_Sampler_noteOn(_ctx.voice0,note,velocity,channel);
      break;
      case 1:
         synthSamplerGlassMarimbaSoft_Sampler_noteOn(_ctx.voice1,note,velocity,channel);
      break;
      case 2:
         synthSamplerGlassMarimbaSoft_Sampler_noteOn(_ctx.voice2,note,velocity,channel);
      break;
      case 3:
         synthSamplerGlassMarimbaSoft_Sampler_noteOn(_ctx.voice3,note,velocity,channel);
      break;
    
   }
};

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_sendNoteOff_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly_sendNoteOff_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Poly_sendNoteOff(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx, int voice, int note, int channel){
   switch(voice) {
      case 0:
         synthSamplerGlassMarimbaSoft_Sampler_noteOff(_ctx.voice0,note,channel);
      break;
      case 1:
         synthSamplerGlassMarimbaSoft_Sampler_noteOff(_ctx.voice1,note,channel);
      break;
      case 2:
         synthSamplerGlassMarimbaSoft_Sampler_noteOff(_ctx.voice2,note,channel);
      break;
      case 3:
         synthSamplerGlassMarimbaSoft_Sampler_noteOff(_ctx.voice3,note,channel);
      break;
    
   }
};

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_setSamplerate_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly_setSamplerate_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Poly_setSamplerate(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx, fix16_t fs){
   synthSamplerGlassMarimbaSoft_Sampler_setSamplerate(_ctx.voice0,fs);
   synthSamplerGlassMarimbaSoft_Sampler_setSamplerate(_ctx.voice1,fs);
   synthSamplerGlassMarimbaSoft_Sampler_setSamplerate(_ctx.voice2,fs);
   synthSamplerGlassMarimbaSoft_Sampler_setSamplerate(_ctx.voice3,fs);
}

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_synthSetSustain_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetSustain_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetSustain(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx, uint8_t flag){
   synthSamplerGlassMarimbaSoft_Sampler_setSustain(_ctx.voice0,flag);
   synthSamplerGlassMarimbaSoft_Sampler_setSustain(_ctx.voice1,flag);
   synthSamplerGlassMarimbaSoft_Sampler_setSustain(_ctx.voice2,flag);
   synthSamplerGlassMarimbaSoft_Sampler_setSustain(_ctx.voice3,flag);
}

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_synthPitchBend_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthPitchBend_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthPitchBend(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx, fix16_t semitones){
   synthSamplerGlassMarimbaSoft_Sampler_pitchBend(_ctx.voice0,semitones);
   synthSamplerGlassMarimbaSoft_Sampler_pitchBend(_ctx.voice1,semitones);
   synthSamplerGlassMarimbaSoft_Sampler_pitchBend(_ctx.voice2,semitones);
   synthSamplerGlassMarimbaSoft_Sampler_pitchBend(_ctx.voice3,semitones);
}

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_synthSetLoop_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetLoop_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetLoop(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx, uint8_t flag){
   synthSamplerGlassMarimbaSoft_Sampler_setLoop(_ctx.voice0,flag);
   synthSamplerGlassMarimbaSoft_Sampler_setLoop(_ctx.voice1,flag);
   synthSamplerGlassMarimbaSoft_Sampler_setLoop(_ctx.voice2,flag);
   synthSamplerGlassMarimbaSoft_Sampler_setLoop(_ctx.voice3,flag);
}

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_synthSetLoopStart_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetLoopStart_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetLoopStart(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx, int value){
   synthSamplerGlassMarimbaSoft_Sampler_setLoopStart(_ctx.voice0,value);
   synthSamplerGlassMarimbaSoft_Sampler_setLoopStart(_ctx.voice1,value);
   synthSamplerGlassMarimbaSoft_Sampler_setLoopStart(_ctx.voice2,value);
   synthSamplerGlassMarimbaSoft_Sampler_setLoopStart(_ctx.voice3,value);
}

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_synthSetLoopEnd_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetLoopEnd_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetLoopEnd(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx, int value){
   synthSamplerGlassMarimbaSoft_Sampler_setLoopEnd(_ctx.voice0,value);
   synthSamplerGlassMarimbaSoft_Sampler_setLoopEnd(_ctx.voice1,value);
   synthSamplerGlassMarimbaSoft_Sampler_setLoopEnd(_ctx.voice2,value);
   synthSamplerGlassMarimbaSoft_Sampler_setLoopEnd(_ctx.voice3,value);
}

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_synthGetLoop_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthGetLoop_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t synthSamplerGlassMarimbaSoft_Poly_synthGetLoop(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx){
   return synthSamplerGlassMarimbaSoft_Sampler_getLoop(_ctx.voice0);
};

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_synthGetLoopStart_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthGetLoopStart_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthSamplerGlassMarimbaSoft_Poly_synthGetLoopStart(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx){
   return synthSamplerGlassMarimbaSoft_Sampler_getLoopStart(_ctx.voice0);
};

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_synthGetLoopEnd_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthGetLoopEnd_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthSamplerGlassMarimbaSoft_Poly_synthGetLoopEnd(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx){
   return synthSamplerGlassMarimbaSoft_Sampler_getLoopEnd(_ctx.voice0);
};

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_synthGetSize_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthGetSize_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthSamplerGlassMarimbaSoft_Poly_synthGetSize(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx){
   return synthSamplerGlassMarimbaSoft_Sampler_getSampleSize(_ctx.voice0);
};

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_synthGetNbWavetables_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthGetNbWavetables_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthSamplerGlassMarimbaSoft_Poly_synthGetNbWavetables(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx){
   return 0;
};

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorWavetable_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorWavetable_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorWavetable(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx, fix16_t wavetableIdx){
}

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorWavetablePhase_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorWavetablePhase_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorWavetablePhase(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx, fix16_t phaseIdx){
}

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_synthSetCarrierWavetable_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetCarrierWavetable_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetCarrierWavetable(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx, fix16_t wavetableIdx){
}

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_synthSetCarrierWavetablePhase_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetCarrierWavetablePhase_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetCarrierWavetablePhase(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx, fix16_t phaseIdx){
}

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorRatio_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorRatio_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorRatio(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx, fix16_t ratio){
}

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_synthSetCarrierRatio_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetCarrierRatio_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetCarrierRatio(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx, fix16_t ratio){
}

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorLevel_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorLevel_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorLevel(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx, fix16_t level){
}

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorTargetLevel_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorTargetLevel_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorTargetLevel(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx, uint8_t targetLevel){
}

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorPhaseShift_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorPhaseShift_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorPhaseShift(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx, fix16_t ratio){
}

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorFeedback_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorFeedback_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorFeedback(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx, fix16_t ratio){
}

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorADSR_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorADSR_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorADSR(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx, fix16_t a, fix16_t d, fix16_t s, fix16_t r){
}

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_synthSetCarrierADSR_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetCarrierADSR_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Poly_synthSetCarrierADSR(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx, fix16_t a, fix16_t d, fix16_t s, fix16_t r){
}

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_shouldLeftOvers_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly_shouldLeftOvers_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t synthSamplerGlassMarimbaSoft_Poly_shouldLeftOvers(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx){
   return _ctx.should_leftovers;
};

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 synthSamplerGlassMarimbaSoft_Poly_default_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly_default_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_output_);
   return ;
}

void synthSamplerGlassMarimbaSoft_Poly_default(synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 &_ctx);

typedef struct synthSamplerGlassMarimbaSoft_Poly__ctx_type_1 {
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 _inst179;
} synthSamplerGlassMarimbaSoft_Poly__ctx_type_1;

typedef synthSamplerGlassMarimbaSoft_Poly__ctx_type_1 synthSamplerGlassMarimbaSoft_Poly_dummy_type;

static_inline void synthSamplerGlassMarimbaSoft_Poly__ctx_type_1_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_1 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_1 _ctx;
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0_init(_ctx._inst179);
   _output_ = _ctx;
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Poly_dummy_init(synthSamplerGlassMarimbaSoft_Poly__ctx_type_1 &_output_){
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_1_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Poly_dummy(synthSamplerGlassMarimbaSoft_Poly__ctx_type_1 &_ctx){
   fix16_t buff[256];
   synthSamplerGlassMarimbaSoft_Buffer_buffer(buff);
   synthSamplerGlassMarimbaSoft_Poly_runVoice(_ctx._inst179,0,0,buff);
}

typedef struct synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 {
   synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 voicesinactive;
   synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 voicesactive;
   fix16_t voices_ratio;
   int voices[4];
   synthSamplerGlassMarimbaSoft_Notes__ctx_type_0 voiceinsactive;
   uint8_t reuse;
   synthSamplerGlassMarimbaSoft_Poly__ctx_type_0 poly;
   int number_voices;
   int notes[128];
   uint8_t normalize;
   fix16_t leftovers_decay;
   fix16_t leftovers;
   int last_velocities[4];
   fix16_t last_values[4];
   fix16_t fs;
   fix16_t buffer_v3[256];
   fix16_t buffer_v2[256];
   fix16_t buffer_v1[256];
   fix16_t buffer_v0[256];
} synthSamplerGlassMarimbaSoft_Voice__ctx_type_0;

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_process_type;

void synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_);

static_inline void synthSamplerGlassMarimbaSoft_Voice_process_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

fix16_t synthSamplerGlassMarimbaSoft_Voice_process(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx);

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_process_bufferTo_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_process_bufferTo_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

void synthSamplerGlassMarimbaSoft_Voice_process_bufferTo(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx, int nb, fix16_t (&oBuffer)[256]);

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_process_bufferTo_alt_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_process_bufferTo_alt_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

void synthSamplerGlassMarimbaSoft_Voice_process_bufferTo_alt(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx, int nb, fix16_t (&oBuffer)[256]);

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_setReuse_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_setReuse_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Voice_setReuse(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx, uint8_t flag){
   _ctx.reuse = flag;
};

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_noteOff_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_noteOff_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

void synthSamplerGlassMarimbaSoft_Voice_noteOff(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx, int note, int channel);

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_noteOn_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_noteOn_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

void synthSamplerGlassMarimbaSoft_Voice_noteOn(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_setNbVoices_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_setNbVoices_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

void synthSamplerGlassMarimbaSoft_Voice_setNbVoices(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx, int nbvoices);

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_setNormalize_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_setNormalize_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Voice_setNormalize(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx, uint8_t flag){
   _ctx.normalize = flag;
};

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_setSamplerate_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_setSamplerate_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

void synthSamplerGlassMarimbaSoft_Voice_setSamplerate(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx, fix16_t newFs);

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_synthSetSustain_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetSustain_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetSustain(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx, uint8_t flag){
   synthSamplerGlassMarimbaSoft_Poly_synthSetSustain(_ctx.poly,flag);
};

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_synthPitchBend_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthPitchBend_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthPitchBend(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx, fix16_t semitones){
   synthSamplerGlassMarimbaSoft_Poly_synthPitchBend(_ctx.poly,semitones);
};

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_synthSetLoop_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetLoop_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetLoop(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx, uint8_t flag){
   synthSamplerGlassMarimbaSoft_Poly_synthSetLoop(_ctx.poly,flag);
};

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_synthSetLoopStart_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetLoopStart_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetLoopStart(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx, int value){
   synthSamplerGlassMarimbaSoft_Poly_synthSetLoopStart(_ctx.poly,value);
};

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_synthSetLoopEnd_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetLoopEnd_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetLoopEnd(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx, int value){
   synthSamplerGlassMarimbaSoft_Poly_synthSetLoopEnd(_ctx.poly,value);
};

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_synthGetLoop_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthGetLoop_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t synthSamplerGlassMarimbaSoft_Voice_synthGetLoop(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx){
   return synthSamplerGlassMarimbaSoft_Poly_synthGetLoop(_ctx.poly);
};

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_synthGetLoopStart_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthGetLoopStart_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthSamplerGlassMarimbaSoft_Voice_synthGetLoopStart(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx){
   return synthSamplerGlassMarimbaSoft_Poly_synthGetLoopStart(_ctx.poly);
};

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_synthGetLoopEnd_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthGetLoopEnd_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthSamplerGlassMarimbaSoft_Voice_synthGetLoopEnd(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx){
   return synthSamplerGlassMarimbaSoft_Poly_synthGetLoopEnd(_ctx.poly);
};

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_synthGetSize_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthGetSize_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthSamplerGlassMarimbaSoft_Voice_synthGetSize(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx){
   return synthSamplerGlassMarimbaSoft_Poly_synthGetSize(_ctx.poly);
};

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_synthGetNbWavetables_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthGetNbWavetables_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthSamplerGlassMarimbaSoft_Voice_synthGetNbWavetables(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx){
   return synthSamplerGlassMarimbaSoft_Poly_synthGetNbWavetables(_ctx.poly);
};

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_synthSetModulatorWavetable_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetModulatorWavetable_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetModulatorWavetable(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx, fix16_t wavetableIdx){
   synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorWavetable(_ctx.poly,wavetableIdx);
};

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_synthSetModulatorWavetablePhase_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetModulatorWavetablePhase_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetModulatorWavetablePhase(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx, fix16_t phaseIdx){
   synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorWavetablePhase(_ctx.poly,phaseIdx);
};

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_synthSetCarrierWavetable_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetCarrierWavetable_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetCarrierWavetable(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx, fix16_t wavetableIdx){
   synthSamplerGlassMarimbaSoft_Poly_synthSetCarrierWavetable(_ctx.poly,wavetableIdx);
};

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_synthSetCarrierWavetablePhase_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetCarrierWavetablePhase_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetCarrierWavetablePhase(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx, fix16_t phaseIdx){
   synthSamplerGlassMarimbaSoft_Poly_synthSetCarrierWavetablePhase(_ctx.poly,phaseIdx);
};

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_synthSetModulatorRatio_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetModulatorRatio_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetModulatorRatio(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx, fix16_t ratio){
   synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorRatio(_ctx.poly,ratio);
};

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_synthSetCarrierRatio_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetCarrierRatio_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetCarrierRatio(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx, fix16_t ratio){
   synthSamplerGlassMarimbaSoft_Poly_synthSetCarrierRatio(_ctx.poly,ratio);
};

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_synthSetModulatorLevel_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetModulatorLevel_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetModulatorLevel(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx, fix16_t level){
   synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorLevel(_ctx.poly,level);
};

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_synthSetModulatorTargetLevel_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetModulatorTargetLevel_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetModulatorTargetLevel(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx, uint8_t targetLevel){
   synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorTargetLevel(_ctx.poly,targetLevel);
};

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_synthSetModulatorPhaseShift_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetModulatorPhaseShift_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetModulatorPhaseShift(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx, fix16_t ratio){
   synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorPhaseShift(_ctx.poly,ratio);
};

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_synthSetModulatorFeedback_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetModulatorFeedback_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetModulatorFeedback(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx, fix16_t ratio){
   synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorFeedback(_ctx.poly,ratio);
};

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_synthSetModulatorADSR_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetModulatorADSR_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetModulatorADSR(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx, fix16_t a, fix16_t d, fix16_t s, fix16_t r){
   synthSamplerGlassMarimbaSoft_Poly_synthSetModulatorADSR(_ctx.poly,a,d,s,r);
};

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_synthSetCarrierADSR_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetCarrierADSR_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Voice_synthSetCarrierADSR(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx, fix16_t a, fix16_t d, fix16_t s, fix16_t r){
   synthSamplerGlassMarimbaSoft_Poly_synthSetCarrierADSR(_ctx.poly,a,d,s,r);
};

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 synthSamplerGlassMarimbaSoft_Voice_default_type;

static_inline void synthSamplerGlassMarimbaSoft_Voice_default_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0_init(_output_);
   return ;
}

void synthSamplerGlassMarimbaSoft_Voice_default(synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 &_ctx);

typedef struct synthSamplerGlassMarimbaSoft_Voice__ctx_type_1 {
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 _inst275;
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 _inst1b9;
} synthSamplerGlassMarimbaSoft_Voice__ctx_type_1;

typedef synthSamplerGlassMarimbaSoft_Voice__ctx_type_1 synthSamplerGlassMarimbaSoft_Voice_dummy_type;

void synthSamplerGlassMarimbaSoft_Voice__ctx_type_1_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_1 &_output_);

static_inline void synthSamplerGlassMarimbaSoft_Voice_dummy_init(synthSamplerGlassMarimbaSoft_Voice__ctx_type_1 &_output_){
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_1_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Voice_dummy(synthSamplerGlassMarimbaSoft_Voice__ctx_type_1 &_ctx){
   fix16_t buff[256];
   synthSamplerGlassMarimbaSoft_Buffer_buffer(buff);
   synthSamplerGlassMarimbaSoft_Voice_process_bufferTo(_ctx._inst1b9,0,buff);
   synthSamplerGlassMarimbaSoft_Voice_process_bufferTo_alt(_ctx._inst275,0,buff);
}

int synthSamplerGlassMarimbaSoft_Processor_cvToPitch(fix16_t cv);

static_inline fix16_t synthSamplerGlassMarimbaSoft_Processor_bool2real(uint8_t b){
   if(b){
      return 0x10000 /* 1.000000 */;
   }
   else
   {
      return 0x0 /* 0.000000 */;
   }
};

typedef struct synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 {
   synthSamplerGlassMarimbaSoft_Voice__ctx_type_0 voice;
   uint8_t last_retrigger[16];
   int last_pitches[16];
   int last_nbcables;
   uint8_t last_gates[16];
   fix16_t fs;
   synthSamplerGlassMarimbaSoft_Util__ctx_type_4 _inst233b;
   synthSamplerGlassMarimbaSoft_Util__ctx_type_4 _inst203b;
   synthSamplerGlassMarimbaSoft_Util__ctx_type_4 _inst173b;
} synthSamplerGlassMarimbaSoft_Processor__ctx_type_2;

typedef synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 synthSamplerGlassMarimbaSoft_Processor_process_type;

void synthSamplerGlassMarimbaSoft_Processor__ctx_type_2_init(synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 &_output_);

static_inline void synthSamplerGlassMarimbaSoft_Processor_process_init(synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 &_output_){
   synthSamplerGlassMarimbaSoft_Processor__ctx_type_2_init(_output_);
   return ;
}

static_inline fix16_t synthSamplerGlassMarimbaSoft_Processor_process(synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 &_ctx){
   return synthSamplerGlassMarimbaSoft_Voice_process(_ctx.voice);
};

typedef synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 synthSamplerGlassMarimbaSoft_Processor_setNote_type;

static_inline void synthSamplerGlassMarimbaSoft_Processor_setNote_init(synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 &_output_){
   synthSamplerGlassMarimbaSoft_Processor__ctx_type_2_init(_output_);
   return ;
}

void synthSamplerGlassMarimbaSoft_Processor_setNote(synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 &_ctx, fix16_t gate, fix16_t voct, fix16_t vel, fix16_t retrigger, int cable);

typedef synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 synthSamplerGlassMarimbaSoft_Processor_setPitchBend_type;

static_inline void synthSamplerGlassMarimbaSoft_Processor_setPitchBend_init(synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 &_output_){
   synthSamplerGlassMarimbaSoft_Processor__ctx_type_2_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Processor_setPitchBend(synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 &_ctx, fix16_t semitones){
   synthSamplerGlassMarimbaSoft_Voice_synthPitchBend(_ctx.voice,semitones);
};

typedef synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 synthSamplerGlassMarimbaSoft_Processor_nbCables_type;

static_inline void synthSamplerGlassMarimbaSoft_Processor_nbCables_init(synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 &_output_){
   synthSamplerGlassMarimbaSoft_Processor__ctx_type_2_init(_output_);
   return ;
}

void synthSamplerGlassMarimbaSoft_Processor_nbCables(synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 &_ctx, int nbcables);

typedef synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 synthSamplerGlassMarimbaSoft_Processor_setSamplerate_type;

static_inline void synthSamplerGlassMarimbaSoft_Processor_setSamplerate_init(synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 &_output_){
   synthSamplerGlassMarimbaSoft_Processor__ctx_type_2_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Processor_setSamplerate(synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 &_ctx, fix16_t newFs){
   if((newFs > 0x0 /* 0.000000 */) && (newFs != _ctx.fs)){
      _ctx.fs = newFs;
      synthSamplerGlassMarimbaSoft_Voice_setSamplerate(_ctx.voice,_ctx.fs);
   }
};

typedef synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 synthSamplerGlassMarimbaSoft_Processor_setLoop_type;

static_inline void synthSamplerGlassMarimbaSoft_Processor_setLoop_init(synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 &_output_){
   synthSamplerGlassMarimbaSoft_Processor__ctx_type_2_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Processor_setLoop(synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 &_ctx, uint8_t param, uint8_t force){
   if(synthSamplerGlassMarimbaSoft_Util_change(_ctx._inst173b,synthSamplerGlassMarimbaSoft_Processor_bool2real(param)) || force){
      synthSamplerGlassMarimbaSoft_Voice_synthSetLoop(_ctx.voice,param);
   }
};

typedef synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 synthSamplerGlassMarimbaSoft_Processor_setLoopStart_type;

static_inline void synthSamplerGlassMarimbaSoft_Processor_setLoopStart_init(synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 &_output_){
   synthSamplerGlassMarimbaSoft_Processor__ctx_type_2_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Processor_setLoopStart(synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 &_ctx, int param, uint8_t force){
   if(synthSamplerGlassMarimbaSoft_Util_change(_ctx._inst203b,int_to_fix(param)) || force){
      synthSamplerGlassMarimbaSoft_Voice_synthSetLoopStart(_ctx.voice,param);
   }
};

typedef synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 synthSamplerGlassMarimbaSoft_Processor_setLoopEnd_type;

static_inline void synthSamplerGlassMarimbaSoft_Processor_setLoopEnd_init(synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 &_output_){
   synthSamplerGlassMarimbaSoft_Processor__ctx_type_2_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Processor_setLoopEnd(synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 &_ctx, int param, uint8_t force){
   if(synthSamplerGlassMarimbaSoft_Util_change(_ctx._inst233b,int_to_fix(param)) || force){
      synthSamplerGlassMarimbaSoft_Voice_synthSetLoopEnd(_ctx.voice,param);
   }
};

typedef synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 synthSamplerGlassMarimbaSoft_Processor_getLoop_type;

static_inline void synthSamplerGlassMarimbaSoft_Processor_getLoop_init(synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 &_output_){
   synthSamplerGlassMarimbaSoft_Processor__ctx_type_2_init(_output_);
   return ;
}

static_inline uint8_t synthSamplerGlassMarimbaSoft_Processor_getLoop(synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 &_ctx){
   return synthSamplerGlassMarimbaSoft_Voice_synthGetLoop(_ctx.voice);
};

typedef synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 synthSamplerGlassMarimbaSoft_Processor_getLoopStart_type;

static_inline void synthSamplerGlassMarimbaSoft_Processor_getLoopStart_init(synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 &_output_){
   synthSamplerGlassMarimbaSoft_Processor__ctx_type_2_init(_output_);
   return ;
}

static_inline int synthSamplerGlassMarimbaSoft_Processor_getLoopStart(synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 &_ctx){
   return synthSamplerGlassMarimbaSoft_Voice_synthGetLoopStart(_ctx.voice);
};

typedef synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 synthSamplerGlassMarimbaSoft_Processor_getLoopEnd_type;

static_inline void synthSamplerGlassMarimbaSoft_Processor_getLoopEnd_init(synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 &_output_){
   synthSamplerGlassMarimbaSoft_Processor__ctx_type_2_init(_output_);
   return ;
}

static_inline int synthSamplerGlassMarimbaSoft_Processor_getLoopEnd(synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 &_ctx){
   return synthSamplerGlassMarimbaSoft_Voice_synthGetLoopEnd(_ctx.voice);
};

typedef synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 synthSamplerGlassMarimbaSoft_Processor_getSize_type;

static_inline void synthSamplerGlassMarimbaSoft_Processor_getSize_init(synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 &_output_){
   synthSamplerGlassMarimbaSoft_Processor__ctx_type_2_init(_output_);
   return ;
}

static_inline int synthSamplerGlassMarimbaSoft_Processor_getSize(synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 &_ctx){
   return synthSamplerGlassMarimbaSoft_Voice_synthGetSize(_ctx.voice);
};

typedef synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 synthSamplerGlassMarimbaSoft_Processor_default_type;

static_inline void synthSamplerGlassMarimbaSoft_Processor_default_init(synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 &_output_){
   synthSamplerGlassMarimbaSoft_Processor__ctx_type_2_init(_output_);
   return ;
}

static_inline void synthSamplerGlassMarimbaSoft_Processor_default(synthSamplerGlassMarimbaSoft_Processor__ctx_type_2 &_ctx){
   synthSamplerGlassMarimbaSoft_Voice_default(_ctx.voice);
   synthSamplerGlassMarimbaSoft_Processor_setSamplerate(_ctx,0x2c1999 /* 44.100000 */);
   synthSamplerGlassMarimbaSoft_Voice_setReuse(_ctx.voice,true);
}



#endif // ENGINE_SYNTHSAMPLERGLASSMARIMBASOFT_H
