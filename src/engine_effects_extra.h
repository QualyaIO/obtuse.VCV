
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef ENGINE_EFFECTS_EXTRA_H
#define ENGINE_EFFECTS_EXTRA_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "engine_effects_extra.tables.h"

static_inline void Buffer_buffer(fix16_t (&_output_)[256]){
   fix16_t buff[256];
   fix_copy_array(256,_output_,buff);
   return ;
}

static_inline void Buffer_buffer_large(fix16_t (&_output_)[16384]){
   fix16_t buff[16384];
   fix_copy_array(16384,_output_,buff);
   return ;
}

typedef struct CombFF__ctx_type_0 {
   fix16_t scale;
   int pos;
   fix16_t fs;
   int delay;
   fix16_t decay;
   fix16_t buffer[16384];
} CombFF__ctx_type_0;

typedef CombFF__ctx_type_0 CombFF_process_type;

void CombFF__ctx_type_0_init(CombFF__ctx_type_0 &_output_);

static_inline void CombFF_process_init(CombFF__ctx_type_0 &_output_){
   CombFF__ctx_type_0_init(_output_);
   return ;
}

fix16_t CombFF_process(CombFF__ctx_type_0 &_ctx, fix16_t sample);

typedef CombFF__ctx_type_0 CombFF_process_bufferTo_type;

static_inline void CombFF_process_bufferTo_init(CombFF__ctx_type_0 &_output_){
   CombFF__ctx_type_0_init(_output_);
   return ;
}

void CombFF_process_bufferTo(CombFF__ctx_type_0 &_ctx, int nb, fix16_t (&input)[256], fix16_t (&oBuffer)[256]);

typedef CombFF__ctx_type_0 CombFF_setDecay_type;

static_inline void CombFF_setDecay_init(CombFF__ctx_type_0 &_output_){
   CombFF__ctx_type_0_init(_output_);
   return ;
}

static_inline void CombFF_setDecay(CombFF__ctx_type_0 &_ctx, fix16_t newDecay){
   _ctx.decay = fix_clip(newDecay,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   _ctx.scale = fix_div(0x10000 /* 1.000000 */,(0x10000 /* 1.000000 */ + _ctx.decay));
}

typedef CombFF__ctx_type_0 CombFF_getMaxDelay_type;

static_inline void CombFF_getMaxDelay_init(CombFF__ctx_type_0 &_output_){
   CombFF__ctx_type_0_init(_output_);
   return ;
}

static_inline int CombFF_getMaxDelay(CombFF__ctx_type_0 &_ctx){
   return 16384;
};

typedef CombFF__ctx_type_0 CombFF_getMaxDelayms_type;

static_inline void CombFF_getMaxDelayms_init(CombFF__ctx_type_0 &_output_){
   CombFF__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t CombFF_getMaxDelayms(CombFF__ctx_type_0 &_ctx){
   if(_ctx.fs <= 0x0 /* 0.000000 */){
      return 0x0 /* 0.000000 */;
   }
   return fix_div(0x40000000 /* 16384.000000 */,_ctx.fs);
}

typedef CombFF__ctx_type_0 CombFF_setDelay_type;

static_inline void CombFF_setDelay_init(CombFF__ctx_type_0 &_output_){
   CombFF__ctx_type_0_init(_output_);
   return ;
}

static_inline void CombFF_setDelay(CombFF__ctx_type_0 &_ctx, int newDelay){
   _ctx.delay = int_clip(newDelay,0,CombFF_getMaxDelay(_ctx));
   _ctx.pos = 0;
}

typedef CombFF__ctx_type_0 CombFF_setDelayms_type;

static_inline void CombFF_setDelayms_init(CombFF__ctx_type_0 &_output_){
   CombFF__ctx_type_0_init(_output_);
   return ;
}

static_inline void CombFF_setDelayms(CombFF__ctx_type_0 &_ctx, fix16_t delayms){
   CombFF_setDelay(_ctx,fix_to_int(fix_mul(_ctx.fs,delayms)));
};

typedef CombFF__ctx_type_0 CombFF_setSamplerate_type;

static_inline void CombFF_setSamplerate_init(CombFF__ctx_type_0 &_output_){
   CombFF__ctx_type_0_init(_output_);
   return ;
}

static_inline void CombFF_setSamplerate(CombFF__ctx_type_0 &_ctx, fix16_t newFs){
   if(newFs > 0x0 /* 0.000000 */){
      _ctx.fs = newFs;
   }
};

typedef CombFF__ctx_type_0 CombFF_default_type;

static_inline void CombFF_default_init(CombFF__ctx_type_0 &_output_){
   CombFF__ctx_type_0_init(_output_);
   return ;
}

void CombFF_default(CombFF__ctx_type_0 &_ctx);

typedef struct CombFF__ctx_type_1 {
   CombFF__ctx_type_0 _inst115;
} CombFF__ctx_type_1;

typedef CombFF__ctx_type_1 CombFF_dummy_type;

static_inline void CombFF__ctx_type_1_init(CombFF__ctx_type_1 &_output_){
   CombFF__ctx_type_1 _ctx;
   CombFF__ctx_type_0_init(_ctx._inst115);
   _output_ = _ctx;
   return ;
}

static_inline void CombFF_dummy_init(CombFF__ctx_type_1 &_output_){
   CombFF__ctx_type_1_init(_output_);
   return ;
}

void CombFF_dummy(CombFF__ctx_type_1 &_ctx);

static_inline fix16_t Util_noteToFrequency(int note){
   return fix_mul(0x217 /* 0.008176 */,fix_exp(fix_mul(0xec9 /* 0.057762 */,int_to_fix(note))));
};

typedef struct Util__ctx_type_1 {
   uint8_t pre;
} Util__ctx_type_1;

typedef Util__ctx_type_1 Util_edge_type;

static_inline void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

static_inline void Util_edge_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

static_inline uint8_t Util_edge(Util__ctx_type_1 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

static_inline fix16_t Util_cubic_clipper(fix16_t x){
   if(x <= -0xaaaa /* -0.666667 */){
      return -0xaaaa /* -0.666667 */;
   }
   else
   {
      if(x >= 0xaaaa /* 0.666667 */){
         return 0xaaaa /* 0.666667 */;
      }
      else
      {
         return (x + fix_mul(fix_mul(fix_mul(-0x5555 /* -0.333333 */,x),x),x));
      }
   }
};

typedef struct Util__ctx_type_3 {
   fix16_t pre_x;
} Util__ctx_type_3;

typedef Util__ctx_type_3 Util_change_type;

static_inline void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Util_change_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

static_inline uint8_t Util_change(Util__ctx_type_3 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

typedef struct Util__ctx_type_4 {
   fix16_t x;
} Util__ctx_type_4;

typedef Util__ctx_type_4 Util_smooth_type;

static_inline void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

static_inline fix16_t Util_smooth(Util__ctx_type_4 &_ctx, fix16_t input, fix16_t coeff){
   _ctx.x = (_ctx.x + fix_mul(coeff,(input + (- _ctx.x))));
   return _ctx.x;
}

static_inline fix16_t Util_velocityToLevel(int velocity){
   velocity = int_clip(velocity,0,127);
   return fix_mul(0x204 /* 0.007874 */,int_to_fix(velocity));
}

typedef struct Processor_combFF__ctx_type_0 {
   fix16_t fs;
   CombFF__ctx_type_0 filter;
   fix16_t delayms;
   Util__ctx_type_3 _inst53b;
   Util__ctx_type_3 _inst23b;
} Processor_combFF__ctx_type_0;

typedef Processor_combFF__ctx_type_0 Processor_combFF_process_type;

void Processor_combFF__ctx_type_0_init(Processor_combFF__ctx_type_0 &_output_);

static_inline void Processor_combFF_process_init(Processor_combFF__ctx_type_0 &_output_){
   Processor_combFF__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t Processor_combFF_process(Processor_combFF__ctx_type_0 &_ctx, fix16_t in){
   return CombFF_process(_ctx.filter,in);
};

typedef Processor_combFF__ctx_type_0 Processor_combFF_applyDelay_type;

static_inline void Processor_combFF_applyDelay_init(Processor_combFF__ctx_type_0 &_output_){
   Processor_combFF__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_combFF_applyDelay(Processor_combFF__ctx_type_0 &_ctx){
   CombFF_setDelayms(_ctx.filter,_ctx.delayms);
};

typedef Processor_combFF__ctx_type_0 Processor_combFF_setDelay_type;

static_inline void Processor_combFF_setDelay_init(Processor_combFF__ctx_type_0 &_output_){
   Processor_combFF__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_combFF_setDelay(Processor_combFF__ctx_type_0 &_ctx, fix16_t newDelay, uint8_t force){
   if(Util_change(_ctx._inst23b,newDelay) || force){
      _ctx.delayms = newDelay;
      Processor_combFF_applyDelay(_ctx);
   }
};

typedef Processor_combFF__ctx_type_0 Processor_combFF_setDecay_type;

static_inline void Processor_combFF_setDecay_init(Processor_combFF__ctx_type_0 &_output_){
   Processor_combFF__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_combFF_setDecay(Processor_combFF__ctx_type_0 &_ctx, fix16_t newDecay, uint8_t force){
   if(Util_change(_ctx._inst53b,newDecay) || force){
      CombFF_setDecay(_ctx.filter,newDecay);
   }
};

typedef Processor_combFF__ctx_type_0 Processor_combFF_updateConfig_type;

static_inline void Processor_combFF_updateConfig_init(Processor_combFF__ctx_type_0 &_output_){
   Processor_combFF__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_combFF_updateConfig(Processor_combFF__ctx_type_0 &_ctx){
   Processor_combFF_applyDelay(_ctx);
};

typedef Processor_combFF__ctx_type_0 Processor_combFF_setSamplerate_type;

static_inline void Processor_combFF_setSamplerate_init(Processor_combFF__ctx_type_0 &_output_){
   Processor_combFF__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_combFF_setSamplerate(Processor_combFF__ctx_type_0 &_ctx, fix16_t newFs){
   if((newFs > 0x0 /* 0.000000 */) && (newFs != _ctx.fs)){
      _ctx.fs = newFs;
      CombFF_setSamplerate(_ctx.filter,_ctx.fs);
   }
};

typedef Processor_combFF__ctx_type_0 Processor_combFF_default_type;

static_inline void Processor_combFF_default_init(Processor_combFF__ctx_type_0 &_output_){
   Processor_combFF__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_combFF_default(Processor_combFF__ctx_type_0 &_ctx){
   CombFF_default(_ctx.filter);
   Processor_combFF_setDecay(_ctx,0x8000 /* 0.500000 */,true);
   Processor_combFF_setDelay(_ctx,0x320000 /* 50.000000 */,true);
   Processor_combFF_setSamplerate(_ctx,0x2c1999 /* 44.100000 */);
}



#endif // ENGINE_EFFECTS_EXTRA_H
