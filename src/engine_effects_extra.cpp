
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "engine_effects_extra.h"

void extra_Buffer_buffer_large(fix16_t (&oBuff)[16384]){
   int i;
   i = 0;
   while(i < 16384){
      oBuff[i] = 0x0 /* 0.000000 */;
      i = (1 + i);
   }
}

void extra_Allpass__ctx_type_0_init(extra_Allpass__ctx_type_0 &_output_){
   extra_Allpass__ctx_type_0 _ctx;
   _ctx.scale = 0x0 /* 0.000000 */;
   _ctx.pos = 0;
   _ctx.fs = 0x0 /* 0.000000 */;
   _ctx.delay = 0;
   _ctx.decay = 0x0 /* 0.000000 */;
   ;
   ;
   extra_Allpass_default(_ctx);
   _output_ = _ctx;
   return ;
}

fix16_t extra_Allpass_process(extra_Allpass__ctx_type_0 &_ctx, fix16_t sample){
   fix16_t out;
   out = (_ctx.buffer[_ctx.pos] + fix_mul(_ctx.decay,(sample + (- _ctx.buffer_allpassed[_ctx.pos]))));
   _ctx.buffer[_ctx.pos] = sample;
   _ctx.buffer_allpassed[_ctx.pos] = out;
   _ctx.pos = (1 + _ctx.pos);
   _ctx.pos = (_ctx.pos % _ctx.delay);
   return fix_mul(_ctx.scale,out);
}

void extra_Allpass_process_bufferTo(extra_Allpass__ctx_type_0 &_ctx, int nb, fix16_t (&input)[256], fix16_t (&oBuffer)[256]){
   nb = int_clip(nb,0,256);
   if(nb == 0){
      nb = 256;
   }
   fix16_t out;
   int i;
   i = 0;
   while(i < nb){
      out = (_ctx.buffer[_ctx.pos] + fix_mul(_ctx.decay,(input[i] + (- _ctx.buffer_allpassed[_ctx.pos]))));
      _ctx.buffer[_ctx.pos] = input[i];
      _ctx.buffer_allpassed[_ctx.pos] = out;
      oBuffer[i] = fix_mul(_ctx.scale,out);
      _ctx.pos = (1 + _ctx.pos);
      _ctx.pos = (_ctx.pos % _ctx.delay);
      i = (1 + i);
   }
}

void extra_Allpass_default(extra_Allpass__ctx_type_0 &_ctx){
   extra_Buffer_buffer_large(_ctx.buffer);
   extra_Buffer_buffer_large(_ctx.buffer_allpassed);
   extra_Allpass_setSamplerate(_ctx,0x2c1999 /* 44.100000 */);
   extra_Allpass_setDelayms(_ctx,0x320000 /* 50.000000 */);
   extra_Allpass_setDecay(_ctx,0x8000 /* 0.500000 */);
}

void extra_CombFB__ctx_type_0_init(extra_CombFB__ctx_type_0 &_output_){
   extra_CombFB__ctx_type_0 _ctx;
   _ctx.scale = 0x0 /* 0.000000 */;
   _ctx.pos = 0;
   _ctx.fs = 0x0 /* 0.000000 */;
   _ctx.delay = 0;
   _ctx.decay = 0x0 /* 0.000000 */;
   ;
   extra_CombFB_default(_ctx);
   _output_ = _ctx;
   return ;
}

fix16_t extra_CombFB_process(extra_CombFB__ctx_type_0 &_ctx, fix16_t sample){
   fix16_t out;
   out = (sample + fix_mul(_ctx.decay,_ctx.buffer[_ctx.pos]));
   _ctx.buffer[_ctx.pos] = out;
   _ctx.pos = (1 + _ctx.pos);
   _ctx.pos = (_ctx.pos % _ctx.delay);
   return fix_mul(_ctx.scale,out);
}

void extra_CombFB_process_bufferTo(extra_CombFB__ctx_type_0 &_ctx, int nb, fix16_t (&input)[256], fix16_t (&oBuffer)[256]){
   nb = int_clip(nb,0,256);
   if(nb == 0){
      nb = 256;
   }
   fix16_t out;
   int i;
   i = 0;
   while(i < nb){
      out = (input[i] + fix_mul(_ctx.decay,_ctx.buffer[_ctx.pos]));
      _ctx.buffer[_ctx.pos] = out;
      oBuffer[i] = fix_mul(_ctx.scale,out);
      _ctx.pos = (1 + _ctx.pos);
      _ctx.pos = (_ctx.pos % _ctx.delay);
      i = (1 + i);
   }
}

void extra_Processor_combFB__ctx_type_0_init(extra_Processor_combFB__ctx_type_0 &_output_){
   extra_Processor_combFB__ctx_type_0 _ctx;
   _ctx.fs = 0x0 /* 0.000000 */;
   extra_CombFB__ctx_type_0_init(_ctx.filter);
   _ctx.delayms = 0x0 /* 0.000000 */;
   extra_Util__ctx_type_3_init(_ctx._inst53b);
   extra_Util__ctx_type_3_init(_ctx._inst23b);
   extra_Processor_combFB_default(_ctx);
   _output_ = _ctx;
   return ;
}

void extra_Processor_allpass__ctx_type_0_init(extra_Processor_allpass__ctx_type_0 &_output_){
   extra_Processor_allpass__ctx_type_0 _ctx;
   _ctx.fs = 0x0 /* 0.000000 */;
   extra_Allpass__ctx_type_0_init(_ctx.filter);
   _ctx.delayms = 0x0 /* 0.000000 */;
   extra_Util__ctx_type_3_init(_ctx._inst53b);
   extra_Util__ctx_type_3_init(_ctx._inst23b);
   extra_Processor_allpass_default(_ctx);
   _output_ = _ctx;
   return ;
}

void extra_CombFF__ctx_type_0_init(extra_CombFF__ctx_type_0 &_output_){
   extra_CombFF__ctx_type_0 _ctx;
   _ctx.scale = 0x0 /* 0.000000 */;
   _ctx.pos = 0;
   _ctx.fs = 0x0 /* 0.000000 */;
   _ctx.delay = 0;
   _ctx.decay = 0x0 /* 0.000000 */;
   ;
   extra_CombFF_default(_ctx);
   _output_ = _ctx;
   return ;
}

fix16_t extra_CombFF_process(extra_CombFF__ctx_type_0 &_ctx, fix16_t sample){
   fix16_t decayed;
   decayed = fix_mul(_ctx.decay,_ctx.buffer[_ctx.pos]);
   _ctx.buffer[_ctx.pos] = sample;
   _ctx.pos = (1 + _ctx.pos);
   _ctx.pos = (_ctx.pos % _ctx.delay);
   return fix_mul(_ctx.scale,(decayed + sample));
}

void extra_CombFF_process_bufferTo(extra_CombFF__ctx_type_0 &_ctx, int nb, fix16_t (&input)[256], fix16_t (&oBuffer)[256]){
   nb = int_clip(nb,0,256);
   if(nb == 0){
      nb = 256;
   }
   fix16_t decayed;
   int i;
   i = 0;
   while(i < nb){
      decayed = fix_mul(_ctx.decay,_ctx.buffer[_ctx.pos]);
      _ctx.buffer[_ctx.pos] = input[i];
      oBuffer[i] = fix_mul(_ctx.scale,(decayed + _ctx.buffer[_ctx.pos]));
      _ctx.pos = (1 + _ctx.pos);
      _ctx.pos = (_ctx.pos % _ctx.delay);
      i = (1 + i);
   }
}

void extra_Processor_combFF__ctx_type_0_init(extra_Processor_combFF__ctx_type_0 &_output_){
   extra_Processor_combFF__ctx_type_0 _ctx;
   _ctx.fs = 0x0 /* 0.000000 */;
   extra_CombFF__ctx_type_0_init(_ctx.filter);
   _ctx.delayms = 0x0 /* 0.000000 */;
   extra_Util__ctx_type_3_init(_ctx._inst53b);
   extra_Util__ctx_type_3_init(_ctx._inst23b);
   extra_Processor_combFF_default(_ctx);
   _output_ = _ctx;
   return ;
}


