
// input 1: gate (should normalized -1..1 , gate if >= 0.1, i.e. 1v)
fun process(gate:real, in2:real, in3:real, in4:real, fs:real) {
   mem param1, param2, param3, param4;

   // received new trigger gate
   if(Util.edge(gate >= 0.1)) {
      // create fixed A4
      _ = voice:Voice.noteOn(69, 120, 0);
   }
   // newly off
   else if(Util.edge(gate < 0.1)) {
      _ = voice:Voice.noteOff(69, 0);
   }

   val out1, out2, out3, out4 = gate, in2, in3, in4;

   // synthFM -> out1
   out1 = voice:Voice.process();

   return out1, out2, out3, out4;
}
and setParam1(knob, mod, input) {
   param1 = clip(knob + mod * input, 0.0, 1.0);
}
and setParam2(knob, mod, input) {
   param2 = clip(knob + mod * input, 0.0, 1.0);
}
and setParam3(knob, mod, input) {
   param3 = clip(knob + mod * input, 0.0, 1.0);
}
and setParam4(knob, mod, input) {
   param4 = clip(knob + mod * input, 0.0, 1.0);
}
and setSamplerate(newFs:real) {
   mem fs;
   if (newFs > 0.0) {
      fs = newFs;
      _ = voice:Voice.setSamplerate(fs);
   }
}
and default() @[init] {
   _ = voice:Voice.default();
   _ = setSamplerate(44.1);
}
