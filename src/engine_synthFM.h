
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef ENGINE_SYNTHFM_H
#define ENGINE_SYNTHFM_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "engine_synthFM.tables.h"

typedef struct synthFM__tuple___real_real_real_real__ {
   fix16_t field_0;
   fix16_t field_1;
   fix16_t field_2;
   fix16_t field_3;
} synthFM__tuple___real_real_real_real__;

static_inline fix16_t synthFM_Util_noteToFrequency(int note){
   return fix_mul(0x217 /* 0.008176 */,fix_exp(fix_mul(0xec9 /* 0.057762 */,int_to_fix(note))));
};

typedef struct synthFM_Util__ctx_type_1 {
   uint8_t pre;
} synthFM_Util__ctx_type_1;

typedef synthFM_Util__ctx_type_1 synthFM_Util_edge_type;

static_inline void synthFM_Util__ctx_type_1_init(synthFM_Util__ctx_type_1 &_output_){
   synthFM_Util__ctx_type_1 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

static_inline void synthFM_Util_edge_init(synthFM_Util__ctx_type_1 &_output_){
   synthFM_Util__ctx_type_1_init(_output_);
   return ;
}

static_inline uint8_t synthFM_Util_edge(synthFM_Util__ctx_type_1 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

static_inline fix16_t synthFM_Util_cubic_clipper(fix16_t x){
   if(x <= -0xaaaa /* -0.666667 */){
      return -0xaaaa /* -0.666667 */;
   }
   else
   {
      if(x >= 0xaaaa /* 0.666667 */){
         return 0xaaaa /* 0.666667 */;
      }
      else
      {
         return (x + fix_mul(fix_mul(fix_mul(-0x5555 /* -0.333333 */,x),x),x));
      }
   }
};

typedef struct synthFM_Util__ctx_type_3 {
   fix16_t pre_x;
} synthFM_Util__ctx_type_3;

typedef synthFM_Util__ctx_type_3 synthFM_Util_change_type;

static_inline void synthFM_Util__ctx_type_3_init(synthFM_Util__ctx_type_3 &_output_){
   synthFM_Util__ctx_type_3 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void synthFM_Util_change_init(synthFM_Util__ctx_type_3 &_output_){
   synthFM_Util__ctx_type_3_init(_output_);
   return ;
}

static_inline uint8_t synthFM_Util_change(synthFM_Util__ctx_type_3 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

static_inline void synthFM_Util_buffer(fix16_t (&_output_)[256]){
   fix16_t buff[256];
   fix_copy_array(256,_output_,buff);
   return ;
}

static_inline void synthFM_Util_buffer_large(fix16_t (&_output_)[2048]){
   fix16_t buff[2048];
   fix_copy_array(2048,_output_,buff);
   return ;
}

typedef struct synthFM_Util__ctx_type_6 {
   fix16_t x;
} synthFM_Util__ctx_type_6;

typedef synthFM_Util__ctx_type_6 synthFM_Util_smooth_type;

static_inline void synthFM_Util__ctx_type_6_init(synthFM_Util__ctx_type_6 &_output_){
   synthFM_Util__ctx_type_6 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void synthFM_Util_smooth_init(synthFM_Util__ctx_type_6 &_output_){
   synthFM_Util__ctx_type_6_init(_output_);
   return ;
}

static_inline fix16_t synthFM_Util_smooth(synthFM_Util__ctx_type_6 &_ctx, fix16_t input, fix16_t coeff){
   _ctx.x = (_ctx.x + fix_mul(coeff,(input + (- _ctx.x))));
   return _ctx.x;
}

static_inline fix16_t synthFM_Util_velocityToLevel(int velocity){
   velocity = int_clip(velocity,0,127);
   return fix_mul(0x204 /* 0.007874 */,int_to_fix(velocity));
}

static_inline int synthFM_Wavetable_sin_wave_samples(){
   return 4096;
};

static_inline fix16_t synthFM_Wavetable_sin_wave(int channel, int index){
   if(channel == 0){
      return fix_wrap_array(synthFM_Wavetable_sin_wave_chan_0)[(index % 4096)];
   }
   return 0x0 /* 0.000000 */;
}

static_inline int synthFM_Wavetable_tri_wave_samples(){
   return 4096;
};

static_inline fix16_t synthFM_Wavetable_tri_wave(int channel, int index){
   if(channel == 0){
      return fix_wrap_array(synthFM_Wavetable_tri_wave_chan_0)[(index % 4096)];
   }
   return 0x0 /* 0.000000 */;
}

static_inline int synthFM_Wavetable_saw_wave_samples(){
   return 2048;
};

static_inline fix16_t synthFM_Wavetable_saw_wave(int channel, int index){
   if(channel == 0){
      return fix_wrap_array(synthFM_Wavetable_saw_wave_chan_0)[(index % 2048)];
   }
   return 0x0 /* 0.000000 */;
}

static_inline int synthFM_Wavetable_square_wave_samples(){
   return 4096;
};

static_inline fix16_t synthFM_Wavetable_square_wave(int channel, int index){
   if(channel == 0){
      return fix_wrap_array(synthFM_Wavetable_square_wave_chan_0)[(index % 4096)];
   }
   return 0x0 /* 0.000000 */;
}

fix16_t synthFM_Wavetable_getSample(int wavetableIdx, int index);

static_inline fix16_t synthFM_Wavetable_getSampleFrom(fix16_t (&wavetable)[4096], int index){
   if(index >= 4096){
      index = (index % 4096);
   }
   return wavetable[index];
}

static_inline int synthFM_Wavetable_getNbWavetables(){
   return 4;
};

void synthFM_Wavetable_morphTo(fix16_t wavetableIdx, fix16_t (&buffer)[4096]);

static_inline void synthFM_Wavetable_bufferWavetable(fix16_t (&_output_)[4096]){
   fix16_t buff[4096];
   fix_copy_array(4096,_output_,buff);
   return ;
}

static_inline int synthFM_Wavetable_bufferSize(){
   return 4096;
};

void synthFM_Wavetable_getRandomMorph(fix16_t (&_output_)[4096]);

fix16_t synthFM_Wavetable_getRandRandomMorph();

typedef struct synthFM_OSC__ctx_type_0 {
   fix16_t stepRatio;
   fix16_t step;
   fix16_t rsize;
   fix16_t phase_base;
   fix16_t phase;
   fix16_t fs;
   fix16_t freq;
} synthFM_OSC__ctx_type_0;

typedef synthFM_OSC__ctx_type_0 synthFM_OSC_process_type;

void synthFM_OSC__ctx_type_0_init(synthFM_OSC__ctx_type_0 &_output_);

static_inline void synthFM_OSC_process_init(synthFM_OSC__ctx_type_0 &_output_){
   synthFM_OSC__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t synthFM_OSC_process(synthFM_OSC__ctx_type_0 &_ctx, fix16_t (&wavetable)[4096]){
   _ctx.phase = (_ctx.phase + _ctx.step);
   while(_ctx.phase > _ctx.rsize){
      _ctx.phase = (_ctx.phase + (- _ctx.rsize));
   }
   return synthFM_Wavetable_getSampleFrom(wavetable,fix_to_int((_ctx.phase + _ctx.phase_base)));
}

typedef synthFM_OSC__ctx_type_0 synthFM_OSC_process_bufferTo_type;

static_inline void synthFM_OSC_process_bufferTo_init(synthFM_OSC__ctx_type_0 &_output_){
   synthFM_OSC__ctx_type_0_init(_output_);
   return ;
}

void synthFM_OSC_process_bufferTo(synthFM_OSC__ctx_type_0 &_ctx, fix16_t (&wavetable)[4096], int nb, fix16_t (&env)[256], fix16_t (&phase_shift)[256], fix16_t phase_shift_level, fix16_t (&oBuffer)[256]);

typedef synthFM_OSC__ctx_type_0 synthFM_OSC_process_bufferTo_simple_type;

static_inline void synthFM_OSC_process_bufferTo_simple_init(synthFM_OSC__ctx_type_0 &_output_){
   synthFM_OSC__ctx_type_0_init(_output_);
   return ;
}

void synthFM_OSC_process_bufferTo_simple(synthFM_OSC__ctx_type_0 &_ctx, fix16_t (&wavetable)[4096], int nb, fix16_t (&env)[256], fix16_t (&oBuffer)[256]);

typedef synthFM_OSC__ctx_type_0 synthFM_OSC_process_bufferTo_simplest_type;

static_inline void synthFM_OSC_process_bufferTo_simplest_init(synthFM_OSC__ctx_type_0 &_output_){
   synthFM_OSC__ctx_type_0_init(_output_);
   return ;
}

void synthFM_OSC_process_bufferTo_simplest(synthFM_OSC__ctx_type_0 &_ctx, fix16_t (&wavetable)[4096], int nb, fix16_t (&oBuffer)[256]);

typedef synthFM_OSC__ctx_type_0 synthFM_OSC_updateStep_type;

static_inline void synthFM_OSC_updateStep_init(synthFM_OSC__ctx_type_0 &_output_){
   synthFM_OSC__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_OSC_updateStep(synthFM_OSC__ctx_type_0 &_ctx){
   _ctx.step = fix_mul(_ctx.freq,_ctx.stepRatio);
};

typedef synthFM_OSC__ctx_type_0 synthFM_OSC_setSamplerate_type;

static_inline void synthFM_OSC_setSamplerate_init(synthFM_OSC__ctx_type_0 &_output_){
   synthFM_OSC__ctx_type_0_init(_output_);
   return ;
}

void synthFM_OSC_setSamplerate(synthFM_OSC__ctx_type_0 &_ctx, fix16_t newFs);

typedef synthFM_OSC__ctx_type_0 synthFM_OSC_setFrequency_type;

static_inline void synthFM_OSC_setFrequency_init(synthFM_OSC__ctx_type_0 &_output_){
   synthFM_OSC__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_OSC_setFrequency(synthFM_OSC__ctx_type_0 &_ctx, fix16_t newFreq){
   _ctx.freq = newFreq;
   synthFM_OSC_updateStep(_ctx);
}

typedef synthFM_OSC__ctx_type_0 synthFM_OSC_setPhase_type;

static_inline void synthFM_OSC_setPhase_init(synthFM_OSC__ctx_type_0 &_output_){
   synthFM_OSC__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_OSC_setPhase(synthFM_OSC__ctx_type_0 &_ctx, fix16_t newPhase){
   _ctx.phase_base = newPhase;
};

typedef synthFM_OSC__ctx_type_0 synthFM_OSC_resetPhase_type;

static_inline void synthFM_OSC_resetPhase_init(synthFM_OSC__ctx_type_0 &_output_){
   synthFM_OSC__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_OSC_resetPhase(synthFM_OSC__ctx_type_0 &_ctx){
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx.phase_base = 0x0 /* 0.000000 */;
}

typedef synthFM_OSC__ctx_type_0 synthFM_OSC_getSize_type;

static_inline void synthFM_OSC_getSize_init(synthFM_OSC__ctx_type_0 &_output_){
   synthFM_OSC__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t synthFM_OSC_getSize(synthFM_OSC__ctx_type_0 &_ctx){
   return _ctx.rsize;
};

typedef synthFM_OSC__ctx_type_0 synthFM_OSC_default_type;

static_inline void synthFM_OSC_default_init(synthFM_OSC__ctx_type_0 &_output_){
   synthFM_OSC__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_OSC_default(synthFM_OSC__ctx_type_0 &_ctx){
   _ctx.rsize = 0x10000000 /* 4096.000000 */;
   synthFM_OSC_setSamplerate(_ctx,0x2c1999 /* 44.100000 */);
   synthFM_OSC_setFrequency(_ctx,0x70a3 /* 0.440000 */);
}

typedef struct synthFM_Notes__ctx_type_0 {
   uint8_t poly;
   int notes[128];
   int nb_notes;
   int last_notes[128];
} synthFM_Notes__ctx_type_0;

typedef synthFM_Notes__ctx_type_0 synthFM_Notes_setPoly_type;

void synthFM_Notes__ctx_type_0_init(synthFM_Notes__ctx_type_0 &_output_);

static_inline void synthFM_Notes_setPoly_init(synthFM_Notes__ctx_type_0 &_output_){
   synthFM_Notes__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Notes_setPoly(synthFM_Notes__ctx_type_0 &_ctx, uint8_t flag){
   _ctx.poly = flag;
};

typedef synthFM_Notes__ctx_type_0 synthFM_Notes_default_type;

static_inline void synthFM_Notes_default_init(synthFM_Notes__ctx_type_0 &_output_){
   synthFM_Notes__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Notes_default(synthFM_Notes__ctx_type_0 &_ctx){
   synthFM_Notes_setPoly(_ctx,false);
};

typedef synthFM_Notes__ctx_type_0 synthFM_Notes_nbNotes_type;

static_inline void synthFM_Notes_nbNotes_init(synthFM_Notes__ctx_type_0 &_output_){
   synthFM_Notes__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthFM_Notes_nbNotes(synthFM_Notes__ctx_type_0 &_ctx){
   return _ctx.nb_notes;
};

typedef synthFM_Notes__ctx_type_0 synthFM_Notes_firstNote_type;

static_inline void synthFM_Notes_firstNote_init(synthFM_Notes__ctx_type_0 &_output_){
   synthFM_Notes__ctx_type_0_init(_output_);
   return ;
}

int synthFM_Notes_firstNote(synthFM_Notes__ctx_type_0 &_ctx);

typedef synthFM_Notes__ctx_type_0 synthFM_Notes_lastNote_type;

static_inline void synthFM_Notes_lastNote_init(synthFM_Notes__ctx_type_0 &_output_){
   synthFM_Notes__ctx_type_0_init(_output_);
   return ;
}

int synthFM_Notes_lastNote(synthFM_Notes__ctx_type_0 &_ctx);

typedef synthFM_Notes__ctx_type_0 synthFM_Notes_noteOn_type;

static_inline void synthFM_Notes_noteOn_init(synthFM_Notes__ctx_type_0 &_output_){
   synthFM_Notes__ctx_type_0_init(_output_);
   return ;
}

uint8_t synthFM_Notes_noteOn(synthFM_Notes__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef synthFM_Notes__ctx_type_0 synthFM_Notes_noteOff_type;

static_inline void synthFM_Notes_noteOff_init(synthFM_Notes__ctx_type_0 &_output_){
   synthFM_Notes__ctx_type_0_init(_output_);
   return ;
}

uint8_t synthFM_Notes_noteOff(synthFM_Notes__ctx_type_0 &_ctx, int note, int channel);

typedef struct synthFM_ADSR__ctx_type_0 {
   fix16_t getMaxValues_ret_3;
   fix16_t getMaxValues_ret_2;
   fix16_t getMaxValues_ret_1;
   fix16_t getMaxValues_ret_0;
} synthFM_ADSR__ctx_type_0;

typedef synthFM_ADSR__ctx_type_0 synthFM_ADSR_getMaxValues_type;

void synthFM_ADSR__ctx_type_0_init(synthFM_ADSR__ctx_type_0 &_output_);

static_inline void synthFM_ADSR_getMaxValues_init(synthFM_ADSR__ctx_type_0 &_output_){
   synthFM_ADSR__ctx_type_0_init(_output_);
   return ;
}

void synthFM_ADSR_getMaxValues(synthFM_ADSR__ctx_type_0 &_ctx);

typedef synthFM_ADSR__ctx_type_0 synthFM_ADSR_getMaxValues_ret_0_type;

static_inline void synthFM_ADSR_getMaxValues_ret_0_init(synthFM_ADSR__ctx_type_0 &_output_){
   synthFM_ADSR__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t synthFM_ADSR_getMaxValues_ret_0(synthFM_ADSR__ctx_type_0 &_ctx){
   return _ctx.getMaxValues_ret_0;
};

typedef synthFM_ADSR__ctx_type_0 synthFM_ADSR_getMaxValues_ret_1_type;

static_inline void synthFM_ADSR_getMaxValues_ret_1_init(synthFM_ADSR__ctx_type_0 &_output_){
   synthFM_ADSR__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t synthFM_ADSR_getMaxValues_ret_1(synthFM_ADSR__ctx_type_0 &_ctx){
   return _ctx.getMaxValues_ret_1;
};

typedef synthFM_ADSR__ctx_type_0 synthFM_ADSR_getMaxValues_ret_2_type;

static_inline void synthFM_ADSR_getMaxValues_ret_2_init(synthFM_ADSR__ctx_type_0 &_output_){
   synthFM_ADSR__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t synthFM_ADSR_getMaxValues_ret_2(synthFM_ADSR__ctx_type_0 &_ctx){
   return _ctx.getMaxValues_ret_2;
};

typedef synthFM_ADSR__ctx_type_0 synthFM_ADSR_getMaxValues_ret_3_type;

static_inline void synthFM_ADSR_getMaxValues_ret_3_init(synthFM_ADSR__ctx_type_0 &_output_){
   synthFM_ADSR__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t synthFM_ADSR_getMaxValues_ret_3(synthFM_ADSR__ctx_type_0 &_ctx){
   return _ctx.getMaxValues_ret_3;
};

typedef struct synthFM_ADSR__ctx_type_1 {
   synthFM_ADSR__ctx_type_0 _inst173;
} synthFM_ADSR__ctx_type_1;

typedef synthFM_ADSR__ctx_type_1 synthFM_ADSR_getMaxAttack_type;

static_inline void synthFM_ADSR__ctx_type_1_init(synthFM_ADSR__ctx_type_1 &_output_){
   synthFM_ADSR__ctx_type_1 _ctx;
   synthFM_ADSR__ctx_type_0_init(_ctx._inst173);
   _output_ = _ctx;
   return ;
}

static_inline void synthFM_ADSR_getMaxAttack_init(synthFM_ADSR__ctx_type_1 &_output_){
   synthFM_ADSR__ctx_type_1_init(_output_);
   return ;
}

fix16_t synthFM_ADSR_getMaxAttack(synthFM_ADSR__ctx_type_1 &_ctx);

typedef struct synthFM_ADSR__ctx_type_2 {
   synthFM_ADSR__ctx_type_0 _inst173;
} synthFM_ADSR__ctx_type_2;

typedef synthFM_ADSR__ctx_type_2 synthFM_ADSR_getMaxDecay_type;

static_inline void synthFM_ADSR__ctx_type_2_init(synthFM_ADSR__ctx_type_2 &_output_){
   synthFM_ADSR__ctx_type_2 _ctx;
   synthFM_ADSR__ctx_type_0_init(_ctx._inst173);
   _output_ = _ctx;
   return ;
}

static_inline void synthFM_ADSR_getMaxDecay_init(synthFM_ADSR__ctx_type_2 &_output_){
   synthFM_ADSR__ctx_type_2_init(_output_);
   return ;
}

fix16_t synthFM_ADSR_getMaxDecay(synthFM_ADSR__ctx_type_2 &_ctx);

typedef struct synthFM_ADSR__ctx_type_3 {
   synthFM_ADSR__ctx_type_0 _inst173;
} synthFM_ADSR__ctx_type_3;

typedef synthFM_ADSR__ctx_type_3 synthFM_ADSR_getMaxSurtain_type;

static_inline void synthFM_ADSR__ctx_type_3_init(synthFM_ADSR__ctx_type_3 &_output_){
   synthFM_ADSR__ctx_type_3 _ctx;
   synthFM_ADSR__ctx_type_0_init(_ctx._inst173);
   _output_ = _ctx;
   return ;
}

static_inline void synthFM_ADSR_getMaxSurtain_init(synthFM_ADSR__ctx_type_3 &_output_){
   synthFM_ADSR__ctx_type_3_init(_output_);
   return ;
}

fix16_t synthFM_ADSR_getMaxSurtain(synthFM_ADSR__ctx_type_3 &_ctx);

typedef struct synthFM_ADSR__ctx_type_4 {
   synthFM_ADSR__ctx_type_0 _inst173;
} synthFM_ADSR__ctx_type_4;

typedef synthFM_ADSR__ctx_type_4 synthFM_ADSR_getMaxRelease_type;

static_inline void synthFM_ADSR__ctx_type_4_init(synthFM_ADSR__ctx_type_4 &_output_){
   synthFM_ADSR__ctx_type_4 _ctx;
   synthFM_ADSR__ctx_type_0_init(_ctx._inst173);
   _output_ = _ctx;
   return ;
}

static_inline void synthFM_ADSR_getMaxRelease_init(synthFM_ADSR__ctx_type_4 &_output_){
   synthFM_ADSR__ctx_type_4_init(_output_);
   return ;
}

fix16_t synthFM_ADSR_getMaxRelease(synthFM_ADSR__ctx_type_4 &_ctx);

typedef struct synthFM_ADSR__ctx_type_5 {
   fix16_t target;
   fix16_t step;
   int state;
   fix16_t s;
   fix16_t r_step;
   fix16_t r;
   fix16_t out;
   fix16_t fs;
   fix16_t d_step;
   fix16_t d;
   fix16_t a_target;
   fix16_t a_step;
   fix16_t a;
   synthFM_Util__ctx_type_1 _inst351;
   synthFM_ADSR__ctx_type_0 _inst2173;
   synthFM_Util__ctx_type_1 _inst151;
} synthFM_ADSR__ctx_type_5;

typedef synthFM_ADSR__ctx_type_5 synthFM_ADSR_process_type;

void synthFM_ADSR__ctx_type_5_init(synthFM_ADSR__ctx_type_5 &_output_);

static_inline void synthFM_ADSR_process_init(synthFM_ADSR__ctx_type_5 &_output_){
   synthFM_ADSR__ctx_type_5_init(_output_);
   return ;
}

fix16_t synthFM_ADSR_process(synthFM_ADSR__ctx_type_5 &_ctx, uint8_t bgate);

typedef synthFM_ADSR__ctx_type_5 synthFM_ADSR_process_bufferTo_type;

static_inline void synthFM_ADSR_process_bufferTo_init(synthFM_ADSR__ctx_type_5 &_output_){
   synthFM_ADSR__ctx_type_5_init(_output_);
   return ;
}

uint8_t synthFM_ADSR_process_bufferTo(synthFM_ADSR__ctx_type_5 &_ctx, uint8_t bgate, int nb, fix16_t (&oBuffer)[256]);

typedef synthFM_ADSR__ctx_type_5 synthFM_ADSR_updateSteps_type;

static_inline void synthFM_ADSR_updateSteps_init(synthFM_ADSR__ctx_type_5 &_output_){
   synthFM_ADSR__ctx_type_5_init(_output_);
   return ;
}

void synthFM_ADSR_updateSteps(synthFM_ADSR__ctx_type_5 &_ctx);

typedef synthFM_ADSR__ctx_type_5 synthFM_ADSR_setSamplerate_type;

static_inline void synthFM_ADSR_setSamplerate_init(synthFM_ADSR__ctx_type_5 &_output_){
   synthFM_ADSR__ctx_type_5_init(_output_);
   return ;
}

static_inline void synthFM_ADSR_setSamplerate(synthFM_ADSR__ctx_type_5 &_ctx, fix16_t newFs){
   if(newFs > 0x0 /* 0.000000 */){
      _ctx.fs = newFs;
   }
   synthFM_ADSR_updateSteps(_ctx);
}

typedef synthFM_ADSR__ctx_type_5 synthFM_ADSR_config_type;

static_inline void synthFM_ADSR_config_init(synthFM_ADSR__ctx_type_5 &_output_){
   synthFM_ADSR__ctx_type_5_init(_output_);
   return ;
}

void synthFM_ADSR_config(synthFM_ADSR__ctx_type_5 &_ctx, fix16_t newA, fix16_t newD, fix16_t newS, fix16_t newR);

typedef synthFM_ADSR__ctx_type_5 synthFM_ADSR_default_type;

static_inline void synthFM_ADSR_default_init(synthFM_ADSR__ctx_type_5 &_output_){
   synthFM_ADSR__ctx_type_5_init(_output_);
   return ;
}

static_inline void synthFM_ADSR_default(synthFM_ADSR__ctx_type_5 &_ctx){
   _ctx.a_target = 0x10000 /* 1.000000 */;
   synthFM_ADSR_setSamplerate(_ctx,0x2c1999 /* 44.100000 */);
   synthFM_ADSR_config(_ctx,0x0 /* 0.000000 */,0x0 /* 0.000000 */,0x8000 /* 0.500000 */,0x0 /* 0.000000 */);
}

typedef struct synthFM_FM__ctx_type_0 {
   synthFM_Notes__ctx_type_0 playingnotes;
   int n;
   synthFM_ADSR__ctx_type_5 modulatoradsr;
   fix16_t modulator_level;
   fix16_t modulator_env;
   fix16_t modulatorRatio;
   synthFM_OSC__ctx_type_0 modulator;
   fix16_t level;
   uint8_t gate;
   fix16_t fs;
   int env_decimation_factor;
   synthFM_ADSR__ctx_type_5 carrieradsr;
   fix16_t carrier_half_phase;
   fix16_t carrier_env;
   fix16_t carrierRatio;
   synthFM_OSC__ctx_type_0 carrier;
   fix16_t buffer_modulator_env_short[256];
   fix16_t buffer_modulator_env[256];
   fix16_t buffer_modulator[256];
   fix16_t buffer_carrier_env_short[256];
   fix16_t buffer_carrier_env[256];
} synthFM_FM__ctx_type_0;

typedef synthFM_FM__ctx_type_0 synthFM_FM_process_type;

void synthFM_FM__ctx_type_0_init(synthFM_FM__ctx_type_0 &_output_);

static_inline void synthFM_FM_process_init(synthFM_FM__ctx_type_0 &_output_){
   synthFM_FM__ctx_type_0_init(_output_);
   return ;
}

fix16_t synthFM_FM_process(synthFM_FM__ctx_type_0 &_ctx, fix16_t (&wavetable_modulator)[4096], fix16_t (&wavetable_carrier)[4096]);

typedef synthFM_FM__ctx_type_0 synthFM_FM_process_bufferTo_type;

static_inline void synthFM_FM_process_bufferTo_init(synthFM_FM__ctx_type_0 &_output_){
   synthFM_FM__ctx_type_0_init(_output_);
   return ;
}

void synthFM_FM_process_bufferTo(synthFM_FM__ctx_type_0 &_ctx, fix16_t (&wavetable_modulator)[4096], fix16_t (&wavetable_carrier)[4096], int nb, fix16_t (&oBuffer)[256]);

typedef synthFM_FM__ctx_type_0 synthFM_FM_setSamplerate_type;

static_inline void synthFM_FM_setSamplerate_init(synthFM_FM__ctx_type_0 &_output_){
   synthFM_FM__ctx_type_0_init(_output_);
   return ;
}

void synthFM_FM_setSamplerate(synthFM_FM__ctx_type_0 &_ctx, fix16_t newFs);

typedef synthFM_FM__ctx_type_0 synthFM_FM_setCarrierRatio_type;

static_inline void synthFM_FM_setCarrierRatio_init(synthFM_FM__ctx_type_0 &_output_){
   synthFM_FM__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_FM_setCarrierRatio(synthFM_FM__ctx_type_0 &_ctx, fix16_t ratio){
   if(ratio < 0x0 /* 0.000000 */){
      ratio = 0x0 /* 0.000000 */;
   }
   _ctx.carrierRatio = ratio;
}

typedef synthFM_FM__ctx_type_0 synthFM_FM_setModulatorRatio_type;

static_inline void synthFM_FM_setModulatorRatio_init(synthFM_FM__ctx_type_0 &_output_){
   synthFM_FM__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_FM_setModulatorRatio(synthFM_FM__ctx_type_0 &_ctx, fix16_t ratio){
   if(ratio < 0x0 /* 0.000000 */){
      ratio = 0x0 /* 0.000000 */;
   }
   _ctx.modulatorRatio = ratio;
}

typedef synthFM_FM__ctx_type_0 synthFM_FM_setModulatorLevel_type;

static_inline void synthFM_FM_setModulatorLevel_init(synthFM_FM__ctx_type_0 &_output_){
   synthFM_FM__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_FM_setModulatorLevel(synthFM_FM__ctx_type_0 &_ctx, fix16_t newLevel){
   _ctx.modulator_level = newLevel;
   _ctx.carrier_half_phase = (fix_mul(_ctx.modulator_level,synthFM_OSC_getSize(_ctx.carrier)) >> 1);
}

typedef synthFM_FM__ctx_type_0 synthFM_FM_setLevel_type;

static_inline void synthFM_FM_setLevel_init(synthFM_FM__ctx_type_0 &_output_){
   synthFM_FM__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_FM_setLevel(synthFM_FM__ctx_type_0 &_ctx, fix16_t newLevel){
   _ctx.level = newLevel;
};

typedef synthFM_FM__ctx_type_0 synthFM_FM_setFrequency_type;

static_inline void synthFM_FM_setFrequency_init(synthFM_FM__ctx_type_0 &_output_){
   synthFM_FM__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_FM_setFrequency(synthFM_FM__ctx_type_0 &_ctx, fix16_t freq){
   synthFM_OSC_setFrequency(_ctx.carrier,fix_mul(_ctx.carrierRatio,freq));
   synthFM_OSC_setFrequency(_ctx.modulator,fix_mul(_ctx.modulatorRatio,freq));
}

typedef synthFM_FM__ctx_type_0 synthFM_FM_setPoly_type;

static_inline void synthFM_FM_setPoly_init(synthFM_FM__ctx_type_0 &_output_){
   synthFM_FM__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_FM_setPoly(synthFM_FM__ctx_type_0 &_ctx, uint8_t flag){
   synthFM_Notes_setPoly(_ctx.playingnotes,flag);
};

typedef synthFM_FM__ctx_type_0 synthFM_FM_noteOn_type;

static_inline void synthFM_FM_noteOn_init(synthFM_FM__ctx_type_0 &_output_){
   synthFM_FM__ctx_type_0_init(_output_);
   return ;
}

void synthFM_FM_noteOn(synthFM_FM__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef synthFM_FM__ctx_type_0 synthFM_FM_noteOff_type;

static_inline void synthFM_FM_noteOff_init(synthFM_FM__ctx_type_0 &_output_){
   synthFM_FM__ctx_type_0_init(_output_);
   return ;
}

void synthFM_FM_noteOff(synthFM_FM__ctx_type_0 &_ctx, int note, int channel);

typedef synthFM_FM__ctx_type_0 synthFM_FM_setModulatorADSR_type;

static_inline void synthFM_FM_setModulatorADSR_init(synthFM_FM__ctx_type_0 &_output_){
   synthFM_FM__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_FM_setModulatorADSR(synthFM_FM__ctx_type_0 &_ctx, fix16_t a, fix16_t d, fix16_t s, fix16_t r){
   synthFM_ADSR_config(_ctx.carrieradsr,a,d,s,r);
};

typedef synthFM_FM__ctx_type_0 synthFM_FM_setCarrierADSR_type;

static_inline void synthFM_FM_setCarrierADSR_init(synthFM_FM__ctx_type_0 &_output_){
   synthFM_FM__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_FM_setCarrierADSR(synthFM_FM__ctx_type_0 &_ctx, fix16_t a, fix16_t d, fix16_t s, fix16_t r){
   synthFM_ADSR_config(_ctx.modulatoradsr,a,d,s,r);
};

typedef synthFM_FM__ctx_type_0 synthFM_FM_default_type;

static_inline void synthFM_FM_default_init(synthFM_FM__ctx_type_0 &_output_){
   synthFM_FM__ctx_type_0_init(_output_);
   return ;
}

void synthFM_FM_default(synthFM_FM__ctx_type_0 &_ctx);

typedef struct synthFM_Poly__ctx_type_0 {
   fix16_t wavetable_modulator[4096];
   fix16_t wavetable_carrier[4096];
   synthFM_FM__ctx_type_0 voice3;
   synthFM_FM__ctx_type_0 voice2;
   synthFM_FM__ctx_type_0 voice1;
   synthFM_FM__ctx_type_0 voice0;
   fix16_t lastModulatorWavetableIdx;
   fix16_t lastCarrierWavetableIdx;
   uint8_t initModulatorWavetable;
   uint8_t initCarrierWavetable;
} synthFM_Poly__ctx_type_0;

typedef synthFM_Poly__ctx_type_0 synthFM_Poly_getSample_type;

void synthFM_Poly__ctx_type_0_init(synthFM_Poly__ctx_type_0 &_output_);

static_inline void synthFM_Poly_getSample_init(synthFM_Poly__ctx_type_0 &_output_){
   synthFM_Poly__ctx_type_0_init(_output_);
   return ;
}

fix16_t synthFM_Poly_getSample(synthFM_Poly__ctx_type_0 &_ctx, int voice);

typedef synthFM_Poly__ctx_type_0 synthFM_Poly_runVoice_type;

static_inline void synthFM_Poly_runVoice_init(synthFM_Poly__ctx_type_0 &_output_){
   synthFM_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Poly_runVoice(synthFM_Poly__ctx_type_0 &_ctx, int voice, int nb, fix16_t (&buff)[256]){
   switch(voice) {
      case 0:
         synthFM_FM_process_bufferTo(_ctx.voice0,_ctx.wavetable_modulator,_ctx.wavetable_carrier,nb,buff);
      break;
      case 1:
         synthFM_FM_process_bufferTo(_ctx.voice1,_ctx.wavetable_modulator,_ctx.wavetable_carrier,nb,buff);
      break;
      case 2:
         synthFM_FM_process_bufferTo(_ctx.voice2,_ctx.wavetable_modulator,_ctx.wavetable_carrier,nb,buff);
      break;
      case 3:
         synthFM_FM_process_bufferTo(_ctx.voice3,_ctx.wavetable_modulator,_ctx.wavetable_carrier,nb,buff);
      break;
    
   }
};

typedef synthFM_Poly__ctx_type_0 synthFM_Poly_sendNoteOn_type;

static_inline void synthFM_Poly_sendNoteOn_init(synthFM_Poly__ctx_type_0 &_output_){
   synthFM_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Poly_sendNoteOn(synthFM_Poly__ctx_type_0 &_ctx, int voice, int note, int velocity, int channel){
   switch(voice) {
      case 0:
         synthFM_FM_noteOn(_ctx.voice0,note,velocity,channel);
      break;
      case 1:
         synthFM_FM_noteOn(_ctx.voice1,note,velocity,channel);
      break;
      case 2:
         synthFM_FM_noteOn(_ctx.voice2,note,velocity,channel);
      break;
      case 3:
         synthFM_FM_noteOn(_ctx.voice3,note,velocity,channel);
      break;
    
   }
};

typedef synthFM_Poly__ctx_type_0 synthFM_Poly_sendNoteOff_type;

static_inline void synthFM_Poly_sendNoteOff_init(synthFM_Poly__ctx_type_0 &_output_){
   synthFM_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Poly_sendNoteOff(synthFM_Poly__ctx_type_0 &_ctx, int voice, int note, int channel){
   switch(voice) {
      case 0:
         synthFM_FM_noteOff(_ctx.voice0,note,channel);
      break;
      case 1:
         synthFM_FM_noteOff(_ctx.voice1,note,channel);
      break;
      case 2:
         synthFM_FM_noteOff(_ctx.voice2,note,channel);
      break;
      case 3:
         synthFM_FM_noteOff(_ctx.voice3,note,channel);
      break;
    
   }
};

typedef synthFM_Poly__ctx_type_0 synthFM_Poly_setSamplerate_type;

static_inline void synthFM_Poly_setSamplerate_init(synthFM_Poly__ctx_type_0 &_output_){
   synthFM_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Poly_setSamplerate(synthFM_Poly__ctx_type_0 &_ctx, fix16_t fs){
   synthFM_FM_setSamplerate(_ctx.voice0,fs);
   synthFM_FM_setSamplerate(_ctx.voice1,fs);
   synthFM_FM_setSamplerate(_ctx.voice2,fs);
   synthFM_FM_setSamplerate(_ctx.voice3,fs);
}

typedef synthFM_Poly__ctx_type_0 synthFM_Poly_synthSetLoop_type;

static_inline void synthFM_Poly_synthSetLoop_init(synthFM_Poly__ctx_type_0 &_output_){
   synthFM_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Poly_synthSetLoop(synthFM_Poly__ctx_type_0 &_ctx, uint8_t flag){
}

typedef synthFM_Poly__ctx_type_0 synthFM_Poly_synthSetLoopStart_type;

static_inline void synthFM_Poly_synthSetLoopStart_init(synthFM_Poly__ctx_type_0 &_output_){
   synthFM_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Poly_synthSetLoopStart(synthFM_Poly__ctx_type_0 &_ctx, int value){
}

typedef synthFM_Poly__ctx_type_0 synthFM_Poly_synthSetLoopEnd_type;

static_inline void synthFM_Poly_synthSetLoopEnd_init(synthFM_Poly__ctx_type_0 &_output_){
   synthFM_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Poly_synthSetLoopEnd(synthFM_Poly__ctx_type_0 &_ctx, int value){
}

typedef synthFM_Poly__ctx_type_0 synthFM_Poly_synthGetSize_type;

static_inline void synthFM_Poly_synthGetSize_init(synthFM_Poly__ctx_type_0 &_output_){
   synthFM_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthFM_Poly_synthGetSize(synthFM_Poly__ctx_type_0 &_ctx){
   return 0;
};

typedef synthFM_Poly__ctx_type_0 synthFM_Poly_synthGetNbWavetables_type;

static_inline void synthFM_Poly_synthGetNbWavetables_init(synthFM_Poly__ctx_type_0 &_output_){
   synthFM_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthFM_Poly_synthGetNbWavetables(synthFM_Poly__ctx_type_0 &_ctx){
   return 4;
};

typedef synthFM_Poly__ctx_type_0 synthFM_Poly_synthSetModulatorWavetable_type;

static_inline void synthFM_Poly_synthSetModulatorWavetable_init(synthFM_Poly__ctx_type_0 &_output_){
   synthFM_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Poly_synthSetModulatorWavetable(synthFM_Poly__ctx_type_0 &_ctx, fix16_t wavetableIdx){
   if(bool_not(_ctx.initModulatorWavetable) || (wavetableIdx != _ctx.lastModulatorWavetableIdx)){
      synthFM_Wavetable_morphTo(wavetableIdx,_ctx.wavetable_modulator);
      _ctx.lastModulatorWavetableIdx = wavetableIdx;
      _ctx.initModulatorWavetable = true;
   }
};

typedef synthFM_Poly__ctx_type_0 synthFM_Poly_synthSetCarrierWavetable_type;

static_inline void synthFM_Poly_synthSetCarrierWavetable_init(synthFM_Poly__ctx_type_0 &_output_){
   synthFM_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Poly_synthSetCarrierWavetable(synthFM_Poly__ctx_type_0 &_ctx, fix16_t wavetableIdx){
   if(bool_not(_ctx.initCarrierWavetable) || (wavetableIdx != _ctx.lastCarrierWavetableIdx)){
      synthFM_Wavetable_morphTo(wavetableIdx,_ctx.wavetable_carrier);
      _ctx.lastCarrierWavetableIdx = wavetableIdx;
      _ctx.initCarrierWavetable = true;
   }
};

typedef synthFM_Poly__ctx_type_0 synthFM_Poly_synthSetModulatorRatio_type;

static_inline void synthFM_Poly_synthSetModulatorRatio_init(synthFM_Poly__ctx_type_0 &_output_){
   synthFM_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Poly_synthSetModulatorRatio(synthFM_Poly__ctx_type_0 &_ctx, fix16_t ratio){
   synthFM_FM_setModulatorRatio(_ctx.voice0,ratio);
   synthFM_FM_setModulatorRatio(_ctx.voice1,ratio);
   synthFM_FM_setModulatorRatio(_ctx.voice2,ratio);
   synthFM_FM_setModulatorRatio(_ctx.voice3,ratio);
}

typedef synthFM_Poly__ctx_type_0 synthFM_Poly_synthSetCarrierRatio_type;

static_inline void synthFM_Poly_synthSetCarrierRatio_init(synthFM_Poly__ctx_type_0 &_output_){
   synthFM_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Poly_synthSetCarrierRatio(synthFM_Poly__ctx_type_0 &_ctx, fix16_t ratio){
   synthFM_FM_setCarrierRatio(_ctx.voice0,ratio);
   synthFM_FM_setCarrierRatio(_ctx.voice1,ratio);
   synthFM_FM_setCarrierRatio(_ctx.voice2,ratio);
   synthFM_FM_setCarrierRatio(_ctx.voice3,ratio);
}

typedef synthFM_Poly__ctx_type_0 synthFM_Poly_synthSetModulatorLevel_type;

static_inline void synthFM_Poly_synthSetModulatorLevel_init(synthFM_Poly__ctx_type_0 &_output_){
   synthFM_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Poly_synthSetModulatorLevel(synthFM_Poly__ctx_type_0 &_ctx, fix16_t level){
   synthFM_FM_setModulatorLevel(_ctx.voice0,level);
   synthFM_FM_setModulatorLevel(_ctx.voice1,level);
   synthFM_FM_setModulatorLevel(_ctx.voice2,level);
   synthFM_FM_setModulatorLevel(_ctx.voice3,level);
}

typedef synthFM_Poly__ctx_type_0 synthFM_Poly_synthSetModulatorADSR_type;

static_inline void synthFM_Poly_synthSetModulatorADSR_init(synthFM_Poly__ctx_type_0 &_output_){
   synthFM_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Poly_synthSetModulatorADSR(synthFM_Poly__ctx_type_0 &_ctx, fix16_t a, fix16_t d, fix16_t s, fix16_t r){
   synthFM_FM_setModulatorADSR(_ctx.voice0,a,d,s,r);
   synthFM_FM_setModulatorADSR(_ctx.voice1,a,d,s,r);
   synthFM_FM_setModulatorADSR(_ctx.voice2,a,d,s,r);
   synthFM_FM_setModulatorADSR(_ctx.voice3,a,d,s,r);
}

typedef synthFM_Poly__ctx_type_0 synthFM_Poly_synthSetCarrierADSR_type;

static_inline void synthFM_Poly_synthSetCarrierADSR_init(synthFM_Poly__ctx_type_0 &_output_){
   synthFM_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Poly_synthSetCarrierADSR(synthFM_Poly__ctx_type_0 &_ctx, fix16_t a, fix16_t d, fix16_t s, fix16_t r){
   synthFM_FM_setCarrierADSR(_ctx.voice0,a,d,s,r);
   synthFM_FM_setCarrierADSR(_ctx.voice1,a,d,s,r);
   synthFM_FM_setCarrierADSR(_ctx.voice2,a,d,s,r);
   synthFM_FM_setCarrierADSR(_ctx.voice3,a,d,s,r);
}

typedef synthFM_Poly__ctx_type_0 synthFM_Poly_default_type;

static_inline void synthFM_Poly_default_init(synthFM_Poly__ctx_type_0 &_output_){
   synthFM_Poly__ctx_type_0_init(_output_);
   return ;
}

void synthFM_Poly_default(synthFM_Poly__ctx_type_0 &_ctx);

typedef struct synthFM_Voice__ctx_type_0 {
   synthFM_Notes__ctx_type_0 voicesinactive;
   synthFM_Notes__ctx_type_0 voicesactive;
   fix16_t voices_ratio;
   int voices[4];
   synthFM_Poly__ctx_type_0 poly;
   int number_voices;
   int notes[128];
   uint8_t normalize;
   fix16_t leftovers_decay;
   fix16_t leftovers;
   fix16_t last_values[4];
   fix16_t fs;
   fix16_t buffer_v3[256];
   fix16_t buffer_v2[256];
   fix16_t buffer_v1[256];
   fix16_t buffer_v0[256];
} synthFM_Voice__ctx_type_0;

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_process_type;

void synthFM_Voice__ctx_type_0_init(synthFM_Voice__ctx_type_0 &_output_);

static_inline void synthFM_Voice_process_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

fix16_t synthFM_Voice_process(synthFM_Voice__ctx_type_0 &_ctx);

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_process_bufferTo_type;

static_inline void synthFM_Voice_process_bufferTo_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

void synthFM_Voice_process_bufferTo(synthFM_Voice__ctx_type_0 &_ctx, int nb, fix16_t (&oBuffer)[256]);

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_process_bufferTo_alt_type;

static_inline void synthFM_Voice_process_bufferTo_alt_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

void synthFM_Voice_process_bufferTo_alt(synthFM_Voice__ctx_type_0 &_ctx, int nb, fix16_t (&oBuffer)[256]);

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_noteOff_type;

static_inline void synthFM_Voice_noteOff_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

void synthFM_Voice_noteOff(synthFM_Voice__ctx_type_0 &_ctx, int note, int channel);

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_noteOn_type;

static_inline void synthFM_Voice_noteOn_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

void synthFM_Voice_noteOn(synthFM_Voice__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_setNbVoices_type;

static_inline void synthFM_Voice_setNbVoices_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

void synthFM_Voice_setNbVoices(synthFM_Voice__ctx_type_0 &_ctx, int nbvoices);

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_setNormalize_type;

static_inline void synthFM_Voice_setNormalize_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Voice_setNormalize(synthFM_Voice__ctx_type_0 &_ctx, uint8_t flag){
   _ctx.normalize = flag;
};

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_setSamplerate_type;

static_inline void synthFM_Voice_setSamplerate_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

void synthFM_Voice_setSamplerate(synthFM_Voice__ctx_type_0 &_ctx, fix16_t newFs);

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_synthSetLoop_type;

static_inline void synthFM_Voice_synthSetLoop_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Voice_synthSetLoop(synthFM_Voice__ctx_type_0 &_ctx, uint8_t flag){
   synthFM_Poly_synthSetLoop(_ctx.poly,flag);
};

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_synthSetLoopStart_type;

static_inline void synthFM_Voice_synthSetLoopStart_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Voice_synthSetLoopStart(synthFM_Voice__ctx_type_0 &_ctx, int value){
   synthFM_Poly_synthSetLoopStart(_ctx.poly,value);
};

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_synthSetLoopEnd_type;

static_inline void synthFM_Voice_synthSetLoopEnd_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Voice_synthSetLoopEnd(synthFM_Voice__ctx_type_0 &_ctx, int value){
   synthFM_Poly_synthSetLoopEnd(_ctx.poly,value);
};

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_synthGetSize_type;

static_inline void synthFM_Voice_synthGetSize_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthFM_Voice_synthGetSize(synthFM_Voice__ctx_type_0 &_ctx){
   return synthFM_Poly_synthGetSize(_ctx.poly);
};

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_synthGetNbWavetables_type;

static_inline void synthFM_Voice_synthGetNbWavetables_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthFM_Voice_synthGetNbWavetables(synthFM_Voice__ctx_type_0 &_ctx){
   return synthFM_Poly_synthGetNbWavetables(_ctx.poly);
};

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_synthSetModulatorWavetable_type;

static_inline void synthFM_Voice_synthSetModulatorWavetable_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Voice_synthSetModulatorWavetable(synthFM_Voice__ctx_type_0 &_ctx, fix16_t wavetableIdx){
   synthFM_Poly_synthSetModulatorWavetable(_ctx.poly,wavetableIdx);
};

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_synthSetCarrierWavetable_type;

static_inline void synthFM_Voice_synthSetCarrierWavetable_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Voice_synthSetCarrierWavetable(synthFM_Voice__ctx_type_0 &_ctx, fix16_t wavetableIdx){
   synthFM_Poly_synthSetCarrierWavetable(_ctx.poly,wavetableIdx);
};

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_synthSetModulatorRatio_type;

static_inline void synthFM_Voice_synthSetModulatorRatio_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Voice_synthSetModulatorRatio(synthFM_Voice__ctx_type_0 &_ctx, fix16_t ratio){
   synthFM_Poly_synthSetModulatorRatio(_ctx.poly,ratio);
};

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_synthSetCarrierRatio_type;

static_inline void synthFM_Voice_synthSetCarrierRatio_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Voice_synthSetCarrierRatio(synthFM_Voice__ctx_type_0 &_ctx, fix16_t ratio){
   synthFM_Poly_synthSetCarrierRatio(_ctx.poly,ratio);
};

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_synthSetModulatorLevel_type;

static_inline void synthFM_Voice_synthSetModulatorLevel_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Voice_synthSetModulatorLevel(synthFM_Voice__ctx_type_0 &_ctx, fix16_t level){
   synthFM_Poly_synthSetModulatorLevel(_ctx.poly,level);
};

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_synthSetModulatorADSR_type;

static_inline void synthFM_Voice_synthSetModulatorADSR_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Voice_synthSetModulatorADSR(synthFM_Voice__ctx_type_0 &_ctx, fix16_t a, fix16_t d, fix16_t s, fix16_t r){
   synthFM_Poly_synthSetModulatorADSR(_ctx.poly,a,d,s,r);
};

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_synthSetCarrierADSR_type;

static_inline void synthFM_Voice_synthSetCarrierADSR_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Voice_synthSetCarrierADSR(synthFM_Voice__ctx_type_0 &_ctx, fix16_t a, fix16_t d, fix16_t s, fix16_t r){
   synthFM_Poly_synthSetCarrierADSR(_ctx.poly,a,d,s,r);
};

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_default_type;

static_inline void synthFM_Voice_default_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

void synthFM_Voice_default(synthFM_Voice__ctx_type_0 &_ctx);

typedef struct synthFM_Processor__ctx_type_0 {
   fix16_t pre_d;
   fix16_t pre_c;
   fix16_t pre_b;
   fix16_t pre_a;
} synthFM_Processor__ctx_type_0;

typedef synthFM_Processor__ctx_type_0 synthFM_Processor_change4_type;

void synthFM_Processor__ctx_type_0_init(synthFM_Processor__ctx_type_0 &_output_);

static_inline void synthFM_Processor_change4_init(synthFM_Processor__ctx_type_0 &_output_){
   synthFM_Processor__ctx_type_0_init(_output_);
   return ;
}

uint8_t synthFM_Processor_change4(synthFM_Processor__ctx_type_0 &_ctx, fix16_t a, fix16_t b, fix16_t c, fix16_t d);

int synthFM_Processor_cvToPitch(fix16_t cv);

typedef struct synthFM_Processor__ctx_type_2 {
   synthFM_Voice__ctx_type_0 voice;
   int last_pitches[16];
   int last_nbcables;
   uint8_t last_gates[16];
   fix16_t fs;
   synthFM_Processor__ctx_type_0 _inst3136;
   synthFM_Processor__ctx_type_0 _inst2836;
   synthFM_Util__ctx_type_3 _inst253b;
   synthFM_Util__ctx_type_3 _inst223b;
   synthFM_Util__ctx_type_3 _inst193b;
   synthFM_Util__ctx_type_3 _inst163b;
   synthFM_Util__ctx_type_3 _inst133b;
} synthFM_Processor__ctx_type_2;

typedef synthFM_Processor__ctx_type_2 synthFM_Processor_process_type;

void synthFM_Processor__ctx_type_2_init(synthFM_Processor__ctx_type_2 &_output_);

static_inline void synthFM_Processor_process_init(synthFM_Processor__ctx_type_2 &_output_){
   synthFM_Processor__ctx_type_2_init(_output_);
   return ;
}

static_inline fix16_t synthFM_Processor_process(synthFM_Processor__ctx_type_2 &_ctx){
   return synthFM_Voice_process(_ctx.voice);
};

typedef synthFM_Processor__ctx_type_2 synthFM_Processor_setNote_type;

static_inline void synthFM_Processor_setNote_init(synthFM_Processor__ctx_type_2 &_output_){
   synthFM_Processor__ctx_type_2_init(_output_);
   return ;
}

void synthFM_Processor_setNote(synthFM_Processor__ctx_type_2 &_ctx, fix16_t gate, fix16_t voct, fix16_t vel, int cable);

typedef synthFM_Processor__ctx_type_2 synthFM_Processor_nbCables_type;

static_inline void synthFM_Processor_nbCables_init(synthFM_Processor__ctx_type_2 &_output_){
   synthFM_Processor__ctx_type_2_init(_output_);
   return ;
}

void synthFM_Processor_nbCables(synthFM_Processor__ctx_type_2 &_ctx, int nbcables);

typedef synthFM_Processor__ctx_type_2 synthFM_Processor_setSamplerate_type;

static_inline void synthFM_Processor_setSamplerate_init(synthFM_Processor__ctx_type_2 &_output_){
   synthFM_Processor__ctx_type_2_init(_output_);
   return ;
}

static_inline void synthFM_Processor_setSamplerate(synthFM_Processor__ctx_type_2 &_ctx, fix16_t newFs){
   if((newFs > 0x0 /* 0.000000 */) && (newFs != _ctx.fs)){
      _ctx.fs = newFs;
      synthFM_Voice_setSamplerate(_ctx.voice,_ctx.fs);
   }
};

typedef synthFM_Processor__ctx_type_2 synthFM_Processor_setModulatorWavetable_type;

static_inline void synthFM_Processor_setModulatorWavetable_init(synthFM_Processor__ctx_type_2 &_output_){
   synthFM_Processor__ctx_type_2_init(_output_);
   return ;
}

static_inline void synthFM_Processor_setModulatorWavetable(synthFM_Processor__ctx_type_2 &_ctx, fix16_t wavetableIdx, uint8_t force){
   if(synthFM_Util_change(_ctx._inst133b,wavetableIdx) || force){
      synthFM_Voice_synthSetModulatorWavetable(_ctx.voice,wavetableIdx);
   }
};

typedef synthFM_Processor__ctx_type_2 synthFM_Processor_setCarrierWavetable_type;

static_inline void synthFM_Processor_setCarrierWavetable_init(synthFM_Processor__ctx_type_2 &_output_){
   synthFM_Processor__ctx_type_2_init(_output_);
   return ;
}

static_inline void synthFM_Processor_setCarrierWavetable(synthFM_Processor__ctx_type_2 &_ctx, fix16_t wavetableIdx, uint8_t force){
   if(synthFM_Util_change(_ctx._inst163b,wavetableIdx) || force){
      synthFM_Voice_synthSetCarrierWavetable(_ctx.voice,wavetableIdx);
   }
};

typedef synthFM_Processor__ctx_type_2 synthFM_Processor_setModulatorRatio_type;

static_inline void synthFM_Processor_setModulatorRatio_init(synthFM_Processor__ctx_type_2 &_output_){
   synthFM_Processor__ctx_type_2_init(_output_);
   return ;
}

static_inline void synthFM_Processor_setModulatorRatio(synthFM_Processor__ctx_type_2 &_ctx, fix16_t ratio, uint8_t force){
   if(synthFM_Util_change(_ctx._inst193b,ratio) || force){
      synthFM_Voice_synthSetModulatorRatio(_ctx.voice,ratio);
   }
};

typedef synthFM_Processor__ctx_type_2 synthFM_Processor_setCarrierRatio_type;

static_inline void synthFM_Processor_setCarrierRatio_init(synthFM_Processor__ctx_type_2 &_output_){
   synthFM_Processor__ctx_type_2_init(_output_);
   return ;
}

static_inline void synthFM_Processor_setCarrierRatio(synthFM_Processor__ctx_type_2 &_ctx, fix16_t ratio, uint8_t force){
   if(synthFM_Util_change(_ctx._inst223b,ratio) || force){
      synthFM_Voice_synthSetCarrierRatio(_ctx.voice,ratio);
   }
};

typedef synthFM_Processor__ctx_type_2 synthFM_Processor_setModulatorLevel_type;

static_inline void synthFM_Processor_setModulatorLevel_init(synthFM_Processor__ctx_type_2 &_output_){
   synthFM_Processor__ctx_type_2_init(_output_);
   return ;
}

static_inline void synthFM_Processor_setModulatorLevel(synthFM_Processor__ctx_type_2 &_ctx, fix16_t level, uint8_t force){
   if(synthFM_Util_change(_ctx._inst253b,level) || force){
      synthFM_Voice_synthSetModulatorLevel(_ctx.voice,level);
   }
};

typedef synthFM_Processor__ctx_type_2 synthFM_Processor_setModulatorADSR_type;

static_inline void synthFM_Processor_setModulatorADSR_init(synthFM_Processor__ctx_type_2 &_output_){
   synthFM_Processor__ctx_type_2_init(_output_);
   return ;
}

static_inline void synthFM_Processor_setModulatorADSR(synthFM_Processor__ctx_type_2 &_ctx, fix16_t a, fix16_t d, fix16_t s, fix16_t r, uint8_t force){
   if(synthFM_Processor_change4(_ctx._inst2836,a,d,s,r) || force){
      synthFM_Voice_synthSetModulatorADSR(_ctx.voice,a,d,s,r);
   }
};

typedef synthFM_Processor__ctx_type_2 synthFM_Processor_setCarrierADSR_type;

static_inline void synthFM_Processor_setCarrierADSR_init(synthFM_Processor__ctx_type_2 &_output_){
   synthFM_Processor__ctx_type_2_init(_output_);
   return ;
}

static_inline void synthFM_Processor_setCarrierADSR(synthFM_Processor__ctx_type_2 &_ctx, fix16_t a, fix16_t d, fix16_t s, fix16_t r, uint8_t force){
   if(synthFM_Processor_change4(_ctx._inst3136,a,d,s,r) || force){
      synthFM_Voice_synthSetCarrierADSR(_ctx.voice,a,d,s,r);
   }
};

typedef synthFM_Processor__ctx_type_2 synthFM_Processor_default_type;

static_inline void synthFM_Processor_default_init(synthFM_Processor__ctx_type_2 &_output_){
   synthFM_Processor__ctx_type_2_init(_output_);
   return ;
}

static_inline void synthFM_Processor_default(synthFM_Processor__ctx_type_2 &_ctx){
   synthFM_Voice_default(_ctx.voice);
   synthFM_Processor_setSamplerate(_ctx,0x2c1999 /* 44.100000 */);
}



#endif // ENGINE_SYNTHFM_H
