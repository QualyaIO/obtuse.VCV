
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef ENGINE_UTILS_H
#define ENGINE_UTILS_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "engine_utils.tables.h"

typedef struct _tuple___int_int_int__ {
   int field_0;
   int field_1;
   int field_2;
} _tuple___int_int_int__;

typedef struct _tuple___real_real_real__ {
   fix16_t field_0;
   fix16_t field_1;
   fix16_t field_2;
} _tuple___real_real_real__;

typedef struct _tuple___real_real_real_real_real__ {
   fix16_t field_0;
   fix16_t field_1;
   fix16_t field_2;
   fix16_t field_3;
   fix16_t field_4;
} _tuple___real_real_real_real_real__;

int Gate_compareTimeFract(int time1S, fix16_t time1Fract, int time2S, fix16_t time2Fract);

typedef struct Gate__ctx_type_1 {
   int values[128];
   int e;
   int b;
} Gate__ctx_type_1;

typedef Gate__ctx_type_1 Gate_list_type;

void Gate__ctx_type_1_init(Gate__ctx_type_1 &_output_);

static_inline void Gate_list_init(Gate__ctx_type_1 &_output_){
   Gate__ctx_type_1_init(_output_);
   return ;
}

static_inline void Gate_list(Gate__ctx_type_1 &_ctx){
}

typedef Gate__ctx_type_1 Gate_getListSize_type;

static_inline void Gate_getListSize_init(Gate__ctx_type_1 &_output_){
   Gate__ctx_type_1_init(_output_);
   return ;
}

static_inline int Gate_getListSize(Gate__ctx_type_1 &_ctx){
   return ((128 + _ctx.e + (- _ctx.b)) % 128);
};

typedef Gate__ctx_type_1 Gate_getListMaxSize_type;

static_inline void Gate_getListMaxSize_init(Gate__ctx_type_1 &_output_){
   Gate__ctx_type_1_init(_output_);
   return ;
}

static_inline int Gate_getListMaxSize(Gate__ctx_type_1 &_ctx){
   return 128;
};

typedef Gate__ctx_type_1 Gate_getListSpace_type;

static_inline void Gate_getListSpace_init(Gate__ctx_type_1 &_output_){
   Gate__ctx_type_1_init(_output_);
   return ;
}

static_inline int Gate_getListSpace(Gate__ctx_type_1 &_ctx){
   return (128 + (- Gate_getListSize(_ctx)));
};

typedef Gate__ctx_type_1 Gate_push_type;

static_inline void Gate_push_init(Gate__ctx_type_1 &_output_){
   Gate__ctx_type_1_init(_output_);
   return ;
}

uint8_t Gate_push(Gate__ctx_type_1 &_ctx, int v);

typedef Gate__ctx_type_1 Gate_pop_type;

static_inline void Gate_pop_init(Gate__ctx_type_1 &_output_){
   Gate__ctx_type_1_init(_output_);
   return ;
}

int Gate_pop(Gate__ctx_type_1 &_ctx);

typedef Gate__ctx_type_1 Gate_peek_type;

static_inline void Gate_peek_init(Gate__ctx_type_1 &_output_){
   Gate__ctx_type_1_init(_output_);
   return ;
}

int Gate_peek(Gate__ctx_type_1 &_ctx, int n);

typedef Gate__ctx_type_1 Gate_delete_type;

static_inline void Gate_delete_init(Gate__ctx_type_1 &_output_){
   Gate__ctx_type_1_init(_output_);
   return ;
}

int Gate_delete(Gate__ctx_type_1 &_ctx, int n);

typedef Gate__ctx_type_1 Gate_search_type;

static_inline void Gate_search_init(Gate__ctx_type_1 &_output_){
   Gate__ctx_type_1_init(_output_);
   return ;
}

int Gate_search(Gate__ctx_type_1 &_ctx, int value);

typedef Gate__ctx_type_1 Gate_deleteValue_type;

static_inline void Gate_deleteValue_init(Gate__ctx_type_1 &_output_){
   Gate__ctx_type_1_init(_output_);
   return ;
}

static_inline uint8_t Gate_deleteValue(Gate__ctx_type_1 &_ctx, int value){
   int n;
   n = Gate_search(_ctx,value);
   return (Gate_delete(_ctx,n) == value);
}

typedef struct Gate__ctx_type_2 {
   int timeS;
   fix16_t timeFract;
   int notesS[128];
   Gate__ctx_type_1 notesOn;
   Gate__ctx_type_1 notesOff;
   fix16_t notesFract[128];
   Gate__ctx_type_1 notesActive;
   fix16_t gateDuration;
} Gate__ctx_type_2;

typedef Gate__ctx_type_2 Gate_process_type;

void Gate__ctx_type_2_init(Gate__ctx_type_2 &_output_);

static_inline void Gate_process_init(Gate__ctx_type_2 &_output_){
   Gate__ctx_type_2_init(_output_);
   return ;
}

void Gate_process(Gate__ctx_type_2 &_ctx);

typedef Gate__ctx_type_2 Gate_setTime_type;

static_inline void Gate_setTime_init(Gate__ctx_type_2 &_output_){
   Gate__ctx_type_2_init(_output_);
   return ;
}

static_inline void Gate_setTime(Gate__ctx_type_2 &_ctx, int newTimeS, fix16_t newTimeFract){
   _ctx.timeS = newTimeS;
   _ctx.timeFract = newTimeFract;
}

typedef Gate__ctx_type_2 Gate_noteOn_type;

static_inline void Gate_noteOn_init(Gate__ctx_type_2 &_output_){
   Gate__ctx_type_2_init(_output_);
   return ;
}

uint8_t Gate_noteOn(Gate__ctx_type_2 &_ctx, int note, int velocity, int channel);

typedef Gate__ctx_type_2 Gate_noteKill_type;

static_inline void Gate_noteKill_init(Gate__ctx_type_2 &_output_){
   Gate__ctx_type_2_init(_output_);
   return ;
}

static_inline void Gate_noteKill(Gate__ctx_type_2 &_ctx, int note){
   note = int_clip(note,0,127);
   Gate_deleteValue(_ctx.notesActive,note);
   _ctx.notesS[note] = 0;
   _ctx.notesFract[note] = 0x0 /* 0.000000 */;
}

typedef Gate__ctx_type_2 Gate_getNoteOff_type;

static_inline void Gate_getNoteOff_init(Gate__ctx_type_2 &_output_){
   Gate__ctx_type_2_init(_output_);
   return ;
}

static_inline int Gate_getNoteOff(Gate__ctx_type_2 &_ctx){
   return Gate_pop(_ctx.notesOff);
};

typedef Gate__ctx_type_2 Gate_getNoteOn_type;

static_inline void Gate_getNoteOn_init(Gate__ctx_type_2 &_output_){
   Gate__ctx_type_2_init(_output_);
   return ;
}

static_inline int Gate_getNoteOn(Gate__ctx_type_2 &_ctx){
   return Gate_pop(_ctx.notesOn);
};

typedef Gate__ctx_type_2 Gate_setDuration_type;

static_inline void Gate_setDuration_init(Gate__ctx_type_2 &_output_){
   Gate__ctx_type_2_init(_output_);
   return ;
}

static_inline void Gate_setDuration(Gate__ctx_type_2 &_ctx, fix16_t duration){
   _ctx.gateDuration = fix_clip(duration,0x41 /* 0.001000 */,duration);
};

typedef Gate__ctx_type_2 Gate_default_type;

static_inline void Gate_default_init(Gate__ctx_type_2 &_output_){
   Gate__ctx_type_2_init(_output_);
   return ;
}

static_inline void Gate_default(Gate__ctx_type_2 &_ctx){
   Gate_setDuration(_ctx,0x3333 /* 0.200000 */);
};

static_inline fix16_t Util_noteToFrequency(int note){
   return fix_mul(0x217 /* 0.008176 */,fix_exp(fix_mul(0xec9 /* 0.057762 */,int_to_fix(note))));
};

static_inline fix16_t Util_tonesToCoeff(fix16_t semitones){
   fix16_t log_base;
   log_base = 0xb172 /* 0.693147 */;
   return fix_exp(fix_mul(fix_mul(0x1555 /* 0.083333 */,log_base),semitones));
}

typedef struct Util__ctx_type_2 {
   uint8_t pre;
} Util__ctx_type_2;

typedef Util__ctx_type_2 Util_edge_type;

static_inline void Util__ctx_type_2_init(Util__ctx_type_2 &_output_){
   Util__ctx_type_2 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

static_inline void Util_edge_init(Util__ctx_type_2 &_output_){
   Util__ctx_type_2_init(_output_);
   return ;
}

static_inline uint8_t Util_edge(Util__ctx_type_2 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

static_inline fix16_t Util_cubic_clipper(fix16_t x){
   if(x <= -0xaaaa /* -0.666667 */){
      return -0xaaaa /* -0.666667 */;
   }
   else
   {
      if(x >= 0xaaaa /* 0.666667 */){
         return 0xaaaa /* 0.666667 */;
      }
      else
      {
         return (x + fix_mul(fix_mul(fix_mul(-0x5555 /* -0.333333 */,x),x),x));
      }
   }
};

typedef struct Util__ctx_type_4 {
   fix16_t pre_x;
} Util__ctx_type_4;

typedef Util__ctx_type_4 Util_change_type;

static_inline void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Util_change_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

static_inline uint8_t Util_change(Util__ctx_type_4 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

typedef struct Util__ctx_type_5 {
   fix16_t x;
} Util__ctx_type_5;

typedef Util__ctx_type_5 Util_smooth_type;

static_inline void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Util_smooth_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

static_inline fix16_t Util_smooth(Util__ctx_type_5 &_ctx, fix16_t input, fix16_t coeff){
   _ctx.x = (_ctx.x + fix_mul(coeff,(input + (- _ctx.x))));
   return _ctx.x;
}

static_inline fix16_t Util_velocityToLevel(int velocity){
   velocity = int_clip(velocity,0,127);
   return fix_mul(0x204 /* 0.007874 */,int_to_fix(velocity));
}

typedef struct Random__ctx_type_0 {
   int next;
} Random__ctx_type_0;

typedef Random__ctx_type_0 Random_setSeed_type;

static_inline void Random__ctx_type_0_init(Random__ctx_type_0 &_output_){
   Random__ctx_type_0 _ctx;
   _ctx.next = 0;
   _output_ = _ctx;
   return ;
}

static_inline void Random_setSeed_init(Random__ctx_type_0 &_output_){
   Random__ctx_type_0_init(_output_);
   return ;
}

static_inline void Random_setSeed(Random__ctx_type_0 &_ctx, int seed){
   _ctx.next = seed;
};

typedef Random__ctx_type_0 Random_irandom_type;

static_inline void Random_irandom_init(Random__ctx_type_0 &_output_){
   Random__ctx_type_0_init(_output_);
   return ;
}

int Random_irandom(Random__ctx_type_0 &_ctx);

typedef Random__ctx_type_0 Random_random_type;

static_inline void Random_random_init(Random__ctx_type_0 &_output_){
   Random__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t Random_random(Random__ctx_type_0 &_ctx){
   return fix_mul(0x2 /* 0.000031 */,int_to_fix(Random_irandom(_ctx)));
};

typedef Random__ctx_type_0 Random_getRandMax_type;

static_inline void Random_getRandMax_init(Random__ctx_type_0 &_output_){
   Random__ctx_type_0_init(_output_);
   return ;
}

static_inline int Random_getRandMax(Random__ctx_type_0 &_ctx){
   return 32767;
};

typedef struct Trigg__ctx_type_0 {
   uint8_t triggers[128];
   int ticks;
   int shift;
   Random__ctx_type_0 rando;
   fix16_t ptriggers[128];
   int position;
   int n;
   fix16_t magnitude;
   int length;
   uint8_t isautolength;
   fix16_t evolve;
   int divider;
   uint8_t dirty;
   fix16_t density;
   fix16_t balance;
} Trigg__ctx_type_0;

typedef Trigg__ctx_type_0 Trigg__refresh_type;

void Trigg__ctx_type_0_init(Trigg__ctx_type_0 &_output_);

static_inline void Trigg__refresh_init(Trigg__ctx_type_0 &_output_){
   Trigg__ctx_type_0_init(_output_);
   return ;
}

void Trigg__refresh(Trigg__ctx_type_0 &_ctx);

typedef Trigg__ctx_type_0 Trigg_process_type;

static_inline void Trigg_process_init(Trigg__ctx_type_0 &_output_){
   Trigg__ctx_type_0_init(_output_);
   return ;
}

int Trigg_process(Trigg__ctx_type_0 &_ctx);

typedef Trigg__ctx_type_0 Trigg_restartLoop_type;

static_inline void Trigg_restartLoop_init(Trigg__ctx_type_0 &_output_){
   Trigg__ctx_type_0_init(_output_);
   return ;
}

static_inline void Trigg_restartLoop(Trigg__ctx_type_0 &_ctx){
   _ctx.n = 0;
   Trigg__refresh(_ctx);
}

typedef Trigg__ctx_type_0 Trigg_reset_type;

static_inline void Trigg_reset_init(Trigg__ctx_type_0 &_output_){
   Trigg__ctx_type_0_init(_output_);
   return ;
}

static_inline void Trigg_reset(Trigg__ctx_type_0 &_ctx){
   _ctx.ticks = 0;
   Trigg_restartLoop(_ctx);
}

typedef Trigg__ctx_type_0 Trigg__recompute_type;

static_inline void Trigg__recompute_init(Trigg__ctx_type_0 &_output_){
   Trigg__ctx_type_0_init(_output_);
   return ;
}

void Trigg__recompute(Trigg__ctx_type_0 &_ctx);

typedef Trigg__ctx_type_0 Trigg__getAutolength_type;

static_inline void Trigg__getAutolength_init(Trigg__ctx_type_0 &_output_){
   Trigg__ctx_type_0_init(_output_);
   return ;
}

int Trigg__getAutolength(Trigg__ctx_type_0 &_ctx);

typedef Trigg__ctx_type_0 Trigg__applyLength_type;

static_inline void Trigg__applyLength_init(Trigg__ctx_type_0 &_output_){
   Trigg__ctx_type_0_init(_output_);
   return ;
}

uint8_t Trigg__applyLength(Trigg__ctx_type_0 &_ctx, int newLength);

typedef Trigg__ctx_type_0 Trigg_setLength_type;

static_inline void Trigg_setLength_init(Trigg__ctx_type_0 &_output_){
   Trigg__ctx_type_0_init(_output_);
   return ;
}

void Trigg_setLength(Trigg__ctx_type_0 &_ctx, int newLength);

typedef Trigg__ctx_type_0 Trigg_getLength_type;

static_inline void Trigg_getLength_init(Trigg__ctx_type_0 &_output_){
   Trigg__ctx_type_0_init(_output_);
   return ;
}

static_inline int Trigg_getLength(Trigg__ctx_type_0 &_ctx){
   return _ctx.length;
};

typedef Trigg__ctx_type_0 Trigg_setDivider_type;

static_inline void Trigg_setDivider_init(Trigg__ctx_type_0 &_output_){
   Trigg__ctx_type_0_init(_output_);
   return ;
}

static_inline void Trigg_setDivider(Trigg__ctx_type_0 &_ctx, int newDivider){
   _ctx.divider = int_clip(newDivider,1,newDivider);
};

typedef Trigg__ctx_type_0 Trigg_setShift_type;

static_inline void Trigg_setShift_init(Trigg__ctx_type_0 &_output_){
   Trigg__ctx_type_0_init(_output_);
   return ;
}

static_inline void Trigg_setShift(Trigg__ctx_type_0 &_ctx, int newShift){
   _ctx.shift = int_clip(newShift,0,newShift);
};

typedef Trigg__ctx_type_0 Trigg_setEvolve_type;

static_inline void Trigg_setEvolve_init(Trigg__ctx_type_0 &_output_){
   Trigg__ctx_type_0_init(_output_);
   return ;
}

static_inline void Trigg_setEvolve(Trigg__ctx_type_0 &_ctx, fix16_t newEvolve){
   _ctx.evolve = fix_clip(newEvolve,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
};

typedef Trigg__ctx_type_0 Trigg_setMagnitude_type;

static_inline void Trigg_setMagnitude_init(Trigg__ctx_type_0 &_output_){
   Trigg__ctx_type_0_init(_output_);
   return ;
}

static_inline void Trigg_setMagnitude(Trigg__ctx_type_0 &_ctx, fix16_t newMagnitude){
   _ctx.magnitude = fix_clip(newMagnitude,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
};

typedef Trigg__ctx_type_0 Trigg_setBalance_type;

static_inline void Trigg_setBalance_init(Trigg__ctx_type_0 &_output_){
   Trigg__ctx_type_0_init(_output_);
   return ;
}

void Trigg_setBalance(Trigg__ctx_type_0 &_ctx, fix16_t newBalance);

typedef Trigg__ctx_type_0 Trigg_setDensity_type;

static_inline void Trigg_setDensity_init(Trigg__ctx_type_0 &_output_){
   Trigg__ctx_type_0_init(_output_);
   return ;
}

void Trigg_setDensity(Trigg__ctx_type_0 &_ctx, fix16_t newDensity);

typedef Trigg__ctx_type_0 Trigg_setPosition_type;

static_inline void Trigg_setPosition_init(Trigg__ctx_type_0 &_output_){
   Trigg__ctx_type_0_init(_output_);
   return ;
}

static_inline void Trigg_setPosition(Trigg__ctx_type_0 &_ctx, int newPosition){
   _ctx.position = int_clip(newPosition,0,128);
};

typedef Trigg__ctx_type_0 Trigg_setSeed_type;

static_inline void Trigg_setSeed_init(Trigg__ctx_type_0 &_output_){
   Trigg__ctx_type_0_init(_output_);
   return ;
}

static_inline void Trigg_setSeed(Trigg__ctx_type_0 &_ctx, int seed){
   Random_setSeed(_ctx.rando,seed);
};

typedef Trigg__ctx_type_0 Trigg_default_type;

static_inline void Trigg_default_init(Trigg__ctx_type_0 &_output_){
   Trigg__ctx_type_0_init(_output_);
   return ;
}

void Trigg_default(Trigg__ctx_type_0 &_ctx);

typedef struct Processor_trigg__ctx_type_0 {
   int trign;
   Trigg__ctx_type_0 trigg;
   int tail;
   fix16_t fs;
   Util__ctx_type_4 _inst73b;
   Util__ctx_type_2 _inst551;
   Util__ctx_type_4 _inst43b;
   Util__ctx_type_2 _inst351;
   Util__ctx_type_4 _inst223b;
   Util__ctx_type_4 _inst193b;
   Util__ctx_type_4 _inst163b;
   Util__ctx_type_4 _inst13b;
   Util__ctx_type_4 _inst133b;
   Util__ctx_type_4 _inst103b;
} Processor_trigg__ctx_type_0;

typedef Processor_trigg__ctx_type_0 Processor_trigg_process_type;

void Processor_trigg__ctx_type_0_init(Processor_trigg__ctx_type_0 &_output_);

static_inline void Processor_trigg_process_init(Processor_trigg__ctx_type_0 &_output_){
   Processor_trigg__ctx_type_0_init(_output_);
   return ;
}

int Processor_trigg_process(Processor_trigg__ctx_type_0 &_ctx, fix16_t clock, fix16_t reset);

typedef Processor_trigg__ctx_type_0 Processor_trigg_setLength_type;

static_inline void Processor_trigg_setLength_init(Processor_trigg__ctx_type_0 &_output_){
   Processor_trigg__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_trigg_setLength(Processor_trigg__ctx_type_0 &_ctx, int param, uint8_t force){
   if(Util_change(_ctx._inst13b,int_to_fix(param)) || force){
      Trigg_setLength(_ctx.trigg,param);
   }
};

typedef Processor_trigg__ctx_type_0 Processor_trigg_setDivider_type;

static_inline void Processor_trigg_setDivider_init(Processor_trigg__ctx_type_0 &_output_){
   Processor_trigg__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_trigg_setDivider(Processor_trigg__ctx_type_0 &_ctx, int param, uint8_t force){
   if(Util_change(_ctx._inst43b,int_to_fix(param)) || force){
      Trigg_setDivider(_ctx.trigg,param);
   }
};

typedef Processor_trigg__ctx_type_0 Processor_trigg_setShift_type;

static_inline void Processor_trigg_setShift_init(Processor_trigg__ctx_type_0 &_output_){
   Processor_trigg__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_trigg_setShift(Processor_trigg__ctx_type_0 &_ctx, int param, uint8_t force){
   if(Util_change(_ctx._inst73b,int_to_fix(param)) || force){
      Trigg_setShift(_ctx.trigg,param);
   }
};

typedef Processor_trigg__ctx_type_0 Processor_trigg_setPosition_type;

static_inline void Processor_trigg_setPosition_init(Processor_trigg__ctx_type_0 &_output_){
   Processor_trigg__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_trigg_setPosition(Processor_trigg__ctx_type_0 &_ctx, int param, uint8_t force){
   if(Util_change(_ctx._inst103b,int_to_fix(param)) || force){
      Trigg_setPosition(_ctx.trigg,param);
   }
};

typedef Processor_trigg__ctx_type_0 Processor_trigg_setEvolve_type;

static_inline void Processor_trigg_setEvolve_init(Processor_trigg__ctx_type_0 &_output_){
   Processor_trigg__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_trigg_setEvolve(Processor_trigg__ctx_type_0 &_ctx, fix16_t param, uint8_t force){
   if(Util_change(_ctx._inst133b,param) || force){
      Trigg_setEvolve(_ctx.trigg,param);
   }
};

typedef Processor_trigg__ctx_type_0 Processor_trigg_setMagnitude_type;

static_inline void Processor_trigg_setMagnitude_init(Processor_trigg__ctx_type_0 &_output_){
   Processor_trigg__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_trigg_setMagnitude(Processor_trigg__ctx_type_0 &_ctx, fix16_t param, uint8_t force){
   if(Util_change(_ctx._inst163b,param) || force){
      Trigg_setMagnitude(_ctx.trigg,param);
   }
};

typedef Processor_trigg__ctx_type_0 Processor_trigg_setBalance_type;

static_inline void Processor_trigg_setBalance_init(Processor_trigg__ctx_type_0 &_output_){
   Processor_trigg__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_trigg_setBalance(Processor_trigg__ctx_type_0 &_ctx, fix16_t param, uint8_t force){
   if(Util_change(_ctx._inst193b,param) || force){
      Trigg_setBalance(_ctx.trigg,param);
   }
};

typedef Processor_trigg__ctx_type_0 Processor_trigg_setDensity_type;

static_inline void Processor_trigg_setDensity_init(Processor_trigg__ctx_type_0 &_output_){
   Processor_trigg__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_trigg_setDensity(Processor_trigg__ctx_type_0 &_ctx, fix16_t param, uint8_t force){
   if(Util_change(_ctx._inst223b,param) || force){
      Trigg_setDensity(_ctx.trigg,param);
   }
};

typedef Processor_trigg__ctx_type_0 Processor_trigg_setSeed_type;

static_inline void Processor_trigg_setSeed_init(Processor_trigg__ctx_type_0 &_output_){
   Processor_trigg__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_trigg_setSeed(Processor_trigg__ctx_type_0 &_ctx, int seed){
   Trigg_setSeed(_ctx.trigg,seed);
};

typedef Processor_trigg__ctx_type_0 Processor_trigg_setSamplerate_type;

static_inline void Processor_trigg_setSamplerate_init(Processor_trigg__ctx_type_0 &_output_){
   Processor_trigg__ctx_type_0_init(_output_);
   return ;
}

static_inline void Processor_trigg_setSamplerate(Processor_trigg__ctx_type_0 &_ctx, fix16_t newFs){
   if((newFs > 0x0 /* 0.000000 */) && (newFs != _ctx.fs)){
      _ctx.fs = newFs;
      _ctx.tail = fix_to_int(_ctx.fs);
   }
};

typedef struct Arp__ctx_type_0 {
   uint8_t stepPersist;
   int step;
   int sequenceSize;
   int sequence[32];
   Random__ctx_type_0 rando;
   int playSequence[32];
   fix16_t pRandomize;
   fix16_t pRandomNotes;
   int notes[16];
   int nbNotes;
   int mode;
   uint8_t dirty;
} Arp__ctx_type_0;

typedef Arp__ctx_type_0 Arp_randomize_type;

void Arp__ctx_type_0_init(Arp__ctx_type_0 &_output_);

static_inline void Arp_randomize_init(Arp__ctx_type_0 &_output_){
   Arp__ctx_type_0_init(_output_);
   return ;
}

void Arp_randomize(Arp__ctx_type_0 &_ctx);

typedef Arp__ctx_type_0 Arp_reset_type;

static_inline void Arp_reset_init(Arp__ctx_type_0 &_output_){
   Arp__ctx_type_0_init(_output_);
   return ;
}

static_inline void Arp_reset(Arp__ctx_type_0 &_ctx){
   Arp_randomize(_ctx);
   _ctx.step = 0;
}

typedef Arp__ctx_type_0 Arp_process_type;

static_inline void Arp_process_init(Arp__ctx_type_0 &_output_){
   Arp__ctx_type_0_init(_output_);
   return ;
}

int Arp_process(Arp__ctx_type_0 &_ctx);

typedef Arp__ctx_type_0 Arp__updateSequence_type;

static_inline void Arp__updateSequence_init(Arp__ctx_type_0 &_output_){
   Arp__ctx_type_0_init(_output_);
   return ;
}

void Arp__updateSequence(Arp__ctx_type_0 &_ctx);

typedef Arp__ctx_type_0 Arp_setNotes_type;

static_inline void Arp_setNotes_init(Arp__ctx_type_0 &_output_){
   Arp__ctx_type_0_init(_output_);
   return ;
}

void Arp_setNotes(Arp__ctx_type_0 &_ctx, int (&newNotes)[16]);

typedef Arp__ctx_type_0 Arp_setMode_type;

static_inline void Arp_setMode_init(Arp__ctx_type_0 &_output_){
   Arp__ctx_type_0_init(_output_);
   return ;
}

void Arp_setMode(Arp__ctx_type_0 &_ctx, int newMode);

typedef Arp__ctx_type_0 Arp_setPRandomNotes_type;

static_inline void Arp_setPRandomNotes_init(Arp__ctx_type_0 &_output_){
   Arp__ctx_type_0_init(_output_);
   return ;
}

void Arp_setPRandomNotes(Arp__ctx_type_0 &_ctx, fix16_t p);

typedef Arp__ctx_type_0 Arp_setPRandomize_type;

static_inline void Arp_setPRandomize_init(Arp__ctx_type_0 &_output_){
   Arp__ctx_type_0_init(_output_);
   return ;
}

static_inline void Arp_setPRandomize(Arp__ctx_type_0 &_ctx, fix16_t p){
   _ctx.pRandomize = fix_clip(p,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
};

typedef Arp__ctx_type_0 Arp_setStepPersist_type;

static_inline void Arp_setStepPersist_init(Arp__ctx_type_0 &_output_){
   Arp__ctx_type_0_init(_output_);
   return ;
}

static_inline void Arp_setStepPersist(Arp__ctx_type_0 &_ctx, uint8_t flag){
   _ctx.stepPersist = flag;
};

typedef Arp__ctx_type_0 Arp_getNbModes_type;

static_inline void Arp_getNbModes_init(Arp__ctx_type_0 &_output_){
   Arp__ctx_type_0_init(_output_);
   return ;
}

static_inline int Arp_getNbModes(Arp__ctx_type_0 &_ctx){
   return 6;
};

typedef Arp__ctx_type_0 Arp_getNbNotes_type;

static_inline void Arp_getNbNotes_init(Arp__ctx_type_0 &_output_){
   Arp__ctx_type_0_init(_output_);
   return ;
}

static_inline int Arp_getNbNotes(Arp__ctx_type_0 &_ctx){
   return _ctx.nbNotes;
};

typedef Arp__ctx_type_0 Arp_getMaxNbNotes_type;

static_inline void Arp_getMaxNbNotes_init(Arp__ctx_type_0 &_output_){
   Arp__ctx_type_0_init(_output_);
   return ;
}

static_inline int Arp_getMaxNbNotes(Arp__ctx_type_0 &_ctx){
   return 16;
};

typedef Arp__ctx_type_0 Arp_getSequenceSize_type;

static_inline void Arp_getSequenceSize_init(Arp__ctx_type_0 &_output_){
   Arp__ctx_type_0_init(_output_);
   return ;
}

static_inline int Arp_getSequenceSize(Arp__ctx_type_0 &_ctx){
   return _ctx.sequenceSize;
};

typedef Arp__ctx_type_0 Arp_setSeed_type;

static_inline void Arp_setSeed_init(Arp__ctx_type_0 &_output_){
   Arp__ctx_type_0_init(_output_);
   return ;
}

static_inline void Arp_setSeed(Arp__ctx_type_0 &_ctx, int seed){
   Random_setSeed(_ctx.rando,seed);
};

static_inline fix16_t Processor_arp_pitchToCv(fix16_t pitch){
   return fix_mul(0x222 /* 0.008333 */,(-0x3c0000 /* -60.000000 */ + pitch));
};

int Processor_arp_cvToPitch(fix16_t cv);

typedef struct Processor_arp__ctx_type_2 {
   uint8_t pre;
} Processor_arp__ctx_type_2;

typedef Processor_arp__ctx_type_2 Processor_arp_edge_type;

static_inline void Processor_arp__ctx_type_2_init(Processor_arp__ctx_type_2 &_output_){
   Processor_arp__ctx_type_2 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

static_inline void Processor_arp_edge_init(Processor_arp__ctx_type_2 &_output_){
   Processor_arp__ctx_type_2_init(_output_);
   return ;
}

static_inline uint8_t Processor_arp_edge(Processor_arp__ctx_type_2 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

typedef struct Processor_arp__ctx_type_3 {
   int note;
   Arp__ctx_type_0 arpe;
   Util__ctx_type_4 _inst73b;
   Util__ctx_type_4 _inst43b;
   Util__ctx_type_2 _inst351;
   Util__ctx_type_2 _inst151;
   Util__ctx_type_4 _inst13b;
} Processor_arp__ctx_type_3;

typedef Processor_arp__ctx_type_3 Processor_arp_process_type;

void Processor_arp__ctx_type_3_init(Processor_arp__ctx_type_3 &_output_);

static_inline void Processor_arp_process_init(Processor_arp__ctx_type_3 &_output_){
   Processor_arp__ctx_type_3_init(_output_);
   return ;
}

fix16_t Processor_arp_process(Processor_arp__ctx_type_3 &_ctx, fix16_t trig, fix16_t reset);

typedef Processor_arp__ctx_type_3 Processor_arp_setMode_type;

static_inline void Processor_arp_setMode_init(Processor_arp__ctx_type_3 &_output_){
   Processor_arp__ctx_type_3_init(_output_);
   return ;
}

static_inline void Processor_arp_setMode(Processor_arp__ctx_type_3 &_ctx, int param, uint8_t force){
   if(Util_change(_ctx._inst13b,int_to_fix(param)) || force){
      Arp_setMode(_ctx.arpe,param);
   }
};

typedef Processor_arp__ctx_type_3 Processor_arp_setPRandomNotes_type;

static_inline void Processor_arp_setPRandomNotes_init(Processor_arp__ctx_type_3 &_output_){
   Processor_arp__ctx_type_3_init(_output_);
   return ;
}

static_inline void Processor_arp_setPRandomNotes(Processor_arp__ctx_type_3 &_ctx, fix16_t param, uint8_t force){
   if(Util_change(_ctx._inst43b,param) || force){
      Arp_setPRandomNotes(_ctx.arpe,param);
   }
};

typedef Processor_arp__ctx_type_3 Processor_arp_setPRandomize_type;

static_inline void Processor_arp_setPRandomize_init(Processor_arp__ctx_type_3 &_output_){
   Processor_arp__ctx_type_3_init(_output_);
   return ;
}

static_inline void Processor_arp_setPRandomize(Processor_arp__ctx_type_3 &_ctx, fix16_t param, uint8_t force){
   if(Util_change(_ctx._inst73b,param) || force){
      Arp_setPRandomize(_ctx.arpe,param);
   }
};

typedef Processor_arp__ctx_type_3 Processor_arp_setNotes_type;

static_inline void Processor_arp_setNotes_init(Processor_arp__ctx_type_3 &_output_){
   Processor_arp__ctx_type_3_init(_output_);
   return ;
}

static_inline void Processor_arp_setNotes(Processor_arp__ctx_type_3 &_ctx, int (&newNotes)[16]){
   Arp_setNotes(_ctx.arpe,newNotes);
};

typedef Processor_arp__ctx_type_3 Processor_arp_getNbModes_type;

static_inline void Processor_arp_getNbModes_init(Processor_arp__ctx_type_3 &_output_){
   Processor_arp__ctx_type_3_init(_output_);
   return ;
}

static_inline int Processor_arp_getNbModes(Processor_arp__ctx_type_3 &_ctx){
   return Arp_getNbModes(_ctx.arpe);
};

typedef Processor_arp__ctx_type_3 Processor_arp_getMaxNbNotes_type;

static_inline void Processor_arp_getMaxNbNotes_init(Processor_arp__ctx_type_3 &_output_){
   Processor_arp__ctx_type_3_init(_output_);
   return ;
}

static_inline int Processor_arp_getMaxNbNotes(Processor_arp__ctx_type_3 &_ctx){
   return Arp_getMaxNbNotes(_ctx.arpe);
};

typedef Processor_arp__ctx_type_3 Processor_arp_setSeed_type;

static_inline void Processor_arp_setSeed_init(Processor_arp__ctx_type_3 &_output_){
   Processor_arp__ctx_type_3_init(_output_);
   return ;
}

static_inline void Processor_arp_setSeed(Processor_arp__ctx_type_3 &_ctx, int seed){
   Arp_setSeed(_ctx.arpe,seed);
};

static_inline fix16_t Chord_logBase_raw_c0(int index){
   return Chord_logBase_c0[index];
};

static_inline fix16_t Chord_logBase_raw_c1(int index){
   return Chord_logBase_c1[index];
};

static_inline fix16_t Chord_logBase_raw_c2(int index){
   return Chord_logBase_c2[index];
};

static_inline fix16_t Chord_logBase(fix16_t x){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x21ec5 /* 2.120200 */,(-0x1999 /* -0.100000 */ + x))),0,127);
   return (fix_wrap_array(Chord_logBase_c0)[index] + fix_mul(x,(fix_wrap_array(Chord_logBase_c1)[index] + fix_mul(x,fix_wrap_array(Chord_logBase_c2)[index]))));
}

static_inline fix16_t Chord_spow(fix16_t base, fix16_t x){
   return fix_exp(fix_mul(x,Chord_logBase(base)));
};

static_inline fix16_t Chord_beta(fix16_t x, fix16_t b){
   return fix_clip((0x10000 /* 1.000000 */ + (- Chord_spow((0x10000 /* 1.000000 */ + (- x)),b))),0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
};

void Chord_getScale(int id, uint8_t (&_output_)[12]);

void Chord_getChord(int chord, int (&_output_)[3]);

void Chord_getChordInversion(int chord, int inversion, int (&_output_)[3]);

typedef struct Chord__ctx_type_8 {
   int shifts[11];
   int shift;
   int scaleId;
   uint8_t scale[12];
   int root;
   Random__ctx_type_0 rando;
   int process_ret_2;
   int process_ret_1;
   int process_ret_0;
   fix16_t pJump;
   fix16_t inversions[3];
   fix16_t inversionSpread;
   fix16_t chords[6];
   fix16_t chordSpread;
   int chord;
} Chord__ctx_type_8;

typedef Chord__ctx_type_8 Chord_isChordInShift_type;

void Chord__ctx_type_8_init(Chord__ctx_type_8 &_output_);

static_inline void Chord_isChordInShift_init(Chord__ctx_type_8 &_output_){
   Chord__ctx_type_8_init(_output_);
   return ;
}

uint8_t Chord_isChordInShift(Chord__ctx_type_8 &_ctx, int checkChord, int checkShift);

typedef Chord__ctx_type_8 Chord_drawChord_type;

static_inline void Chord_drawChord_init(Chord__ctx_type_8 &_output_){
   Chord__ctx_type_8_init(_output_);
   return ;
}

int Chord_drawChord(Chord__ctx_type_8 &_ctx, uint8_t lookAround);

typedef Chord__ctx_type_8 Chord_drawInversion_type;

static_inline void Chord_drawInversion_init(Chord__ctx_type_8 &_output_){
   Chord__ctx_type_8_init(_output_);
   return ;
}

int Chord_drawInversion(Chord__ctx_type_8 &_ctx);

typedef Chord__ctx_type_8 Chord_process_type;

static_inline void Chord_process_init(Chord__ctx_type_8 &_output_){
   Chord__ctx_type_8_init(_output_);
   return ;
}

void Chord_process(Chord__ctx_type_8 &_ctx);

typedef Chord__ctx_type_8 Chord_process_ret_0_type;

static_inline void Chord_process_ret_0_init(Chord__ctx_type_8 &_output_){
   Chord__ctx_type_8_init(_output_);
   return ;
}

static_inline int Chord_process_ret_0(Chord__ctx_type_8 &_ctx){
   return _ctx.process_ret_0;
};

typedef Chord__ctx_type_8 Chord_process_ret_1_type;

static_inline void Chord_process_ret_1_init(Chord__ctx_type_8 &_output_){
   Chord__ctx_type_8_init(_output_);
   return ;
}

static_inline int Chord_process_ret_1(Chord__ctx_type_8 &_ctx){
   return _ctx.process_ret_1;
};

typedef Chord__ctx_type_8 Chord_process_ret_2_type;

static_inline void Chord_process_ret_2_init(Chord__ctx_type_8 &_output_){
   Chord__ctx_type_8_init(_output_);
   return ;
}

static_inline int Chord_process_ret_2(Chord__ctx_type_8 &_ctx){
   return _ctx.process_ret_2;
};

typedef Chord__ctx_type_8 Chord_reset_type;

static_inline void Chord_reset_init(Chord__ctx_type_8 &_output_){
   Chord__ctx_type_8_init(_output_);
   return ;
}

void Chord_reset(Chord__ctx_type_8 &_ctx);

typedef Chord__ctx_type_8 Chord_setScale_type;

static_inline void Chord_setScale_init(Chord__ctx_type_8 &_output_){
   Chord__ctx_type_8_init(_output_);
   return ;
}

void Chord_setScale(Chord__ctx_type_8 &_ctx, int id);

typedef Chord__ctx_type_8 Chord_setRoot_type;

static_inline void Chord_setRoot_init(Chord__ctx_type_8 &_output_){
   Chord__ctx_type_8_init(_output_);
   return ;
}

static_inline void Chord_setRoot(Chord__ctx_type_8 &_ctx, int note){
   note = int_clip(note,0,127);
   if(_ctx.root != note){
      _ctx.root = note;
   }
}

typedef Chord__ctx_type_8 Chord__updateChords_type;

static_inline void Chord__updateChords_init(Chord__ctx_type_8 &_output_){
   Chord__ctx_type_8_init(_output_);
   return ;
}

void Chord__updateChords(Chord__ctx_type_8 &_ctx, fix16_t bParam);

typedef Chord__ctx_type_8 Chord__updateInversions_type;

static_inline void Chord__updateInversions_init(Chord__ctx_type_8 &_output_){
   Chord__ctx_type_8_init(_output_);
   return ;
}

void Chord__updateInversions(Chord__ctx_type_8 &_ctx, fix16_t bParam);

typedef Chord__ctx_type_8 Chord_setChord_type;

static_inline void Chord_setChord_init(Chord__ctx_type_8 &_output_){
   Chord__ctx_type_8_init(_output_);
   return ;
}

static_inline void Chord_setChord(Chord__ctx_type_8 &_ctx, int newChord){
   _ctx.chord = int_clip(newChord,0,5);
};

typedef Chord__ctx_type_8 Chord_setChordSpread_type;

static_inline void Chord_setChordSpread_init(Chord__ctx_type_8 &_output_){
   Chord__ctx_type_8_init(_output_);
   return ;
}

void Chord_setChordSpread(Chord__ctx_type_8 &_ctx, fix16_t newSpread);

typedef Chord__ctx_type_8 Chord_setInversionSpread_type;

static_inline void Chord_setInversionSpread_init(Chord__ctx_type_8 &_output_){
   Chord__ctx_type_8_init(_output_);
   return ;
}

void Chord_setInversionSpread(Chord__ctx_type_8 &_ctx, fix16_t newSpread);

typedef Chord__ctx_type_8 Chord_getChordP_type;

static_inline void Chord_getChordP_init(Chord__ctx_type_8 &_output_){
   Chord__ctx_type_8_init(_output_);
   return ;
}

fix16_t Chord_getChordP(Chord__ctx_type_8 &_ctx, int chordId);

typedef Chord__ctx_type_8 Chord_getNbChords_type;

static_inline void Chord_getNbChords_init(Chord__ctx_type_8 &_output_){
   Chord__ctx_type_8_init(_output_);
   return ;
}

static_inline int Chord_getNbChords(Chord__ctx_type_8 &_ctx){
   return 6;
};

typedef Chord__ctx_type_8 Chord_getScaleId_type;

static_inline void Chord_getScaleId_init(Chord__ctx_type_8 &_output_){
   Chord__ctx_type_8_init(_output_);
   return ;
}

static_inline int Chord_getScaleId(Chord__ctx_type_8 &_ctx){
   return _ctx.scaleId;
};

typedef Chord__ctx_type_8 Chord_getNbScales_type;

static_inline void Chord_getNbScales_init(Chord__ctx_type_8 &_output_){
   Chord__ctx_type_8_init(_output_);
   return ;
}

static_inline int Chord_getNbScales(Chord__ctx_type_8 &_ctx){
   return 20;
};

typedef Chord__ctx_type_8 Chord_getRoot_type;

static_inline void Chord_getRoot_init(Chord__ctx_type_8 &_output_){
   Chord__ctx_type_8_init(_output_);
   return ;
}

static_inline int Chord_getRoot(Chord__ctx_type_8 &_ctx){
   return _ctx.root;
};

typedef Chord__ctx_type_8 Chord_setJump_type;

static_inline void Chord_setJump_init(Chord__ctx_type_8 &_output_){
   Chord__ctx_type_8_init(_output_);
   return ;
}

static_inline void Chord_setJump(Chord__ctx_type_8 &_ctx, fix16_t p){
   _ctx.pJump = fix_clip(p,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
};

typedef Chord__ctx_type_8 Chord_setSeed_type;

static_inline void Chord_setSeed_init(Chord__ctx_type_8 &_output_){
   Chord__ctx_type_8_init(_output_);
   return ;
}

static_inline void Chord_setSeed(Chord__ctx_type_8 &_ctx, int seed){
   Random_setSeed(_ctx.rando,seed);
};

typedef Chord__ctx_type_8 Chord_default_type;

static_inline void Chord_default_init(Chord__ctx_type_8 &_output_){
   Chord__ctx_type_8_init(_output_);
   return ;
}

void Chord_default(Chord__ctx_type_8 &_ctx);

static_inline int Clock_getMinGroupSize(){
   return 2;
};

static_inline int Clock_getMaxGroupSize(){
   return 128;
};

static_inline fix16_t Clock_getMinBPM(){
   return 0x4189 /* 0.256000 */;
};

static_inline fix16_t Clock_getMaxBPM(){
   return 0x75300000 /* 30000.000000 */;
};

static_inline int Clock_getMinTicks(){
   return 1;
};

static_inline int Clock_getMaxTicks(){
   return 32765;
};

int Clock_compareTimeFract(int time1S, fix16_t time1Fract, int time2S, fix16_t time2Fract);

typedef struct Clock__ctx_type_7 {
   int timeS;
   fix16_t timeFract;
   int ticks;
   fix16_t swing;
   int subSize;
   int pos;
   int pendingTicks;
   uint8_t orderMix;
   int lastTimeS;
   fix16_t lastTimeFract;
   int lastTicks;
   int lastBeatS;
   fix16_t lastBeatFract;
   uint8_t init;
   fix16_t ibiB;
   fix16_t ibiA;
   fix16_t ibi;
   int groupSize;
   fix16_t groupRatio;
   fix16_t bpm;
} Clock__ctx_type_7;

typedef Clock__ctx_type_7 Clock_process_type;

void Clock__ctx_type_7_init(Clock__ctx_type_7 &_output_);

static_inline void Clock_process_init(Clock__ctx_type_7 &_output_){
   Clock__ctx_type_7_init(_output_);
   return ;
}

int Clock_process(Clock__ctx_type_7 &_ctx);

typedef Clock__ctx_type_7 Clock_setTime_type;

static_inline void Clock_setTime_init(Clock__ctx_type_7 &_output_){
   Clock__ctx_type_7_init(_output_);
   return ;
}

void Clock_setTime(Clock__ctx_type_7 &_ctx, int newTimeS, fix16_t newTimeFract);

typedef Clock__ctx_type_7 Clock_reset_type;

static_inline void Clock_reset_init(Clock__ctx_type_7 &_output_){
   Clock__ctx_type_7_init(_output_);
   return ;
}

static_inline void Clock_reset(Clock__ctx_type_7 &_ctx){
   _ctx.init = false;
};

typedef Clock__ctx_type_7 Clock__recompute_type;

static_inline void Clock__recompute_init(Clock__ctx_type_7 &_output_){
   Clock__ctx_type_7_init(_output_);
   return ;
}

void Clock__recompute(Clock__ctx_type_7 &_ctx);

typedef Clock__ctx_type_7 Clock_setGroupSize_type;

static_inline void Clock_setGroupSize_init(Clock__ctx_type_7 &_output_){
   Clock__ctx_type_7_init(_output_);
   return ;
}

void Clock_setGroupSize(Clock__ctx_type_7 &_ctx, int newGroupSize);

typedef Clock__ctx_type_7 Clock_setGroupRatio_type;

static_inline void Clock_setGroupRatio_init(Clock__ctx_type_7 &_output_){
   Clock__ctx_type_7_init(_output_);
   return ;
}

void Clock_setGroupRatio(Clock__ctx_type_7 &_ctx, fix16_t newGroupRatio);

typedef Clock__ctx_type_7 Clock_setSwing_type;

static_inline void Clock_setSwing_init(Clock__ctx_type_7 &_output_){
   Clock__ctx_type_7_init(_output_);
   return ;
}

void Clock_setSwing(Clock__ctx_type_7 &_ctx, fix16_t newSwing);

typedef Clock__ctx_type_7 Clock_setOrderMix_type;

static_inline void Clock_setOrderMix_init(Clock__ctx_type_7 &_output_){
   Clock__ctx_type_7_init(_output_);
   return ;
}

static_inline void Clock_setOrderMix(Clock__ctx_type_7 &_ctx, uint8_t flag){
   _ctx.orderMix = flag;
};

typedef Clock__ctx_type_7 Clock_getNbTicks_type;

static_inline void Clock_getNbTicks_init(Clock__ctx_type_7 &_output_){
   Clock__ctx_type_7_init(_output_);
   return ;
}

static_inline int Clock_getNbTicks(Clock__ctx_type_7 &_ctx){
   return _ctx.ticks;
};

typedef Clock__ctx_type_7 Clock_getTicks_type;

static_inline void Clock_getTicks_init(Clock__ctx_type_7 &_output_){
   Clock__ctx_type_7_init(_output_);
   return ;
}

int Clock_getTicks(Clock__ctx_type_7 &_ctx);

typedef Clock__ctx_type_7 Clock_getNbNewTicks_type;

static_inline void Clock_getNbNewTicks_init(Clock__ctx_type_7 &_output_){
   Clock__ctx_type_7_init(_output_);
   return ;
}

int Clock_getNbNewTicks(Clock__ctx_type_7 &_ctx);

typedef Clock__ctx_type_7 Clock_setNbTicks_type;

static_inline void Clock_setNbTicks_init(Clock__ctx_type_7 &_output_){
   Clock__ctx_type_7_init(_output_);
   return ;
}

void Clock_setNbTicks(Clock__ctx_type_7 &_ctx, int newTicks);

typedef Clock__ctx_type_7 Clock_setBPM_type;

static_inline void Clock_setBPM_init(Clock__ctx_type_7 &_output_){
   Clock__ctx_type_7_init(_output_);
   return ;
}

void Clock_setBPM(Clock__ctx_type_7 &_ctx, fix16_t newBPM);

typedef Clock__ctx_type_7 Clock_default_type;

static_inline void Clock_default_init(Clock__ctx_type_7 &_output_){
   Clock__ctx_type_7_init(_output_);
   return ;
}

void Clock_default(Clock__ctx_type_7 &_ctx);

typedef struct Processor_clock__ctx_type_0 {
   fix16_t lastTrigg;
   uint8_t gate;
} Processor_clock__ctx_type_0;

typedef Processor_clock__ctx_type_0 Processor_clock_gate1ms_type;

void Processor_clock__ctx_type_0_init(Processor_clock__ctx_type_0 &_output_);

static_inline void Processor_clock_gate1ms_init(Processor_clock__ctx_type_0 &_output_){
   Processor_clock__ctx_type_0_init(_output_);
   return ;
}

uint8_t Processor_clock_gate1ms(Processor_clock__ctx_type_0 &_ctx, uint8_t trig, fix16_t time);

static_inline fix16_t Processor_clock_bool2real(uint8_t b){
   if(b){
      return 0x10000 /* 1.000000 */;
   }
   else
   {
      return 0x0 /* 0.000000 */;
   }
};

typedef struct Processor_clock__ctx_type_2 {
   fix16_t process_ret_4;
   fix16_t process_ret_3;
   fix16_t process_ret_2;
   fix16_t process_ret_1;
   fix16_t process_ret_0;
   Clock__ctx_type_7 cloclo;
   Util__ctx_type_4 _inst73b;
   Processor_clock__ctx_type_0 _inst5d8;
   Processor_clock__ctx_type_0 _inst4d8;
   Util__ctx_type_4 _inst43b;
   Processor_clock__ctx_type_0 _inst3d8;
   Processor_clock__ctx_type_0 _inst2d8;
   Processor_clock__ctx_type_0 _inst1d8;
   Util__ctx_type_4 _inst163b;
   Util__ctx_type_4 _inst13b;
   Util__ctx_type_4 _inst133b;
   Util__ctx_type_4 _inst103b;
} Processor_clock__ctx_type_2;

typedef Processor_clock__ctx_type_2 Processor_clock_process_type;

void Processor_clock__ctx_type_2_init(Processor_clock__ctx_type_2 &_output_);

static_inline void Processor_clock_process_init(Processor_clock__ctx_type_2 &_output_){
   Processor_clock__ctx_type_2_init(_output_);
   return ;
}

void Processor_clock_process(Processor_clock__ctx_type_2 &_ctx, int timeS, fix16_t timeFract);

typedef Processor_clock__ctx_type_2 Processor_clock_process_ret_0_type;

static_inline void Processor_clock_process_ret_0_init(Processor_clock__ctx_type_2 &_output_){
   Processor_clock__ctx_type_2_init(_output_);
   return ;
}

static_inline fix16_t Processor_clock_process_ret_0(Processor_clock__ctx_type_2 &_ctx){
   return _ctx.process_ret_0;
};

typedef Processor_clock__ctx_type_2 Processor_clock_process_ret_1_type;

static_inline void Processor_clock_process_ret_1_init(Processor_clock__ctx_type_2 &_output_){
   Processor_clock__ctx_type_2_init(_output_);
   return ;
}

static_inline fix16_t Processor_clock_process_ret_1(Processor_clock__ctx_type_2 &_ctx){
   return _ctx.process_ret_1;
};

typedef Processor_clock__ctx_type_2 Processor_clock_process_ret_2_type;

static_inline void Processor_clock_process_ret_2_init(Processor_clock__ctx_type_2 &_output_){
   Processor_clock__ctx_type_2_init(_output_);
   return ;
}

static_inline fix16_t Processor_clock_process_ret_2(Processor_clock__ctx_type_2 &_ctx){
   return _ctx.process_ret_2;
};

typedef Processor_clock__ctx_type_2 Processor_clock_process_ret_3_type;

static_inline void Processor_clock_process_ret_3_init(Processor_clock__ctx_type_2 &_output_){
   Processor_clock__ctx_type_2_init(_output_);
   return ;
}

static_inline fix16_t Processor_clock_process_ret_3(Processor_clock__ctx_type_2 &_ctx){
   return _ctx.process_ret_3;
};

typedef Processor_clock__ctx_type_2 Processor_clock_process_ret_4_type;

static_inline void Processor_clock_process_ret_4_init(Processor_clock__ctx_type_2 &_output_){
   Processor_clock__ctx_type_2_init(_output_);
   return ;
}

static_inline fix16_t Processor_clock_process_ret_4(Processor_clock__ctx_type_2 &_ctx){
   return _ctx.process_ret_4;
};

typedef Processor_clock__ctx_type_2 Processor_clock_setBPM_type;

static_inline void Processor_clock_setBPM_init(Processor_clock__ctx_type_2 &_output_){
   Processor_clock__ctx_type_2_init(_output_);
   return ;
}

static_inline void Processor_clock_setBPM(Processor_clock__ctx_type_2 &_ctx, fix16_t param, uint8_t force){
   if(Util_change(_ctx._inst13b,param) || force){
      Clock_setBPM(_ctx.cloclo,param);
   }
};

typedef Processor_clock__ctx_type_2 Processor_clock_setNbTicks_type;

static_inline void Processor_clock_setNbTicks_init(Processor_clock__ctx_type_2 &_output_){
   Processor_clock__ctx_type_2_init(_output_);
   return ;
}

static_inline void Processor_clock_setNbTicks(Processor_clock__ctx_type_2 &_ctx, int param, uint8_t force){
   if(Util_change(_ctx._inst43b,int_to_fix(param)) || force){
      Clock_setNbTicks(_ctx.cloclo,param);
   }
};

typedef Processor_clock__ctx_type_2 Processor_clock_setSwing_type;

static_inline void Processor_clock_setSwing_init(Processor_clock__ctx_type_2 &_output_){
   Processor_clock__ctx_type_2_init(_output_);
   return ;
}

static_inline void Processor_clock_setSwing(Processor_clock__ctx_type_2 &_ctx, fix16_t param, uint8_t force){
   if(Util_change(_ctx._inst73b,param) || force){
      Clock_setSwing(_ctx.cloclo,param);
   }
};

typedef Processor_clock__ctx_type_2 Processor_clock_setGroupSize_type;

static_inline void Processor_clock_setGroupSize_init(Processor_clock__ctx_type_2 &_output_){
   Processor_clock__ctx_type_2_init(_output_);
   return ;
}

static_inline void Processor_clock_setGroupSize(Processor_clock__ctx_type_2 &_ctx, int param, uint8_t force){
   if(Util_change(_ctx._inst103b,int_to_fix(param)) || force){
      Clock_setGroupSize(_ctx.cloclo,param);
   }
};

typedef Processor_clock__ctx_type_2 Processor_clock_setGroupRatio_type;

static_inline void Processor_clock_setGroupRatio_init(Processor_clock__ctx_type_2 &_output_){
   Processor_clock__ctx_type_2_init(_output_);
   return ;
}

static_inline void Processor_clock_setGroupRatio(Processor_clock__ctx_type_2 &_ctx, fix16_t param, uint8_t force){
   if(Util_change(_ctx._inst133b,param) || force){
      Clock_setGroupRatio(_ctx.cloclo,param);
   }
};

typedef Processor_clock__ctx_type_2 Processor_clock_setOrderMix_type;

static_inline void Processor_clock_setOrderMix_init(Processor_clock__ctx_type_2 &_output_){
   Processor_clock__ctx_type_2_init(_output_);
   return ;
}

static_inline void Processor_clock_setOrderMix(Processor_clock__ctx_type_2 &_ctx, fix16_t param, uint8_t force){
   if(Util_change(_ctx._inst163b,Processor_clock_bool2real((param > 0x8000 /* 0.500000 */))) || force){
      Clock_setOrderMix(_ctx.cloclo,(param > 0x8000 /* 0.500000 */));
   }
};

static_inline fix16_t Processor_clock_getMinBPM(){
   return 0x4189 /* 0.256000 */;
};

static_inline fix16_t Processor_clock_getMaxBPM(){
   return 0x75300000 /* 30000.000000 */;
};

static_inline int Processor_clock_getMinTicks(){
   return 1;
};

static_inline int Processor_clock_getMaxTicks(){
   return 32765;
};

static_inline int Processor_clock_getMinGroupSize(){
   return 2;
};

static_inline int Processor_clock_getMaxGroupSize(){
   return 128;
};

static_inline fix16_t Processor_gate_pitchToCv(fix16_t pitch){
   return fix_mul(0x222 /* 0.008333 */,(-0x3c0000 /* -60.000000 */ + pitch));
};

int Processor_gate_cvToPitch(fix16_t cv);

typedef struct Processor_gate__ctx_type_2 {
   uint8_t pre;
} Processor_gate__ctx_type_2;

typedef Processor_gate__ctx_type_2 Processor_gate_edge_type;

static_inline void Processor_gate__ctx_type_2_init(Processor_gate__ctx_type_2 &_output_){
   Processor_gate__ctx_type_2 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

static_inline void Processor_gate_edge_init(Processor_gate__ctx_type_2 &_output_){
   Processor_gate__ctx_type_2_init(_output_);
   return ;
}

static_inline uint8_t Processor_gate_edge(Processor_gate__ctx_type_2 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

typedef struct Processor_gate__ctx_type_3 {
   fix16_t voctOut[16];
   uint8_t triggers[16];
   int notes[128];
   int nbActive;
   fix16_t gatesOut[16];
   Gate__ctx_type_2 bill;
   Util__ctx_type_4 _inst13b;
} Processor_gate__ctx_type_3;

typedef Processor_gate__ctx_type_3 Processor_gate_process_type;

void Processor_gate__ctx_type_3_init(Processor_gate__ctx_type_3 &_output_);

static_inline void Processor_gate_process_init(Processor_gate__ctx_type_3 &_output_){
   Processor_gate__ctx_type_3_init(_output_);
   return ;
}

void Processor_gate_process(Processor_gate__ctx_type_3 &_ctx, int timeS, fix16_t timeFract, fix16_t (&triggersCV)[16], fix16_t (&voct)[16], int nbActiveIn);

typedef Processor_gate__ctx_type_3 Processor_gate_setDuration_type;

static_inline void Processor_gate_setDuration_init(Processor_gate__ctx_type_3 &_output_){
   Processor_gate__ctx_type_3_init(_output_);
   return ;
}

static_inline void Processor_gate_setDuration(Processor_gate__ctx_type_3 &_ctx, fix16_t param, uint8_t force){
   if(Util_change(_ctx._inst13b,param) || force){
      Gate_setDuration(_ctx.bill,param);
   }
};

typedef Processor_gate__ctx_type_3 Processor_gate_getOutputs_type;

static_inline void Processor_gate_getOutputs_init(Processor_gate__ctx_type_3 &_output_){
   Processor_gate__ctx_type_3_init(_output_);
   return ;
}

int Processor_gate_getOutputs(Processor_gate__ctx_type_3 &_ctx, fix16_t (&gatesExt)[16], fix16_t (&voctExt)[16]);

static_inline fix16_t Processor_chord_pitchToCv(fix16_t pitch){
   return fix_mul(0x222 /* 0.008333 */,(-0x3c0000 /* -60.000000 */ + pitch));
};

int Processor_chord_cvToPitch(fix16_t cv);

typedef struct Processor_chord__ctx_type_2 {
   Chord__ctx_type_8 ton;
   fix16_t process_ret_2;
   fix16_t process_ret_1;
   fix16_t process_ret_0;
   int n3;
   int n2;
   int n1;
   Util__ctx_type_4 _inst73b;
   Util__ctx_type_4 _inst43b;
   Util__ctx_type_2 _inst351;
   Util__ctx_type_4 _inst163b;
   Util__ctx_type_2 _inst151;
   Util__ctx_type_4 _inst13b;
   Util__ctx_type_4 _inst133b;
   Util__ctx_type_4 _inst103b;
} Processor_chord__ctx_type_2;

typedef Processor_chord__ctx_type_2 Processor_chord_process_type;

void Processor_chord__ctx_type_2_init(Processor_chord__ctx_type_2 &_output_);

static_inline void Processor_chord_process_init(Processor_chord__ctx_type_2 &_output_){
   Processor_chord__ctx_type_2_init(_output_);
   return ;
}

void Processor_chord_process(Processor_chord__ctx_type_2 &_ctx, fix16_t trig, fix16_t reset);

typedef Processor_chord__ctx_type_2 Processor_chord_process_ret_0_type;

static_inline void Processor_chord_process_ret_0_init(Processor_chord__ctx_type_2 &_output_){
   Processor_chord__ctx_type_2_init(_output_);
   return ;
}

static_inline fix16_t Processor_chord_process_ret_0(Processor_chord__ctx_type_2 &_ctx){
   return _ctx.process_ret_0;
};

typedef Processor_chord__ctx_type_2 Processor_chord_process_ret_1_type;

static_inline void Processor_chord_process_ret_1_init(Processor_chord__ctx_type_2 &_output_){
   Processor_chord__ctx_type_2_init(_output_);
   return ;
}

static_inline fix16_t Processor_chord_process_ret_1(Processor_chord__ctx_type_2 &_ctx){
   return _ctx.process_ret_1;
};

typedef Processor_chord__ctx_type_2 Processor_chord_process_ret_2_type;

static_inline void Processor_chord_process_ret_2_init(Processor_chord__ctx_type_2 &_output_){
   Processor_chord__ctx_type_2_init(_output_);
   return ;
}

static_inline fix16_t Processor_chord_process_ret_2(Processor_chord__ctx_type_2 &_ctx){
   return _ctx.process_ret_2;
};

typedef Processor_chord__ctx_type_2 Processor_chord_setScale_type;

static_inline void Processor_chord_setScale_init(Processor_chord__ctx_type_2 &_output_){
   Processor_chord__ctx_type_2_init(_output_);
   return ;
}

static_inline void Processor_chord_setScale(Processor_chord__ctx_type_2 &_ctx, int param, uint8_t force){
   if(Util_change(_ctx._inst13b,int_to_fix(param)) || force){
      Chord_setScale(_ctx.ton,param);
   }
};

typedef Processor_chord__ctx_type_2 Processor_chord_setRoot_type;

static_inline void Processor_chord_setRoot_init(Processor_chord__ctx_type_2 &_output_){
   Processor_chord__ctx_type_2_init(_output_);
   return ;
}

static_inline void Processor_chord_setRoot(Processor_chord__ctx_type_2 &_ctx, fix16_t param, uint8_t force){
   if(Util_change(_ctx._inst43b,param) || force){
      Chord_setRoot(_ctx.ton,Processor_chord_cvToPitch(param));
   }
};

typedef Processor_chord__ctx_type_2 Processor_chord_setChord_type;

static_inline void Processor_chord_setChord_init(Processor_chord__ctx_type_2 &_output_){
   Processor_chord__ctx_type_2_init(_output_);
   return ;
}

static_inline void Processor_chord_setChord(Processor_chord__ctx_type_2 &_ctx, int param, uint8_t force){
   if(Util_change(_ctx._inst73b,int_to_fix(param)) || force){
      Chord_setChord(_ctx.ton,param);
   }
};

typedef Processor_chord__ctx_type_2 Processor_chord_setChordSpread_type;

static_inline void Processor_chord_setChordSpread_init(Processor_chord__ctx_type_2 &_output_){
   Processor_chord__ctx_type_2_init(_output_);
   return ;
}

static_inline void Processor_chord_setChordSpread(Processor_chord__ctx_type_2 &_ctx, fix16_t param, uint8_t force){
   if(Util_change(_ctx._inst103b,param) || force){
      Chord_setChordSpread(_ctx.ton,param);
   }
};

typedef Processor_chord__ctx_type_2 Processor_chord_setInversionSpread_type;

static_inline void Processor_chord_setInversionSpread_init(Processor_chord__ctx_type_2 &_output_){
   Processor_chord__ctx_type_2_init(_output_);
   return ;
}

static_inline void Processor_chord_setInversionSpread(Processor_chord__ctx_type_2 &_ctx, fix16_t param, uint8_t force){
   if(Util_change(_ctx._inst133b,param) || force){
      Chord_setInversionSpread(_ctx.ton,param);
   }
};

typedef Processor_chord__ctx_type_2 Processor_chord_setJump_type;

static_inline void Processor_chord_setJump_init(Processor_chord__ctx_type_2 &_output_){
   Processor_chord__ctx_type_2_init(_output_);
   return ;
}

static_inline void Processor_chord_setJump(Processor_chord__ctx_type_2 &_ctx, fix16_t param, uint8_t force){
   if(Util_change(_ctx._inst163b,param) || force){
      Chord_setJump(_ctx.ton,param);
   }
};

typedef Processor_chord__ctx_type_2 Processor_chord_getNbChords_type;

static_inline void Processor_chord_getNbChords_init(Processor_chord__ctx_type_2 &_output_){
   Processor_chord__ctx_type_2_init(_output_);
   return ;
}

static_inline int Processor_chord_getNbChords(Processor_chord__ctx_type_2 &_ctx){
   return Chord_getNbChords(_ctx.ton);
};

typedef Processor_chord__ctx_type_2 Processor_chord_getNbScales_type;

static_inline void Processor_chord_getNbScales_init(Processor_chord__ctx_type_2 &_output_){
   Processor_chord__ctx_type_2_init(_output_);
   return ;
}

static_inline int Processor_chord_getNbScales(Processor_chord__ctx_type_2 &_ctx){
   return Chord_getNbScales(_ctx.ton);
};

typedef Processor_chord__ctx_type_2 Processor_chord_getScale_type;

static_inline void Processor_chord_getScale_init(Processor_chord__ctx_type_2 &_output_){
   Processor_chord__ctx_type_2_init(_output_);
   return ;
}

int Processor_chord_getScale(Processor_chord__ctx_type_2 &_ctx, fix16_t (&scale)[12]);

typedef Processor_chord__ctx_type_2 Processor_chord_setSeed_type;

static_inline void Processor_chord_setSeed_init(Processor_chord__ctx_type_2 &_output_){
   Processor_chord__ctx_type_2_init(_output_);
   return ;
}

static_inline void Processor_chord_setSeed(Processor_chord__ctx_type_2 &_ctx, int seed){
   Chord_setSeed(_ctx.ton,seed);
};



#endif // ENGINE_UTILS_H
